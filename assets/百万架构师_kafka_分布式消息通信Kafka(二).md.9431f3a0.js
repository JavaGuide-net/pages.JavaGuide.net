import{_ as s,o as a,h as n,Q as o}from"./chunks/framework.da611722.js";const p="/assets/JavaGuide_Kafka_通信2_Topic图解.6d700194.png",l="/assets/JavaGuide_Kafka_通信2_Partition分区.55d4f3f5.png",e="/assets/JavaGuide_Kafka_通信2_消费原理展示.31bb5295.png",t="/assets/JavaGuide_Kafka_通信2_coordinator原理.26366153.png",r="/assets/JavaGuide_Kafka_通信2_synchronizing_group_state阶段.8cbd7c22.png",c="/assets/JavaGuide_Kafka_通信2_offset.75874cde.png",i="/assets/JavaGuide_Kafka_通信2_集群1的日志.45aadbe1.png",y="/assets/JavaGuide_Kafka_通信2_集群2的日志.cc4f16ab.png",E="/assets/JavaGuide_Kafka_通信2_集群3的日志.faebfcb8.png",u="/assets/JavaGuide_Kafka_通信2_多个分区在Broker中的分配.5c843607.png",d="/assets/JavaGuide_Kafka_通信2_零拷贝.f2e24800.png",F="/assets/JavaGuide_Kafka_通信2_零拷贝_内核空间_用户空间.240f190a.png",B=JSON.parse('{"title":"分布式消息通信Kafka(二) | JavaGuide","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://javaguide.net/百万架构师/kafka/分布式消息通信Kafka(二).html"}],["meta",{"name":"keywords","content":"分布式消息通信Kafka(二) , JavaGuide , JavaGuide官网, Java面试指南, Java基础, 多线程, JVM, 虚拟机, 数据库, MySQL, Spring, Redis, MyBatis, 系统设计, 分布式, RPC, 高可用, 高并发"}],["meta",{"name":"og:url","content":"https://JavaGuide.net"}],["meta",{"name":"og:type","content":"website"}],["meta",{"name":"og:image","content":"https://javaguide.net/JavaGuide-og.png"}],["meta",{"name":"og:title","content":"分布式消息通信Kafka(二) | JavaGuide | Java面试指南 | JavaGuide官网"}],["meta",{"name":"og:description","content":"分布式消息通信Kafka(二) | JavaGuide | Java面试指南 | JavaGuide官网 | 「JavaGuide.net」一份涵盖大部分 Java 程序员所需要掌握的核心知识。准备 Java 面试，首选 JavaGuide.net ！"}],["meta",{"name":"twitter:site","content":"https://javaguide.net"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:creator","content":"nogeek.cn"}],["meta",{"name":"twitter:title","content":"分布式消息通信Kafka(二) | JavaGuide | Java面试指南 | JavaGuide官网"}],["meta",{"name":"twitter:description","content":"分布式消息通信Kafka(二) | JavaGuide | Java面试指南 | JavaGuide官网 | 「JavaGuide.net」一份涵盖大部分 Java 程序员所需要掌握的核心知识。准备 Java 面试，首选 JavaGuide.net ！"}],["meta",{"name":"twitter:image","content":"https://javaguide.net/JavaGuide-og.png"}],["meta",{"name":"sogou_site_verification","content":"fcAkazTXFd"}],["meta",{"name":"baidu-site-verification","content":"codeva-MXEPYsXKGk"}],["meta",{"name":"msvalidate.01","content":"9F2D57CFC59E8031212A166878638B15"}]]},"headers":[],"relativePath":"百万架构师/kafka/分布式消息通信Kafka(二).md","filePath":"百万架构师/kafka/分布式消息通信Kafka(二).md","lastUpdated":1741277271000}'),m={name:"百万架构师/kafka/分布式消息通信Kafka(二).md"},b=o('<h3 id="课程目标" tabindex="-1">课程目标 <a class="header-anchor" href="#课程目标" aria-label="Permalink to &quot;课程目标&quot;">​</a></h3><ol><li><p>Topic &amp; Partition</p></li><li><p>消息分发策略</p></li><li><p>消息消费原理</p></li><li><p>消息的存储策略</p></li><li><p>Partition 副本机制</p></li></ol><h1 id="关于-topic-和-partition" tabindex="-1">关于 Topic 和 Partition <a class="header-anchor" href="#关于-topic-和-partition" aria-label="Permalink to &quot;关于 Topic 和 Partition&quot;">​</a></h1><h2 id="topic" tabindex="-1">Topic <a class="header-anchor" href="#topic" aria-label="Permalink to &quot;Topic&quot;">​</a></h2><p>​ 在 kafka 中，topic 是一个存储消息的逻辑概念，可以认为是一个消息集合。每条消息发送到 kafka 集群的消息都有一个类别。物理上来说，不同的 Topic 的消息是分开存储的。</p><p><img src="'+p+`" alt="JavaGuide_Kafka_通信2_Topic图解.png"></p><pre><code>每个 topic 可以有多个生产者向它发送消息，也可以有多个消费者去消费其中的消息。
</code></pre><h2 id="partition" tabindex="-1">Partition <a class="header-anchor" href="#partition" aria-label="Permalink to &quot;Partition&quot;">​</a></h2><p>​ 每个 topic 可以划分多个分区（每个 Topic 至少有一个分区），同一 Topic 下的不同分区包含的消息是不同的。每个消息在被添加到分区时，都会被分配一个 offset（称之为偏移量），它是消息在此分区中的唯一编号。kafka 通过 offset 保证消息在分区内的顺序，offset 的顺序不跨分区。即 kafka只保证在同一个分区内的消息是有序的。</p><blockquote><p>分区可以理解为数据库层面上的分表操作</p></blockquote><p>如下图中，对于名字为 test 的 topic，做了 3 个分区，分别是</p><p>p0、p1、p2</p><p>➢ 每一条消息发送到 broker 时，会根据 partition 的规则选择存储到哪一个 partition 。如果 partition 规则设置合理，那么所有的消息会均匀的分布在不同的 partition 中， 这样就有点类似数据库的分库分表的概念，把数据做了分片处理。</p><p><img src="`+l+`" alt="JavaGuide_Kafka_通信2_Partition分区.png"></p><p>​ 每一个分区里的数字就是一个 offset ，它是一个 类似于游标的概念。这个数字不是数据，是一个 offset，通过 offset 找到对应的数据内容。每一个 分区的内容是追加的。一个顺序写入的规则。顺序递增。Kafka 可以保证它每一个 topic 里的每一个 分区 的数据都是顺序的。跨分区是不保证顺序的。这是 partition 的改变。</p><h2 id="topic-partition-的存储" tabindex="-1">Topic &amp; Partition 的存储 <a class="header-anchor" href="#topic-partition-的存储" aria-label="Permalink to &quot;Topic &amp; Partition 的存储&quot;">​</a></h2><p>​ Partition 是以文件的形式存储在文件系统中，比如创建一个名为 firstTopic 的 topic，其中有 3 个 partition，那么在kafka 的数据目录（/tmp/kafka-log）中就有 3 个目录， firstTopic-0~3， 命名规则是&lt;topic_name&gt;-&lt;partition_id&gt; ，每一个 Topic 的存储是以 Partition 的存储。</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@Darian1 bin]# sh kafka</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">topics.sh </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">create </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">zookeeper </span><span style="color:#FDAEB7;font-style:italic;">192.168.40.128</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">2181</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">replication</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">factor</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">partitions </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">topic dariantest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">Created topic </span><span style="color:#9ECBFF;">&quot;dariantest&quot;</span><span style="color:#E1E4E8;">.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">[root@Darian1 bin]# cd </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">software</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">zookeeper</span><span style="color:#F97583;">-</span><span style="color:#FDAEB7;font-style:italic;">3.4.10</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">bin</span><span style="color:#F97583;">/</span></span>
<span class="line"><span style="color:#E1E4E8;">[root@Darian1 bin]# sh zkCli.sh </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">[zk: localhost:</span><span style="color:#79B8FF;">2181</span><span style="color:#E1E4E8;">(CONNECTED) </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] ls </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">brokers</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">topics</span></span>
<span class="line"><span style="color:#E1E4E8;">[dariantest]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@Darian1 bin]# sh kafka</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">topics.sh </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">create </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">zookeeper </span><span style="color:#B31D28;font-style:italic;">192.168.40.128</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">2181</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">replication</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">factor</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">partitions </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">topic dariantest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">Created topic </span><span style="color:#032F62;">&quot;dariantest&quot;</span><span style="color:#24292E;">.</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">[root@Darian1 bin]# cd </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">software</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">zookeeper</span><span style="color:#D73A49;">-</span><span style="color:#B31D28;font-style:italic;">3.4.10</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">bin</span><span style="color:#D73A49;">/</span></span>
<span class="line"><span style="color:#24292E;">[root@Darian1 bin]# sh zkCli.sh </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">[zk: localhost:</span><span style="color:#005CC5;">2181</span><span style="color:#24292E;">(CONNECTED) </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] ls </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">brokers</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">topics</span></span>
<span class="line"><span style="color:#24292E;">[dariantest]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h5 id="_192-168-40-129" tabindex="-1">192.168.40.129 <a class="header-anchor" href="#_192-168-40-129" aria-label="Permalink to &quot;192.168.40.129&quot;">​</a></h5><div class="language-verilog vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">verilog</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@Darian3 bin]# ls </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">tmp</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">kafka</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">logs</span><span style="color:#F97583;">/</span></span>
<span class="line"><span style="color:#E1E4E8;">...   dariantest</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">  ...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@Darian3 bin]# ls </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">tmp</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">kafka</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">logs</span><span style="color:#D73A49;">/</span></span>
<span class="line"><span style="color:#24292E;">...   dariantest</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">  ...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h5 id="_192-168-40-131" tabindex="-1">192.168.40.131 <a class="header-anchor" href="#_192-168-40-131" aria-label="Permalink to &quot;192.168.40.131&quot;">​</a></h5><h5 id="_192-168-40-131-1" tabindex="-1">192.168.40.131 <a class="header-anchor" href="#_192-168-40-131-1" aria-label="Permalink to &quot;192.168.40.131&quot;">​</a></h5><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@Darian1 bin]# ls </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">tmp</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">kafka</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">logs</span><span style="color:#F97583;">/</span></span>
<span class="line"><span style="color:#E1E4E8;">...  dariantest</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">  ...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@Darian1 bin]# ls </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">tmp</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">kafka</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">logs</span><span style="color:#D73A49;">/</span></span>
<span class="line"><span style="color:#24292E;">...  dariantest</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">  ...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h5 id="_192-168-40-128" tabindex="-1">192.168.40.128 <a class="header-anchor" href="#_192-168-40-128" aria-label="Permalink to &quot;192.168.40.128&quot;">​</a></h5><div class="language-verilog vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">verilog</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@Darian1 bin]# ls </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">tmp</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">kafka</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">logs</span><span style="color:#F97583;">/</span></span>
<span class="line"><span style="color:#E1E4E8;">...  dariantest</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">  ....</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@Darian1 bin]# ls </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">tmp</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">kafka</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">logs</span><span style="color:#D73A49;">/</span></span>
<span class="line"><span style="color:#24292E;">...  dariantest</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">  ....</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h1 id="关于消息分发" tabindex="-1">关于消息分发 <a class="header-anchor" href="#关于消息分发" aria-label="Permalink to &quot;关于消息分发&quot;">​</a></h1><h2 id="kafka-消息分发策略" tabindex="-1">kafka 消息分发策略 <a class="header-anchor" href="#kafka-消息分发策略" aria-label="Permalink to &quot;kafka 消息分发策略&quot;">​</a></h2><p>​ 消息是 kafka 中最基本的数据单元，在 kafka 中，一条消息由 key、value 两部分构成，在发送一条消息时，我们可以指定这个 key，那么 producer 会根据 key 和 partition 机制来判断当前这条消息应该发送并存储到哪个 partition 中。我们可以根据需要进行扩展 producer 的 partition 机制。</p><h2 id="自定义分区策略代码演示" tabindex="-1">自定义分区策略代码演示 <a class="header-anchor" href="#自定义分区策略代码演示" aria-label="Permalink to &quot;自定义分区策略代码演示&quot;">​</a></h2><p>​ 默认的 Kafka 会根据 Key 去计算，我们也可以去扩展自己的分区策略。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/***</span></span>
<span class="line"><span style="color:#6A737D;"> * 自定义分区策略</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyParitition</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Partitioner</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Random random </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Random</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /***</span></span>
<span class="line"><span style="color:#6A737D;">     * 重写发送的策略</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">partition</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">topic</span><span style="color:#E1E4E8;">, Object </span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">keyBytes</span><span style="color:#E1E4E8;">, Object </span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">valueBytes</span><span style="color:#E1E4E8;">, Cluster </span><span style="color:#FFAB70;">cluster</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 根据消息得到具体的分区列表</span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;</span><span style="color:#F97583;">PartitionInfo</span><span style="color:#E1E4E8;">&gt; partitionInfos </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cluster.</span><span style="color:#B392F0;">partitionsForTopic</span><span style="color:#E1E4E8;">(topic);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> partitionNum </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (key </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            partitionNum </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> random.</span><span style="color:#B392F0;">nextInt</span><span style="color:#E1E4E8;">(partitionInfos.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">()); </span><span style="color:#6A737D;">// 随机的分区</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            partitionNum </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">abs</span><span style="color:#E1E4E8;">(key.</span><span style="color:#B392F0;">hashCode</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> partitionInfos.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">()); </span><span style="color:#6A737D;">// Hash 取模运算</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.err.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;[key]:</span><span style="color:#79B8FF;">\\t</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> key </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;[partitionNum]:</span><span style="color:#79B8FF;">\\t</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> partitionNum </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;[value]:</span><span style="color:#79B8FF;">\\t</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> value);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> partitionNum;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">configure</span><span style="color:#E1E4E8;">(Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">map</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/***</span></span>
<span class="line"><span style="color:#6A737D;"> * 自定义分区策略</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyParitition</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Partitioner</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Random random </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Random</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /***</span></span>
<span class="line"><span style="color:#6A737D;">     * 重写发送的策略</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">partition</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">topic</span><span style="color:#24292E;">, Object </span><span style="color:#E36209;">key</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">keyBytes</span><span style="color:#24292E;">, Object </span><span style="color:#E36209;">value</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">valueBytes</span><span style="color:#24292E;">, Cluster </span><span style="color:#E36209;">cluster</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 根据消息得到具体的分区列表</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;</span><span style="color:#D73A49;">PartitionInfo</span><span style="color:#24292E;">&gt; partitionInfos </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cluster.</span><span style="color:#6F42C1;">partitionsForTopic</span><span style="color:#24292E;">(topic);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> partitionNum </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (key </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            partitionNum </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> random.</span><span style="color:#6F42C1;">nextInt</span><span style="color:#24292E;">(partitionInfos.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// 随机的分区</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            partitionNum </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">abs</span><span style="color:#24292E;">(key.</span><span style="color:#6F42C1;">hashCode</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> partitionInfos.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// Hash 取模运算</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        System.err.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;[key]:</span><span style="color:#005CC5;">\\t</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> key </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;[partitionNum]:</span><span style="color:#005CC5;">\\t</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> partitionNum </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;[value]:</span><span style="color:#005CC5;">\\t</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> value);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> partitionNum;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">configure</span><span style="color:#24292E;">(Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">map</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">properties.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(ProducerConfig.PARTITIONER_CLASS_CONFIG, MyParitition.class.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">properties.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(ProducerConfig.PARTITIONER_CLASS_CONFIG, MyParitition.class.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">());</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="消息默认的分发机制" tabindex="-1">消息默认的分发机制 <a class="header-anchor" href="#消息默认的分发机制" aria-label="Permalink to &quot;消息默认的分发机制&quot;">​</a></h2><p>​ 默认情况下，kafka 采用的是 hash 取模的分区算法。如果Key 为 null，则会随机分配一个分区。这个随机是在这个参数 <code>metadata.max.age.ms</code> 的时间范围内随机选择一个。对于这个时间段内，如果 key 为 null，则只会发送到唯一的分区。这个值默认情况下是 10 分钟更新一次。会保存在内存里边。</p><p>​ 关于 Metadata ，这个之前没讲过，简单理解就是 <code>Topic/Partition</code> 和 <code>broker</code> 的映射关系，每一个 topic 的每一个 partition，需要知道对应的 broker 列表是什么，leader是谁、follower 是谁。这些信息都是存储在 Metadata 这个类里面。他的 broker 的 partition 的状态可能发生变化，意味着它要更新他的状态信息。</p><h2 id="消费端如何消费指定的分区" tabindex="-1">消费端如何消费指定的分区 <a class="header-anchor" href="#消费端如何消费指定的分区" aria-label="Permalink to &quot;消费端如何消费指定的分区&quot;">​</a></h2><p>通过下面的代码，就可以消费指定该 topic 下的 0 号分区。其他分区的数据就无法接收。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 消费指定分区的时候，不需要再订阅</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// kafkaConsumer.subscribe(Collections.singleto nList(topic));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 消费指定的分区</span></span>
<span class="line"><span style="color:#E1E4E8;">TopicPartition topicPartition</span><span style="color:#F97583;">=new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TopicPartition</span><span style="color:#E1E4E8;">(topic,</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">kafkaConsumer.</span><span style="color:#B392F0;">assign</span><span style="color:#E1E4E8;">(Arrays.</span><span style="color:#B392F0;">asList</span><span style="color:#E1E4E8;">(topicPartition));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 消费指定分区的时候，不需要再订阅</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// kafkaConsumer.subscribe(Collections.singleto nList(topic));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 消费指定的分区</span></span>
<span class="line"><span style="color:#24292E;">TopicPartition topicPartition</span><span style="color:#D73A49;">=new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TopicPartition</span><span style="color:#24292E;">(topic,</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">kafkaConsumer.</span><span style="color:#6F42C1;">assign</span><span style="color:#24292E;">(Arrays.</span><span style="color:#6F42C1;">asList</span><span style="color:#24292E;">(topicPartition));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>他也是可以消费多个分区的消息的。</p><h2 id="kafka-消息消费原理演示" tabindex="-1">kafka 消息消费原理演示 <a class="header-anchor" href="#kafka-消息消费原理演示" aria-label="Permalink to &quot;kafka 消息消费原理演示&quot;">​</a></h2><p>​ 在实际生产过程中，每个 topic 都会有多个 partitions，多个 partitions 的好处在于，一方面能够对 broker 上的数据进行分片有效减少了消息的容量从而提升 io 性能。另外一方面，为了提高消费端的消费能力，一般会通过多个consumer 去消费同一个 topic ，也就是消费端的负载均衡机制。也就是我们接下来要了解的，在多个 partition 以及多个 consumer 的情况下，消费者是如何消费消息的。在上一节课，我们讲了，kafka 存在 consumer group的概念， 也就是 <code>group.id</code> 一样的 consumer ，这些 consumer 属于一个 consumer group，组内的所有消费者协调在一起来消费订阅主题的所有分区。当然每一个分区只能由同一个消费组内的 consumer 来消费，那么同一个consumer group 里面的 consumer 是怎么去分配该消费哪个分区里的数据的呢？如下图所示，3 个分区，3 个消费者，那么哪个消费者消费哪个分区？</p><p><img src="`+e+'" alt="JavaGuide_Kafka_通信2_消费原理展示.png"></p><p>​ 对于上面这个图来说，这 3 个消费者会分别消费 test 这个topic 的 3 个分区， 也就是每个 consumer 消费一个partition。</p><p>​ 如果有三个分区，有四个消费者，会有一个消费者消费不到。</p><p>​ 如果有三个分区，有两个消费者，会有一个消费者消费两个分区。</p><p>​ 如果消费者比 partition 多的话浪费，所以我们不建议去设置多的消费者。</p><ul><li>我们实际过程使用过程中，consumer 如果比 partition 数量多的话，实际上是浪费的。所以我们不建议去设置比较多的消费者。因为 Kafka 的设计是在一个 partition 上是不允许并发的。</li><li>如果 consumer 比 partition 数量少的话，就会有 consumer 消费多个 partition。如果，我们的消费者的能力本身就比较强的话，我就可以去合理的做一个负载。我一个消费者可以消费两个到三个。</li><li>consumer 最好是 partition 的整数倍。整数倍，意味着我们的消费者能够合理的分发。</li><li>如果我们的 consumer 消费了多个 partition ，那么它是不保证顺序性的。他只能说对一个分区保证顺序性，但是跨分区，它是不保证顺序性。</li></ul><p>增减 consumer 、broker、partition 会导致 Rebalance。重新负载。</p><h2 id="什么是分区分配策略" tabindex="-1">什么是分区分配策略 <a class="header-anchor" href="#什么是分区分配策略" aria-label="Permalink to &quot;什么是分区分配策略&quot;">​</a></h2><p>​ 通过前面的案例演示，我们应该能猜到，同一个 group 中的消费者对于一个 topic 中的多个 partition，存在一定的分区分配策略。</p><p>​ 在 kafka 中，存在两种分区分配策略，一种是 Range ( 默认 ) 、另一种是 RoundRobin（ 轮 询 ）。通过 <code>partition.assignment.strategy</code> 这个参数来设置。</p><h3 id="range-strategy-范围分区" tabindex="-1">Range strategy（范围分区） <a class="header-anchor" href="#range-strategy-范围分区" aria-label="Permalink to &quot;Range strategy（范围分区）&quot;">​</a></h3><p>​ Range 策略是对每个主题而言的，首先对同一个主题里面的分区按照序号进行排序，并对消费者按照字母顺序进行排序。假设我们有 10 个分区，3 个消费者，排完序的分区将会是 0, 1, 2, 3, 4, 5, 6, 7, 8, 9；消费者线程排完序将会是 C1-0 , C2-0 , C3-0 。然后将 partitions 的个数除于消费者线程的总数来决定每个消费者线程消费几个分区。如果除不尽，那么前面几个消费者线程将会多消费一个分区。在我们的例子里面。</p><ul><li><p>我们有 10 个分区，3 个消费者线程， 10 / 3 = 3，而且除不尽，那么消费者线程 C1-0 将会多消费一个分区，所以最后分区分配的结果看起来是这样的：</p><ul><li><blockquote><ul><li>C1-0 将消费 0, 1, 2, 3 分区</li><li>C2-0 将消费 4, 5, 6 分区</li><li>C3-0 将消费 7, 8, 9 分区</li></ul></blockquote></li></ul></li><li><p>假如我们有 11 个分区，那么最后分区分配的结果看起来是这样的：</p><ul><li><blockquote><ul><li>C1-0 将消费 0, 1, 2, 3 分区</li><li>C2-0 将消费 4, 5, 6, 7 分区</li><li>C3-0 将消费 8, 9, 10 分区</li></ul></blockquote></li></ul></li><li><p>假如我们有 2 个主题 ( T1 和 T2 ) ，分别有 10 个分区，那么最后分区分配的结果看起来是这样的：</p><ul><li><blockquote><ul><li>C1-0 将消费 T1 主题的 0, 1, 2, 3 分区以及 T2 主题的 0, 1, 2, 3 分区</li><li>C2-0 将消费 T1 主题的 4, 5, 6 分区以及 T2 主题的 4, 5, 6 分区</li><li>C3-0 将消费 T1 主题的 7, 8, 9 分区以及 T2 主题的 7, 8, 9 分区</li></ul></blockquote></li></ul><p>可以看出，C1-0 消费者线程比其他消费者线程多消费了 2 个分区，这就是 Range strategy 的一个很明显的弊端</p></li></ul><h3 id="roundrobin-strategy-轮询分区" tabindex="-1">RoundRobin strategy（轮询分区） <a class="header-anchor" href="#roundrobin-strategy-轮询分区" aria-label="Permalink to &quot;RoundRobin strategy（轮询分区）&quot;">​</a></h3><p>​ 轮询分区策略是把所有 partition 和所有 consumer 线程都列出来，然后按照 hashcode 进行排序。最后通过轮询算法分配 partition 给消费线程。如果所有 consumer 实例的订阅是相同的，那么 partition 会均匀分布。</p><ul><li><p>在我们的例子里面，假如按照 hashCode 排序完的 topic-partitions 组依次为 T1-5, T1-3, T1-0, T1-8, T1-2, T1-1, T1-4,T1-7, T1-6, T1-9，我们的消费者线程排序为 C1-0, C1-1, C2- 0, C2-1，最后分区分配的结果为：</p><ul><li><blockquote><ul><li>C1-0 将消费 T1-5, T1-2, T1-6 分区；</li><li>C1-1 将消费 T1-3, T1-1, T1-9 分区；</li><li>C2-0 将消费 T1-0, T1-4 分区；</li><li>C2-1 将消费 T1-8, T1-7 分区；</li></ul></blockquote></li></ul></li></ul><h5 id="使用轮询分区策略必须满足两个条件" tabindex="-1">使用轮询分区策略必须满足两个条件 <a class="header-anchor" href="#使用轮询分区策略必须满足两个条件" aria-label="Permalink to &quot;使用轮询分区策略必须满足两个条件&quot;">​</a></h5><ol><li><p>每个主题的消费者实例具有相同数量的流</p></li><li><p>每个消费者订阅的主题必须是相同的</p></li></ol><h2 id="什么时候会触发这个策略呢" tabindex="-1">什么时候会触发这个策略呢？ <a class="header-anchor" href="#什么时候会触发这个策略呢" aria-label="Permalink to &quot;什么时候会触发这个策略呢？&quot;">​</a></h2><p>​ 当出现以下几种情况时，kafka 会进行一次分区分配操作， 也就是 kafka consumer 的 rebalance</p><ol><li><p>同一个 consumer group 内新增了消费者</p></li><li><p>消费者离开当前所属的 consumer group，比如主动停机或者宕机</p></li><li><p>Topic 新增了分区（也就是分区数量发生了变化）</p></li><li><p>消费者主动取消订阅 Topic。</p></li></ol><p>​ kafka consumer 的 rebalance 机制规定了一个 consumer group 下的所有 consumer 如何达成一致来分配订阅 topic 的每个分区。而具体如何执行分区策略，就是前面提到过的两种内置的分区策略。而 kafka 对于分配策略这块，提供了可插拔的实现方式， 也就是说，除了这两种之外，我们还可以创建自己的分配机制。</p><h2 id="谁来执行-rebalance-以及管理-consumer-的-group-呢" tabindex="-1">谁来执行 Rebalance 以及管理 consumer 的 group 呢？ <a class="header-anchor" href="#谁来执行-rebalance-以及管理-consumer-的-group-呢" aria-label="Permalink to &quot;谁来执行 Rebalance 以及管理 consumer 的 group 呢？&quot;">​</a></h2><p>​ Kafka 提供了一个角色：coordinator 。来执行对于 consumer group 的管理，当 consumer group 的第一个 consumer 启动的时候，它会去和 kafka server 确定谁是它们组的 coordinator。之后该 group 内的所有成员都会和该 coordinator 进行协调通信。</p><h3 id="如何确定-coordinator" tabindex="-1">如何确定 coordinator <a class="header-anchor" href="#如何确定-coordinator" aria-label="Permalink to &quot;如何确定 coordinator&quot;">​</a></h3><p>​ consumer group 如何确定自己的 coordinator 是谁呢, 消费者向 kafka 集 群 中 的 任 意 一 个 broker 发 送 一 个GroupCoordinatorRequest 请求，服务端会返回一个负载最 小 的 broker 节 点 的 id ， 并 将 该 broker 设 置 为coordinator</p><h3 id="joingroup-的过程" tabindex="-1">JoinGroup 的过程 <a class="header-anchor" href="#joingroup-的过程" aria-label="Permalink to &quot;JoinGroup 的过程&quot;">​</a></h3><p>​ 在 rebalance 之前，需要保证 coordinator 是已经确定好了的，整个 rebalance 的过程分为两个步骤，Join 和 Sync</p><p>​ join: 表示加入到 consumer group 中，在这一步中，所有的成员都会向 coordinator 发送 joinGroup 的请求。一旦所有成员都发送了 joinGroup 请求，那么 coordinator 会选择一个 consumer 担任 leader 角色，并把组成员信息和订阅信息发送消费者。</p><p><img src="'+t+'" alt="JavaGuide_Kafka_通信2_coordinator原理.png"></p><ul><li><p><code>protocol_metadata</code>: 序列化后的消费者的订阅信息</p></li><li><p><code>leader_id</code>： 消费组中的消费者，coordinator 会选择一个座位 leader，对应的就是 member_id</p></li><li><p><code>member_metadata</code> 对应消费者的订阅信息</p></li><li><p><code>members</code>：consumer group 中全部的消费者的订阅信息 ，只有 leader 才会受到 members 的信息。</p></li><li><p><code>generation_id</code>： 年代信息，类似于之前讲解 zookeeper 的时候的 epoch 是一样的， 对于每一轮 rebalance ，generation_id 都会递增。主要用来保护 consumer group。隔离无效的 offset 提交。也就是上一轮的 consumer 成员无法提交 offset 到新的 consumer group 中。</p></li></ul><blockquote><p>建立好连接以后，会发送心跳。</p></blockquote><h4 id="synchronizing-group-state-阶段" tabindex="-1">Synchronizing Group State 阶段 <a class="header-anchor" href="#synchronizing-group-state-阶段" aria-label="Permalink to &quot;Synchronizing Group State 阶段&quot;">​</a></h4><p>​ 完成分区分配之后，就进入了 Synchronizing Group State 阶段 ，主要逻辑是向 GroupCoordinator 发 送 SyncGroupRequest 请求，并且处理 SyncGroupResponse 响应，简单来说，就是 leader 将消费者对应的 partition 分配方案同步给 consumer group 中的所有 consumer。</p><p><img src="'+r+'" alt="JavaGuide_Kafka_通信2_synchronizing_group_state阶段.png"></p><p>​ 每个消费者都会向 coordinator 发送 syncgroup 请求，不过只有 leader 节点会发送分配方案，其他消费者只是打打酱油而已。当 leader 把方案发给 coordinator 以后，coordinator 会把结果设置到 SyncGroupResponse 中。这样所有成员都知道自己应该消费哪个分区。</p><ul><li>consumer group 的分区分配方案是在客户端执行的！Kafka 将这个权利下放给客户端主要是因为这样做可以有更好的灵活性。</li></ul><blockquote><p>一开始是在分区分配方案是在 zookeeper 执行，后来都是 客户端执行。</p></blockquote><h2 id="如何保存消费端的消费位置" tabindex="-1">如何保存消费端的消费位置 <a class="header-anchor" href="#如何保存消费端的消费位置" aria-label="Permalink to &quot;如何保存消费端的消费位置&quot;">​</a></h2><h3 id="什么是-offset" tabindex="-1">什么是 offset <a class="header-anchor" href="#什么是-offset" aria-label="Permalink to &quot;什么是 offset&quot;">​</a></h3><p>​ 前面在讲解 partition 的时候，提到过 offset， 每个 topic可以划分多个分区（每个 Topic 至少有一个分区），同一 topic 下的不同分区包含的消息是不同的。每个消息在被添加到分区时，都会被分配一个 offset（称之为偏移量），它 是消息在此分区中的唯一编号，kafka 通过 offset 保证消息在分区内的顺序，offset 的顺序不跨分区，即 kafka 只保证在同一个分区内的消息是有序的； 对于应用层的消费来说， 每次消费一个消息并且提交以后，会保存当前消费到的最 近的一个 offset。那么 offset 保存在哪里？</p><p><img src="'+c+`" alt="JavaGuide_Kafka_通信2_offset.png"></p><h3 id="offset-在哪里维护" tabindex="-1">offset 在哪里维护？ <a class="header-anchor" href="#offset-在哪里维护" aria-label="Permalink to &quot;offset 在哪里维护？&quot;">​</a></h3><p>​ 在 kafka 中，提供了一个 consumer_offsets_* 的一个topic ， 把 offset 信 息 写 入 到 这 个 topic 中 。 consumer_offsets——保存了每个 consumer group 某一时刻提交的 offset 信息。 consumer_offsets 默认有50 个分区。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[zk</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> localhost</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">2181</span><span style="color:#E1E4E8;">(CONNECTED) </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">] ls </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">brokers</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">topics</span></span>
<span class="line"><span style="color:#E1E4E8;">[test, __consumer_offsets, dariantest]</span></span>
<span class="line"><span style="color:#E1E4E8;">[zk</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> localhost</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">2181</span><span style="color:#E1E4E8;">(CONNECTED) </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">] ls </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">brokers</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">topics</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">__consumer_offsets</span></span>
<span class="line"><span style="color:#E1E4E8;">[partitions]</span></span>
<span class="line"><span style="color:#E1E4E8;">[zk</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> localhost</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">2181</span><span style="color:#E1E4E8;">(CONNECTED) </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">] ls </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">brokers</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">topics</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">__consumer_offsets</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">partitions</span></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">44</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">45</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">46</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">47</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">48</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">49</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">11</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">13</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">14</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">15</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">17</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">18</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">19</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">9</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">21</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">22</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">23</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">24</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">25</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">26</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">27</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">28</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">29</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">31</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">32</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">33</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">34</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">35</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">36</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">37</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">38</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">39</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">40</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">41</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">42</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">43</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">[zk</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> localhost</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">2181</span><span style="color:#E1E4E8;">(CONNECTED) </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[zk</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> localhost</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">2181</span><span style="color:#24292E;">(CONNECTED) </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">] ls </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">brokers</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">topics</span></span>
<span class="line"><span style="color:#24292E;">[test, __consumer_offsets, dariantest]</span></span>
<span class="line"><span style="color:#24292E;">[zk</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> localhost</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">2181</span><span style="color:#24292E;">(CONNECTED) </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">] ls </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">brokers</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">topics</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">__consumer_offsets</span></span>
<span class="line"><span style="color:#24292E;">[partitions]</span></span>
<span class="line"><span style="color:#24292E;">[zk</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> localhost</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">2181</span><span style="color:#24292E;">(CONNECTED) </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">] ls </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">brokers</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">topics</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">__consumer_offsets</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">partitions</span></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#005CC5;">44</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">45</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">46</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">47</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">48</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">49</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">11</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">12</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">13</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">14</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">15</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">16</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">17</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">18</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">19</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">7</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">8</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">9</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">21</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">22</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">23</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">24</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">25</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">26</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">27</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">28</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">29</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">30</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">31</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">32</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">33</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">34</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">35</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">36</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">37</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">38</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">39</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">40</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">41</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">42</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">43</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">[zk</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> localhost</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">2181</span><span style="color:#24292E;">(CONNECTED) </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@Darian1 </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# clear</span></span>
<span class="line"><span style="color:#E1E4E8;">[root@Darian1 </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# ls </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">tmp</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">kafka</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">logs</span><span style="color:#F97583;">/</span></span>
<span class="line"><span style="color:#E1E4E8;">cleaner</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">offset</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">checkpoint  __consumer_offsets</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">13</span><span style="color:#E1E4E8;">  __consumer_offsets</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">22</span><span style="color:#E1E4E8;">  __consumer_offsets</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">31</span><span style="color:#E1E4E8;">  __consumer_offsets</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">   __consumer_offsets</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">46</span><span style="color:#E1E4E8;">  dariantest</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">                 recovery</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">point</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">offset</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">checkpoint</span></span>
<span class="line"><span style="color:#E1E4E8;">__consumer_offsets</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">       __consumer_offsets</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;">  __consumer_offsets</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">25</span><span style="color:#E1E4E8;">  __consumer_offsets</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">34</span><span style="color:#E1E4E8;">  __consumer_offsets</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">40</span><span style="color:#E1E4E8;">  __consumer_offsets</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">49</span><span style="color:#E1E4E8;">  log</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">start</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">offset</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">checkpoint  replication</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">offset</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">checkpoint</span></span>
<span class="line"><span style="color:#E1E4E8;">__consumer_offsets</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">      __consumer_offsets</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">19</span><span style="color:#E1E4E8;">  __consumer_offsets</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">28</span><span style="color:#E1E4E8;">  __consumer_offsets</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">37</span><span style="color:#E1E4E8;">  __consumer_offsets</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">43</span><span style="color:#E1E4E8;">  __consumer_offsets</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">   meta.properties</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@Darian1 </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# clear</span></span>
<span class="line"><span style="color:#24292E;">[root@Darian1 </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# ls </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">tmp</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">kafka</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">logs</span><span style="color:#D73A49;">/</span></span>
<span class="line"><span style="color:#24292E;">cleaner</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">offset</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">checkpoint  __consumer_offsets</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">13</span><span style="color:#24292E;">  __consumer_offsets</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">22</span><span style="color:#24292E;">  __consumer_offsets</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">31</span><span style="color:#24292E;">  __consumer_offsets</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">   __consumer_offsets</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">46</span><span style="color:#24292E;">  dariantest</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">                 recovery</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">point</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">offset</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">checkpoint</span></span>
<span class="line"><span style="color:#24292E;">__consumer_offsets</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">       __consumer_offsets</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">16</span><span style="color:#24292E;">  __consumer_offsets</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">25</span><span style="color:#24292E;">  __consumer_offsets</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">34</span><span style="color:#24292E;">  __consumer_offsets</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">40</span><span style="color:#24292E;">  __consumer_offsets</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">49</span><span style="color:#24292E;">  log</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">start</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">offset</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">checkpoint  replication</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">offset</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">checkpoint</span></span>
<span class="line"><span style="color:#24292E;">__consumer_offsets</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">      __consumer_offsets</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">19</span><span style="color:#24292E;">  __consumer_offsets</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">28</span><span style="color:#24292E;">  __consumer_offsets</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">37</span><span style="color:#24292E;">  __consumer_offsets</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">43</span><span style="color:#24292E;">  __consumer_offsets</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">7</span><span style="color:#24292E;">   meta.properties</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>​ 根 据 前 面 我 们 演 示 的 案 例 ， 我 们 设 置 了 一 个 KafkaConsumerDemo 的 groupid。首先我们需要找到这个 consumer_group 保存在哪个分区中。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">properties.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(ConsumerConfig.GROUP_ID_CONFIG, </span><span style="color:#9ECBFF;">&quot;KafkaConsumerDemo&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">properties.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(ConsumerConfig.GROUP_ID_CONFIG, </span><span style="color:#032F62;">&quot;KafkaConsumerDemo&quot;</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>计算公式 <ul><li><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">abs</span><span style="color:#E1E4E8;">(“groupid”.</span><span style="color:#B392F0;">hashCode</span><span style="color:#E1E4E8;">())</span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">groupMetadataTopi cPartitionCount ;</span></span>
<span class="line"><span style="color:#6A737D;">// Math.abs(&quot;consumerDemo&quot;.hashCode % 50 );</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">abs</span><span style="color:#24292E;">(“groupid”.</span><span style="color:#6F42C1;">hashCode</span><span style="color:#24292E;">())</span><span style="color:#D73A49;">%</span><span style="color:#24292E;">groupMetadataTopi cPartitionCount ;</span></span>
<span class="line"><span style="color:#6A737D;">// Math.abs(&quot;consumerDemo&quot;.hashCode % 50 );</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>由于默认情况下 <code>groupMetadataTopicPartitionCount</code> 有 50 个分区，计算得到的结果为:35, 意味着当前的 <code>consumer_group</code> 的位移信息保存在 <code>consumer_offsets</code> 的第 35 个分区</p></li><li><p>执行如下命令，可以查看当前 <code>consumer_goup</code> 中的 offset 位移信息</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">sh kafka</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">simple</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">consumer</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">shell.sh  </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">topic  consumer_offsets </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">partition  </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">broker</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">list </span><span style="color:#FDAEB7;font-style:italic;">192.168.40.128</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">9092</span><span style="color:#E1E4E8;">,</span><span style="color:#FDAEB7;font-style:italic;">192.168.40.129</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">9092</span><span style="color:#E1E4E8;">,</span><span style="color:#FDAEB7;font-style:italic;">192.168.40.131</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">9092</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">formatter </span><span style="color:#9ECBFF;">&quot;kafka.coordinator.group.GroupMetadataManager</span><span style="color:#FDAEB7;font-style:italic;">\\$</span><span style="color:#9ECBFF;">OffsetsMessageFormatter&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">sh kafka</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">simple</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">consumer</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">shell.sh  </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">topic  consumer_offsets </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">partition  </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">      </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">broker</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">list </span><span style="color:#B31D28;font-style:italic;">192.168.40.128</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">9092</span><span style="color:#24292E;">,</span><span style="color:#B31D28;font-style:italic;">192.168.40.129</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">9092</span><span style="color:#24292E;">,</span><span style="color:#B31D28;font-style:italic;">192.168.40.131</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">9092</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">formatter </span><span style="color:#032F62;">&quot;kafka.coordinator.group.GroupMetadataManager</span><span style="color:#B31D28;font-style:italic;">\\$</span><span style="color:#032F62;">OffsetsMessageFormatter&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@Darian3 bin]# sh kafka</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">consumer</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">groups.sh </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">bootstrap</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">server </span><span style="color:#FDAEB7;font-style:italic;">192.168.40.128</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">9092</span><span style="color:#E1E4E8;">,</span><span style="color:#FDAEB7;font-style:italic;">192.168.40.129</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">9092</span><span style="color:#E1E4E8;">,</span><span style="color:#FDAEB7;font-style:italic;">192.168.40.131</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">9092</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">describe </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">group KafkaConsumerDemo</span></span>
<span class="line"><span style="color:#E1E4E8;">Consumer group </span><span style="color:#9ECBFF;">&#39;KafkaConsumerDemo&#39;</span><span style="color:#E1E4E8;"> has no active members.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">TOPIC           PARTITION  CURRENT</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">OFFSET  LOG</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">END</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">OFFSET  LAG             CONSUMER</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">ID     HOST            CLIENT</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">ID</span></span>
<span class="line"><span style="color:#E1E4E8;">test            </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">115</span><span style="color:#E1E4E8;">             </span><span style="color:#79B8FF;">115</span><span style="color:#E1E4E8;">             </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">               </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">               </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">               </span><span style="color:#F97583;">-</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@Darian3 bin]# sh kafka</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">consumer</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">groups.sh </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">bootstrap</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">server </span><span style="color:#B31D28;font-style:italic;">192.168.40.128</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">9092</span><span style="color:#24292E;">,</span><span style="color:#B31D28;font-style:italic;">192.168.40.129</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">9092</span><span style="color:#24292E;">,</span><span style="color:#B31D28;font-style:italic;">192.168.40.131</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">9092</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">describe </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">group KafkaConsumerDemo</span></span>
<span class="line"><span style="color:#24292E;">Consumer group </span><span style="color:#032F62;">&#39;KafkaConsumerDemo&#39;</span><span style="color:#24292E;"> has no active members.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">TOPIC           PARTITION  CURRENT</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">OFFSET  LOG</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">END</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">OFFSET  LAG             CONSUMER</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">ID     HOST            CLIENT</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">ID</span></span>
<span class="line"><span style="color:#24292E;">test            </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">          </span><span style="color:#005CC5;">115</span><span style="color:#24292E;">             </span><span style="color:#005CC5;">115</span><span style="color:#24292E;">             </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">               </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">               </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">               </span><span style="color:#D73A49;">-</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@Darian3 bin]# sh kafka</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">run</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">class.sh kafka.tools.GetOffsetShell </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">broker</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">list </span><span style="color:#9ECBFF;">&#39;192.168.40.128:9092,192.168.40.129:9092,192.168.40.131:9092&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">topic </span><span style="color:#9ECBFF;">&#39;test&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">time </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">test:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">115</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@Darian3 bin]# sh kafka</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">run</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">class.sh kafka.tools.GetOffsetShell </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">broker</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">list </span><span style="color:#032F62;">&#39;192.168.40.128:9092,192.168.40.129:9092,192.168.40.131:9092&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">topic </span><span style="color:#032F62;">&#39;test&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">time </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">test:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">115</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>从输出结果中，我们就可以看到 test 这个 topic 的 offset的位移日志。</p></li></ul></li></ul><table><thead><tr><th>192.168.40.129</th><th>192.168.40.130</th><th>192.168.40.131</th></tr></thead><tbody><tr><td><img src="`+i+'" alt="JavaGuide_Kafka_通信2_集群1的日志.png"></td><td><img src="'+y+'" alt="JavaGuide_Kafka_通信2_集群2的日志.png"></td><td><img src="'+E+'" alt="JavaGuide_Kafka_通信2_集群3的日志.png"></td></tr></tbody></table><h1 id="消息的存储" tabindex="-1">消息的存储 <a class="header-anchor" href="#消息的存储" aria-label="Permalink to &quot;消息的存储&quot;">​</a></h1><h3 id="消息的保存路径" tabindex="-1">消息的保存路径 <a class="header-anchor" href="#消息的保存路径" aria-label="Permalink to &quot;消息的保存路径&quot;">​</a></h3><p>​ 消息发送端发送消息到 broker 上以后，消息是如何持久化的呢？那么接下来去分析下消息的存储。</p><p>​ 首先我们需要了解的是，kafka 是使用日志文件的方式来保存生产者和发送者的消息，每条消息都有一个 offset 值来表示它在分区中的偏移量。Kafka 中存储的一般都是海量的消息数据，为了避免日志文件过大，Log 并不是直接对应在一个磁盘上的日志文件，而是对应磁盘上的一个目录， 这个目录的命名规则是&lt;topic_name&gt;_&lt;partition_id&gt;</p><p>​ 比如创建一个名为 firstTopic 的 topic，其中有 3 个 partition，那么在 kafka 的数据目录（/tmp/kafka-log）中就有 3 个目录，firstTopic-0~3</p><h3 id="多个分区在集群中的分配" tabindex="-1">多个分区在集群中的分配 <a class="header-anchor" href="#多个分区在集群中的分配" aria-label="Permalink to &quot;多个分区在集群中的分配&quot;">​</a></h3><p>如果我们对于一个 topic，在集群中创建多个 partition，那么 partition 是如何分布的呢？</p><ol><li><p>将所有 N Broker 和待分配的 i 个 Partition 排序</p></li><li><p>将第 i 个 Partition 分配到第(i mod n)个 Broker 上</p></li></ol><p><img src="'+u+'" alt="JavaGuide_Kafka_通信2_多个分区在Broker中的分配.png"></p><p>​ 了解到这里的时候，大家再结合前面讲的消息分发策略， 就应该能明白消息发送到 broker 上，消息会保存到哪个分区中，并且消费端应该消费哪些分区的数据了。</p><h3 id="消息写入的性能" tabindex="-1">消息写入的性能 <a class="header-anchor" href="#消息写入的性能" aria-label="Permalink to &quot;消息写入的性能&quot;">​</a></h3><p>​ 我们现在大部分企业仍然用的是机械结构的磁盘，如果把消息以随机的方式写入到磁盘，那么磁盘首先要做的就是寻址，也就是定位到数据所在的物理地址，在磁盘上就要找到对应的柱面、磁头以及对应的扇区；这个过程相对内存来说会消耗大量时间，为了规避随机读写带来的时间消耗，kafka 采用顺序写的方式存储数据。即使是这样，但是频繁的 I/O 操作仍然会造成磁盘的性能瓶颈，所以 kafka 还有一个性能策略。</p><h4 id="零拷贝" tabindex="-1">零拷贝 <a class="header-anchor" href="#零拷贝" aria-label="Permalink to &quot;零拷贝&quot;">​</a></h4><p>​ 消息从发送到落地保存，broker 维护的消息日志本身就是文件目录，每个文件都是二进制保存，生产者和消费者使用相同的格式来处理。在消费者获取消息时，服务器先从硬盘读取数据到内存，然后把内存中的数据原封不动的通过 socket 发送给消费者。虽然这个操作描述起来很简单， 但实际上经历了很多步骤。</p><p><img src="'+d+'" alt="JavaGuide_Kafka_通信2_零拷贝.png"></p><p>▪ 操作系统将数据从磁盘读入到内核空间的页缓存</p><p>▪ 应用程序将数据从内核空间读入到用户空间缓存中</p><p>▪ 应用程序将数据写回到内核空间到 socket 缓存中</p><p>▪ 操作系统将数据从 socket 缓冲区复制到网卡缓冲区，以便把数据经网络发出</p><p>​ 这个过程涉及 4 次上下文切换以及 4 次数据复制，并且有两次复制操作是由 CPU 完成。但是这个过程中，数据完全没有进行变化，仅仅是从磁盘复制到网卡缓冲区。</p><p>​ 通过“零拷贝”技术，可以去掉这些没必要的数据复制操作，同时也会减少上下文切换次数。现代的 unix 操作系统提供一个优化的代码路径，用于将数据从页缓存传输到 socket； 在 Linux 中，是通过 sendfile 系统调用来完成的。Java 提供了访问这个系统调用的方法：<code>FileChannel.transferTo API</code> 。</p><p><img src="'+F+'" alt="JavaGuide_Kafka_通信2_零拷贝_内核空间_用户空间.png"></p><p>使用 sendfile，只需要一次拷贝就行，允许操作系统将数据直接从页缓存发送到网络上。所以在这个优化的路径中， 只有最后一步将数据拷贝到网卡缓存中是需要的。</p><p><a href="https://www.cnblogs.com/dadonggg/p/8205302.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/dadonggg/p/8205302.html</a> kafka 管理工具。</p>',115),f=[b];function h(C,k,_,g,D,v){return a(),n("div",null,f)}const q=s(m,[["render",h]]);export{B as __pageData,q as default};
