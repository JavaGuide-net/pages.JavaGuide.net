import{_ as a,o as n,h as e,Q as s}from"./chunks/framework.da611722.js";const b=JSON.parse('{"title":"Spring经典面试答疑 | JavaGuide","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://JavaGuide.net/百万架构师/Spring 源码分析/Spring经典面试答疑.html"}],["meta",{"name":"keywords","content":"Spring经典面试答疑 , JavaGuide , JavaGuide官网, Java面试指南, Java基础, 多线程, JVM, 虚拟机, 数据库, MySQL, Spring, Redis, MyBatis, 系统设计, 分布式, RPC, 高可用, 高并发"}],["meta",{"name":"og:url","content":"https://JavaGuide.net"}],["meta",{"name":"og:type","content":"website"}],["meta",{"name":"og:image","content":"https://JavaGuide.net/og.png"}],["meta",{"name":"og:title","content":"Spring经典面试答疑 | JavaGuide | Java面试指南 | JavaGuide官网"}],["meta",{"name":"og:description","content":"Spring经典面试答疑 | JavaGuide | Java面试指南 | JavaGuide官网 | 「JavaGuide.net」一份涵盖大部分 Java 程序员所需要掌握的核心知识。准备 Java 面试，首选 JavaGuide.net ！"}],["meta",{"name":"twitter:site","content":"https://JavaGuide.net"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:creator","content":"nogeek.cn"}],["meta",{"name":"twitter:title","content":"Spring经典面试答疑 | JavaGuide | Java面试指南 | JavaGuide官网"}],["meta",{"name":"twitter:description","content":"Spring经典面试答疑 | JavaGuide | Java面试指南 | JavaGuide官网 | 「JavaGuide.net」一份涵盖大部分 Java 程序员所需要掌握的核心知识。准备 Java 面试，首选 JavaGuide.net ！"}],["meta",{"name":"twitter:image","content":"https://JavaGuide.net/og.png"}],["meta",{"name":"sogou_site_verification","content":"fcAkazTXFd"}],["meta",{"name":"baidu-site-verification","content":"codeva-MXEPYsXKGk"}],["meta",{"name":"msvalidate.01","content":"9F2D57CFC59E8031212A166878638B15"}]]},"headers":[],"relativePath":"百万架构师/Spring 源码分析/Spring经典面试答疑.md","filePath":"百万架构师/Spring 源码分析/Spring经典面试答疑.md","lastUpdated":1741277271000}'),t={name:"百万架构师/Spring 源码分析/Spring经典面试答疑.md"},o=s(`<h1 id="spring面试解答" tabindex="-1">Spring面试解答 <a class="header-anchor" href="#spring面试解答" aria-label="Permalink to &quot;Spring面试解答&quot;">​</a></h1><h2 id="上半节-面试中需要注意的细节" tabindex="-1">上半节：面试中需要注意的细节 <a class="header-anchor" href="#上半节-面试中需要注意的细节" aria-label="Permalink to &quot;上半节：面试中需要注意的细节&quot;">​</a></h2><ol><li>动脑子，面试是一种交流</li><li>面试的时候，要用心去感受当时面试场景</li><li>了解自己，自己的长处、自己的短处 （巧妙地扬长避短）</li></ol><h3 id="了解" tabindex="-1">了解 <a class="header-anchor" href="#了解" aria-label="Permalink to &quot;了解&quot;">​</a></h3><h4 id="_1-公司的业务场景" tabindex="-1">1. 公司的业务场景 <a class="header-anchor" href="#_1-公司的业务场景" aria-label="Permalink to &quot;1. 公司的业务场景&quot;">​</a></h4><h4 id="_2-你是去面试什么岗位的" tabindex="-1">2. 你是去面试什么岗位的？ <a class="header-anchor" href="#_2-你是去面试什么岗位的" aria-label="Permalink to &quot;2. 你是去面试什么岗位的？&quot;">​</a></h4><p>Java高级工程师 实际工作经验是1年（如实填写）</p><h4 id="_1、请描述spring-ioc的工作原理" tabindex="-1">1、请描述Spring IOC的工作原理 <a class="header-anchor" href="#_1、请描述spring-ioc的工作原理" aria-label="Permalink to &quot;1、请描述Spring IOC的工作原理&quot;">​</a></h4><p>答：定位 加载 注册 <strong><code>BeanFactory</code></strong> <strong><code>BeanDefintion</code></strong> ...</p><h3 id="_1-3年-1" tabindex="-1">1-3年 1+ <a class="header-anchor" href="#_1-3年-1" aria-label="Permalink to &quot;1-3年 1+&quot;">​</a></h3><p><strong>ApplicationContext</strong> 主容器，存储了所有 <code>beans</code> 中的 <code>&lt;bean&gt;</code> 对应的对象<code>&lt;bean id=&quot;&quot; class=&quot;&quot;&gt;</code> 不能重复</p><h3 id="_3-5年-3" tabindex="-1">3-5年 3+ <a class="header-anchor" href="#_3-5年-3" aria-label="Permalink to &quot;3-5年 3+&quot;">​</a></h3><p><strong>ApplicationContext</strong> Aware 接口 <strong>IOC</strong> 跟 <strong>DI</strong> 对应关系</p><p><strong>IOC</strong> 配置 构造器、依赖注入去赋值、 使用了工厂模式</p><p>构造方法注入、getter setter Map List Array Properties</p><p>认知面会更加广泛</p><p><code>Spring IOC</code> 设计，给万能胶创造了可能</p><h3 id="_5年以上-5-架构师-高级工程师" tabindex="-1">5年以上 5+ 架构师/高级工程师 <a class="header-anchor" href="#_5年以上-5-架构师-高级工程师" aria-label="Permalink to &quot;5年以上 5+      架构师/高级工程师&quot;">​</a></h3><p><strong>ApplicationContext</strong> <strong>BeanFactory</strong></p><p><strong>注解</strong> 和 <strong>XML</strong> 的区别</p><p>底层的原理 （ 面试时向面试官征求意见，也是对面试官的一种尊重 ）</p><h3 id="简历描述要符合自身的气质" tabindex="-1">简历描述要符合自身的气质 <a class="header-anchor" href="#简历描述要符合自身的气质" aria-label="Permalink to &quot;简历描述要符合自身的气质&quot;">​</a></h3><ol><li>简历用词要精准</li><li>应用场景</li></ol><h3 id="扬长避短-少小离家老大回-乡音未改鬓毛衰" tabindex="-1">扬长避短（少小离家老大回，乡音未改鬓毛衰） <a class="header-anchor" href="#扬长避短-少小离家老大回-乡音未改鬓毛衰" aria-label="Permalink to &quot;扬长避短（少小离家老大回，乡音未改鬓毛衰）&quot;">​</a></h3><p>如果面试官问到一个自己不懂的问题的时候</p><p>这个技术目前没有深入地研究过，但是，我拥有比较强的 <strong>自学能力</strong>。懂不懂，其实只是时间问题。</p><h2 id="下半节-面试题" tabindex="-1">下半节：面试题 <a class="header-anchor" href="#下半节-面试题" aria-label="Permalink to &quot;下半节：面试题&quot;">​</a></h2><h3 id="_1、作用域的问题" tabindex="-1">1、作用域的问题 <a class="header-anchor" href="#_1、作用域的问题" aria-label="Permalink to &quot;1、作用域的问题&quot;">​</a></h3><ul><li>singleton</li><li>prototype 每次取的对象，注入一个时间戳</li><li>request</li><li>session</li><li>...</li></ul><h3 id="_2、以您的经验来看-为什么要选择spring框架-而不选择其他框架呢" tabindex="-1">2、以您的经验来看，为什么要选择Spring框架，而不选择其他框架呢？ <a class="header-anchor" href="#_2、以您的经验来看-为什么要选择spring框架-而不选择其他框架呢" aria-label="Permalink to &quot;2、以您的经验来看，为什么要选择Spring框架，而不选择其他框架呢？&quot;">​</a></h3><p>1、<strong>Spring</strong> 易于扩展</p><p>2、基于 <strong>Bean</strong> 来实现的（Object），也是基于 <strong>Bean</strong> 来扩展的</p><p>3、Java业界万能胶（松耦合（开发时），高聚合（运行时））</p><p>// IOC / DI / AOP</p><h3 id="_3、spring框架的哪些地方是你不喜欢的" tabindex="-1">3、Spring框架的哪些地方是你不喜欢的？ <a class="header-anchor" href="#_3、spring框架的哪些地方是你不喜欢的" aria-label="Permalink to &quot;3、Spring框架的哪些地方是你不喜欢的？&quot;">​</a></h3><p>之前的 <strong>Spring</strong> 实际上是不支持分布式的</p><p>我很不喜欢它的 <strong>XML</strong> 的配置，后来才有了 <code>@Annotaion</code></p><p><strong>Tom</strong> 老师是 <strong>Spring</strong> 忠粉，想我所想</p><p>“利用 <strong>Spring</strong> 编码，零配置”：会导致后面学习的人，对底层的原理不了解，给深入学习带来一些困难</p><p><strong>Spring Cloud</strong>、<strong>Spring Boot</strong></p><h3 id="_4、动态代理-cglib-与-jdk-、优缺点、性能对比、如何选择" tabindex="-1">4、动态代理（CGLib 与 JDK）、优缺点、性能对比、如何选择 <a class="header-anchor" href="#_4、动态代理-cglib-与-jdk-、优缺点、性能对比、如何选择" aria-label="Permalink to &quot;4、动态代理（CGLib 与 JDK）、优缺点、性能对比、如何选择&quot;">​</a></h3><ul><li>CGLib asm (自动生成一个类，去继承原来类) 更优的字节码重组方案</li><li>JDK 内置（必须要实现接口，因为生成代理对象之后要强制转型）</li></ul><h3 id="_5、spring中循环注入是什么意思-可不可以解决-如何解决" tabindex="-1">5、Spring中循环注入是什么意思，可不可以解决，如何解决； <a class="header-anchor" href="#_5、spring中循环注入是什么意思-可不可以解决-如何解决" aria-label="Permalink to &quot;5、Spring中循环注入是什么意思，可不可以解决，如何解决；&quot;">​</a></h3><ul><li>利用递归 + 缓存</li></ul><h3 id="_6、spring-容器在启动和启动完成的时候-是否可以通过注册监听器监听到这个时刻。" tabindex="-1">6、spring 容器在启动和启动完成的时候 是否可以通过注册监听器监听到这个时刻。 <a class="header-anchor" href="#_6、spring-容器在启动和启动完成的时候-是否可以通过注册监听器监听到这个时刻。" aria-label="Permalink to &quot;6、spring 容器在启动和启动完成的时候 是否可以通过注册监听器监听到这个时刻。&quot;">​</a></h3><ul><li>可不可以通过监听器注册到 <strong>listen</strong> 中，然后在启动和容器启动完成的时候做一个服务性的操作 <strong>可以的</strong></li></ul><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SystemLoaderListener</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ContextLoaderListener</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Logger log </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Logger.</span><span style="color:#B392F0;">getLogger</span><span style="color:#E1E4E8;">(SystemLoaderListener.class);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">contextInitialized</span><span style="color:#E1E4E8;">(ServletContextEvent </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">contextInitialized</span><span style="color:#E1E4E8;">(e);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SystemLoaderListener</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ContextLoaderListener</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Logger log </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Logger.</span><span style="color:#6F42C1;">getLogger</span><span style="color:#24292E;">(SystemLoaderListener.class);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">contextInitialized</span><span style="color:#24292E;">(ServletContextEvent </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">contextInitialized</span><span style="color:#24292E;">(e);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>​</p><h3 id="_7、spring怎么保证-bean-不被回收" tabindex="-1">7、spring怎么保证 bean 不被回收？ <a class="header-anchor" href="#_7、spring怎么保证-bean-不被回收" aria-label="Permalink to &quot;7、spring怎么保证 bean 不被回收？&quot;">​</a></h3><ul><li><strong>IOC</strong> 容器的 <strong>Map</strong> 中，会一直持有对象的引用</li><li><strong>Map</strong> 又是单例的， <strong>Map</strong> 本身不会被回收</li></ul><h3 id="_8、不同数据源的事务如何处理" tabindex="-1">8、不同数据源的事务如何处理 <a class="header-anchor" href="#_8、不同数据源的事务如何处理" aria-label="Permalink to &quot;8、不同数据源的事务如何处理&quot;">​</a></h3><p>原理：在 <strong>Spring</strong> 中，事务是不支持跨数据源的。换句话说，一个事务不能同时操作两个数据库。</p><p>用大腿想一下： <strong>DataSouce</strong> 是 <strong>Connection</strong> ，当创建语句集的时候开启事务</p><p>解决：使用中间件，做一些消息同步，利用分布式锁去实现分布式事务</p><h3 id="_9、spring-如何保证-controller-并发的安全" tabindex="-1">9、Spring 如何保证 Controller 并发的安全？ <a class="header-anchor" href="#_9、spring-如何保证-controller-并发的安全" aria-label="Permalink to &quot;9、Spring 如何保证 Controller 并发的安全？&quot;">​</a></h3><p><strong>Spring5</strong> 的新特性就开始考虑这个问题了，如果对并发有要求，推荐用 <strong>Spring Boot</strong></p><h3 id="_10、系统架构师和高级工程师的区别" tabindex="-1">10、系统架构师和高级工程师的区别？ <a class="header-anchor" href="#_10、系统架构师和高级工程师的区别" aria-label="Permalink to &quot;10、系统架构师和高级工程师的区别？&quot;">​</a></h3><h6 id="系统架构师" tabindex="-1">系统架构师： <a class="header-anchor" href="#系统架构师" aria-label="Permalink to &quot;系统架构师：&quot;">​</a></h6><ul><li>具有全局的观念</li><li>绝大多数时间不是在帮自己解决问题，而是帮别人解决问题</li><li>必须具备预见能力</li><li>架构的技术能力、视野范围、解决问题的能力过硬</li></ul><h6 id="高级工程师-高工" tabindex="-1">高级工程师（高工）： <a class="header-anchor" href="#高级工程师-高工" aria-label="Permalink to &quot;高级工程师（高工）：&quot;">​</a></h6><ul><li>技高一筹（常用技术运用非常熟练）</li><li>基本的代码封装、提炼</li><li>API文档的阅读能力</li><li>自学能力</li></ul><p>​ ​</p><h3 id="关于正则的问题" tabindex="-1">关于正则的问题 <a class="header-anchor" href="#关于正则的问题" aria-label="Permalink to &quot;关于正则的问题&quot;">​</a></h3><p>老师为什么要把 <code>*</code> 替换成 <code> .*</code></p><p><code>.</code> 代表的是任意字符</p><p><code>*</code> 重复任意次数</p><p><code>.*</code> 任意字符重复任意次数</p>`,67),r=[o];function l(i,p,c,d,g,h){return n(),e("div",null,r)}const m=a(t,[["render",l]]);export{b as __pageData,m as default};
