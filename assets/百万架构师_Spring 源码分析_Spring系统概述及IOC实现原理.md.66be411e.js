import{_ as s,o as n,h as a,Q as l}from"./chunks/framework.da611722.js";const p="/assets/Spring手画架构图.73eed4aa.png",e="/assets/Spring官方架构图.3bf75e71.jpg",o="/assets/Spring各个Model的关系图.267f472a.png",t="/assets/BeanFactory.f8ddb0be.png",r="/assets/ClassPathXmlApplicationContext.62f43675.png",c="/assets/RootBeanDefinition.9284c5aa.png",i="/assets/XmlBeanDefinitionReader.0d50ef6d.png",E="/assets/ClassPathXmlApplicationContext-1539753584118.32843620.png",f=JSON.parse('{"title":"Spring系统概述及IOC实现原理 | JavaGuide","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://JavaGuide.net/百万架构师/Spring 源码分析/Spring系统概述及IOC实现原理.html"}],["meta",{"name":"keywords","content":"Spring系统概述及IOC实现原理 , JavaGuide , JavaGuide官网, Java面试指南, Java基础, 多线程, JVM, 虚拟机, 数据库, MySQL, Spring, Redis, MyBatis, 系统设计, 分布式, RPC, 高可用, 高并发"}],["meta",{"name":"og:url","content":"https://JavaGuide.net"}],["meta",{"name":"og:type","content":"website"}],["meta",{"name":"og:image","content":"https://JavaGuide.net/JavaGuide-og.png"}],["meta",{"name":"og:title","content":"Spring系统概述及IOC实现原理 | JavaGuide | Java面试指南 | JavaGuide官网"}],["meta",{"name":"og:description","content":"Spring系统概述及IOC实现原理 | JavaGuide | Java面试指南 | JavaGuide官网 | 「JavaGuide.net」一份涵盖大部分 Java 程序员所需要掌握的核心知识。准备 Java 面试，首选 JavaGuide.net ！"}],["meta",{"name":"twitter:site","content":"https://JavaGuide.net"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:creator","content":"nogeek.cn"}],["meta",{"name":"twitter:title","content":"Spring系统概述及IOC实现原理 | JavaGuide | Java面试指南 | JavaGuide官网"}],["meta",{"name":"twitter:description","content":"Spring系统概述及IOC实现原理 | JavaGuide | Java面试指南 | JavaGuide官网 | 「JavaGuide.net」一份涵盖大部分 Java 程序员所需要掌握的核心知识。准备 Java 面试，首选 JavaGuide.net ！"}],["meta",{"name":"twitter:image","content":"https://JavaGuide.net/JavaGuide-og.png"}],["meta",{"name":"sogou_site_verification","content":"fcAkazTXFd"}],["meta",{"name":"baidu-site-verification","content":"codeva-MXEPYsXKGk"}],["meta",{"name":"msvalidate.01","content":"9F2D57CFC59E8031212A166878638B15"}]]},"headers":[],"relativePath":"百万架构师/Spring 源码分析/Spring系统概述及IOC实现原理.md","filePath":"百万架构师/Spring 源码分析/Spring系统概述及IOC实现原理.md","lastUpdated":1741277271000}'),y={name:"百万架构师/Spring 源码分析/Spring系统概述及IOC实现原理.md"},b=l('<h3 id="看不懂很正常" tabindex="-1">看不懂很正常 <a class="header-anchor" href="#看不懂很正常" aria-label="Permalink to &quot;看不懂很正常&quot;">​</a></h3><h3 id="让面试官仰望你。" tabindex="-1">让面试官仰望你。 <a class="header-anchor" href="#让面试官仰望你。" aria-label="Permalink to &quot;让面试官仰望你。&quot;">​</a></h3><h3 id="spring-是围绕-bean-来展开-bop-的开发思想。" tabindex="-1">Spring 是围绕 Bean 来展开， BOP 的开发思想。 <a class="header-anchor" href="#spring-是围绕-bean-来展开-bop-的开发思想。" aria-label="Permalink to &quot;Spring 是围绕 Bean 来展开， BOP 的开发思想。&quot;">​</a></h3><h2 id="spring-的四个策略" tabindex="-1">Spring 的四个策略： <a class="header-anchor" href="#spring-的四个策略" aria-label="Permalink to &quot;Spring 的四个策略：&quot;">​</a></h2><h3 id="_1-基于-pojo-的轻量和最小侵入性编程" tabindex="-1">1. 基于 POJO 的轻量和最小侵入性编程 <a class="header-anchor" href="#_1-基于-pojo-的轻量和最小侵入性编程" aria-label="Permalink to &quot;1. 基于 POJO 的轻量和最小侵入性编程&quot;">​</a></h3><h3 id="_2-通过依赖注入和面向接口松耦合" tabindex="-1">2. 通过依赖注入和面向接口松耦合 <a class="header-anchor" href="#_2-通过依赖注入和面向接口松耦合" aria-label="Permalink to &quot;2. 通过依赖注入和面向接口松耦合&quot;">​</a></h3><h3 id="_3-基于切面和惯性进行声明式编程" tabindex="-1">3. 基于切面和惯性进行声明式编程 <a class="header-anchor" href="#_3-基于切面和惯性进行声明式编程" aria-label="Permalink to &quot;3. 基于切面和惯性进行声明式编程&quot;">​</a></h3><h3 id="_4-通过切面和模板减少样板式代码。" tabindex="-1">4. 通过切面和模板减少样板式代码。 <a class="header-anchor" href="#_4-通过切面和模板减少样板式代码。" aria-label="Permalink to &quot;4. 通过切面和模板减少样板式代码。&quot;">​</a></h3><h2 id="手段" tabindex="-1">手段： <a class="header-anchor" href="#手段" aria-label="Permalink to &quot;手段：&quot;">​</a></h2><ul><li>面向 Bean</li><li>依赖注入</li><li>面向切面</li></ul><h3 id="思想" tabindex="-1">思想 <a class="header-anchor" href="#思想" aria-label="Permalink to &quot;思想&quot;">​</a></h3><ul><li>AOP</li><li>OOP</li><li>BOP</li><li>IOC</li><li>DI</li></ul><h3 id="spring-中什么时候用单例模式-什么时候用原型模式" tabindex="-1">Spring 中什么时候用单例模式，什么时候用原型模式 <a class="header-anchor" href="#spring-中什么时候用单例模式-什么时候用原型模式" aria-label="Permalink to &quot;Spring 中什么时候用单例模式，什么时候用原型模式&quot;">​</a></h3><p>​ 对于 Spring 来说，他并不干预你对象本身的属性，他也不关心你这个对象是什么东西。他只关心它的管理方式。</p><h3 id="spring-中的生命周期" tabindex="-1">Spring 中的生命周期？ <a class="header-anchor" href="#spring-中的生命周期" aria-label="Permalink to &quot;Spring 中的生命周期？&quot;">​</a></h3><h3 id="spring-中的-bean-是不是线程安全的呢" tabindex="-1">Spring 中的 Bean 是不是线程安全的呢？ <a class="header-anchor" href="#spring-中的-bean-是不是线程安全的呢" aria-label="Permalink to &quot;Spring 中的 Bean 是不是线程安全的呢？&quot;">​</a></h3><p>​ 在 <strong>Spring</strong> 中，<strong>Bean</strong> 是不是线程安全，也跟 <strong>Spring</strong> 无关，<strong>Spring</strong> 只是一个存放对象实例的容器，以及管理和维护对象与对象之间的关系。</p><p>​ 单例还是原型，线程安全不安全是由你本身的<strong>业务场景</strong>来决定的。</p><ul><li>全局唯一用单例，</li><li>每次都会有一个新的对象，用原型模式</li></ul><h3 id="aop" tabindex="-1">AOP <a class="header-anchor" href="#aop" aria-label="Permalink to &quot;AOP&quot;">​</a></h3><ul><li><strong>Authentication</strong> 权限认证</li><li><strong>Logging</strong> 日志</li><li><strong>Transctions Manager</strong> 事务</li><li><strong>Lazy Loading</strong> 懒加载</li><li><strong>Context Process</strong>上下文处理</li><li><strong>Error Handler</strong> 错误跟踪（异常捕获机制）</li><li><strong>Cache</strong> 缓存</li></ul><h3 id="spring-5-架构" tabindex="-1">Spring 5 架构 <a class="header-anchor" href="#spring-5-架构" aria-label="Permalink to &quot;Spring 5 架构&quot;">​</a></h3><h4 id="spring手画架构图" tabindex="-1">Spring手画架构图 <a class="header-anchor" href="#spring手画架构图" aria-label="Permalink to &quot;Spring手画架构图&quot;">​</a></h4><p><img src="'+p+'" alt="Spring手画架构图"></p><h5 id="spring官方架构图-jpg" tabindex="-1">Spring官方架构图.jpg <a class="header-anchor" href="#spring官方架构图-jpg" aria-label="Permalink to &quot;Spring官方架构图.jpg&quot;">​</a></h5><p><img src="'+e+'" alt="Spring官方架构图"></p><h5 id="spring各个model的关系图-png" tabindex="-1">Spring各个Model的关系图.png <a class="header-anchor" href="#spring各个model的关系图-png" aria-label="Permalink to &quot;Spring各个Model的关系图.png&quot;">​</a></h5><p><img src="'+o+`" alt="Spring各个Model的关系图.png"></p><h2 id="核心的四个模块" tabindex="-1">核心的四个模块 <a class="header-anchor" href="#核心的四个模块" aria-label="Permalink to &quot;核心的四个模块&quot;">​</a></h2><h3 id="spring-beans" tabindex="-1">Spring-beans <a class="header-anchor" href="#spring-beans" aria-label="Permalink to &quot;Spring-beans&quot;">​</a></h3><p>​ 定义，Bean，加载</p><h3 id="spring-core" tabindex="-1">Spring-core <a class="header-anchor" href="#spring-core" aria-label="Permalink to &quot;Spring-core&quot;">​</a></h3><h3 id="spring-context" tabindex="-1">Spring-context <a class="header-anchor" href="#spring-context" aria-label="Permalink to &quot;Spring-context&quot;">​</a></h3><p>​ <code>ClassPathXmlApplicationContext</code></p><h3 id="spring-expression-spring-expression-language-spel" tabindex="-1">Spring-expression(Spring Expression Language, SpEL) <a class="header-anchor" href="#spring-expression-spring-expression-language-spel" aria-label="Permalink to &quot;Spring-expression(Spring Expression Language, SpEL)&quot;">​</a></h3><p>context 是入口</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>定位</td><td>用的Reader结尾的</td></tr><tr><td>加载</td><td>BeanDefinition保存类信息，包括OOP关系</td></tr><tr><td>注册</td><td>Factroy、Context 就是把用户所定义的 Bean放到 IOC容器中（Map）</td></tr></tbody></table><ul><li><code>ClassPathXmlApplicationContext</code> 通过 <code>main</code> 方法启动</li><li><code>DispatchServlet</code></li><li><code>FileSystem</code></li><li><code>Plugin</code></li><li><code>Lisenter</code></li></ul><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SpringTest</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">string</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">        ClassPathXmlApplicationContext app </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ClassPathXmlApplicationContext</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;application-common.xml&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;application-beans.xml&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;application-jdbc.xml&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        Object obj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> app.</span><span style="color:#B392F0;">getBean</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;member&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SpringTest</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#E36209;">string</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        ClassPathXmlApplicationContext app </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ClassPathXmlApplicationContext</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;application-common.xml&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;application-beans.xml&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;application-jdbc.xml&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        Object obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> app.</span><span style="color:#6F42C1;">getBean</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;member&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ClassPathXmlApplicationContext</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] configLocations, </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> refresh, @</span><span style="color:#F97583;">Nullable</span><span style="color:#E1E4E8;"> ApplicationContext parent)throws BeansException{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">(parent);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">setconfigLocations</span><span style="color:#E1E4E8;">(configLocations);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(refresh){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 初始化最核心的方法，就是refresh()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 把所有的Bean重新构造一遍</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 七分猜测，三分验证</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">refresh</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ClassPathXmlApplicationContext</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] configLocations, </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> refresh, @</span><span style="color:#D73A49;">Nullable</span><span style="color:#24292E;"> ApplicationContext parent)throws BeansException{</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">(parent);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">setconfigLocations</span><span style="color:#24292E;">(configLocations);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(refresh){</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 初始化最核心的方法，就是refresh()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 把所有的Bean重新构造一遍</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 七分猜测，三分验证</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">refresh</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>围绕Bean来展开</p><p>是由BeanFacoty来创建的</p><p>reader</p><p>load</p><p>do开头的都是具体干活的。</p><p>parseBeanDefinitions 方法实际上是解析xml，把xml解析成对象</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">refresh</span><span style="color:#E1E4E8;">()throws BeansException, illegalStateExcetion{</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">prepareRegresh</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    congigurableListtableBeanfacotry beanFactory </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">obtainFreshBeanFacotry</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">prepareBeanFacotry</span><span style="color:#E1E4E8;">(beanFacotry);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">refresh</span><span style="color:#24292E;">()throws BeansException, illegalStateExcetion{</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">prepareRegresh</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    congigurableListtableBeanfacotry beanFactory </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">obtainFreshBeanFacotry</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">prepareBeanFacotry</span><span style="color:#24292E;">(beanFacotry);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="spring源码分析" tabindex="-1">Spring源码分析 <a class="header-anchor" href="#spring源码分析" aria-label="Permalink to &quot;Spring源码分析&quot;">​</a></h2><p><strong>IOC</strong> 和 <strong>DI</strong></p><p>一般采用 <strong>xml</strong> ，<strong>properties</strong> ，以及现在的 <strong>annotion</strong> 来表示。</p><p>这些资源通常会放到 <strong>classpath</strong> 上 ，</p><h2 id="spring-的核心容器体系结构" tabindex="-1">Spring 的核心容器体系结构 <a class="header-anchor" href="#spring-的核心容器体系结构" aria-label="Permalink to &quot;Spring 的核心容器体系结构&quot;">​</a></h2><h3 id="_1-beanfactory" tabindex="-1">（1） BeanFactory <a class="header-anchor" href="#_1-beanfactory" aria-label="Permalink to &quot;（1） BeanFactory&quot;">​</a></h3><p>就是用来生产 Bean 的。</p><p>有父子关系，有集合关系。还有我们的自动注入的关系。这些关系都需要通过 <strong>BeanFatory</strong> 来体现出来。</p><p>顶层一个接口，下面有子类，分别实现各个场景的一个实现。这种设计模式是什么模式？</p><p>委派。</p><p><strong>BeaFactory</strong> 不干活的。</p><ul><li><code>ListableBeanFacotry</code> 处理集合之类的 Bean 的加载。</li><li><code>AutowireCapableBeanFactory</code> 处理自动注入关系的 Bean 的加载。</li><li><code>HirearchicalBeanFactory</code> 处理一些具有层次关系的 类的加载。</li></ul><p><img src="`+t+'" alt="BeanFactory"></p><p>最后都是由 <code>DefaultListableBeanFactory</code> 实现所有的功能。</p><p><code>ClassPathXmlApplicationContext</code> 作为 <strong>Spring</strong> 唯一的入口，</p><p><img src="'+r+`" alt="ClassPathXmlApplicationContext"></p><p><code>ClassPathXmlApplicationContext</code> 就是 <code>BeanFactory</code> 的实现类。我们学习 <strong>Spring</strong> 必须先学习 <code>Beanfactory</code> 。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BeanFactory</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">//对FactoryBean的转义定义，因为如果使用bean的名字检索FactoryBean得到的对象是工厂生成的对象</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">//如果需要得到工厂本身，需要转义</span></span>
<span class="line"><span style="color:#E1E4E8;">	String FACTORY_BEAN_PREFIX </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&amp;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">//根据bean的名字，获取在IOC容器中得到bean实例</span></span>
<span class="line"><span style="color:#E1E4E8;">	Object </span><span style="color:#B392F0;">getBean</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> BeansException;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">//根据bean的名字和Class类型来得到bean实例，增加了类型安全验证机制。</span></span>
<span class="line"><span style="color:#E1E4E8;">	&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; T </span><span style="color:#B392F0;">getBean</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">, @</span><span style="color:#F97583;">Nullable</span><span style="color:#E1E4E8;"> Class&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">requiredType</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> BeansException;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	Object </span><span style="color:#B392F0;">getBean</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">, Object... </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> BeansException;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; T </span><span style="color:#B392F0;">getBean</span><span style="color:#E1E4E8;">(Class&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">requiredType</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> BeansException;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; T </span><span style="color:#B392F0;">getBean</span><span style="color:#E1E4E8;">(Class&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">requiredType</span><span style="color:#E1E4E8;">, Object... </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> BeansException;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">//提供对bean的检索，看看是否在IOC容器有这个名字的bean</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">containsBean</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">//根据bean名字得到bean实例，并同时判断这个bean是不是单例</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isSingleton</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> NoSuchBeanDefinitionException;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isPrototype</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> NoSuchBeanDefinitionException;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isTypeMatch</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">, ResolvableType </span><span style="color:#FFAB70;">typeToMatch</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> NoSuchBeanDefinitionException;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isTypeMatch</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">, @</span><span style="color:#F97583;">Nullable</span><span style="color:#E1E4E8;"> Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">typeToMatch</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> NoSuchBeanDefinitionException;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">//得到bean实例的Class类型</span></span>
<span class="line"><span style="color:#E1E4E8;">	@</span><span style="color:#F97583;">Nullable</span></span>
<span class="line"><span style="color:#E1E4E8;">	Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getType</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> NoSuchBeanDefinitionException;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">//得到bean的别名，如果根据别名检索，那么其原名也会被检索出来</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">getAliases</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BeanFactory</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//对FactoryBean的转义定义，因为如果使用bean的名字检索FactoryBean得到的对象是工厂生成的对象</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//如果需要得到工厂本身，需要转义</span></span>
<span class="line"><span style="color:#24292E;">	String FACTORY_BEAN_PREFIX </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&amp;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//根据bean的名字，获取在IOC容器中得到bean实例</span></span>
<span class="line"><span style="color:#24292E;">	Object </span><span style="color:#6F42C1;">getBean</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">name</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> BeansException;</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//根据bean的名字和Class类型来得到bean实例，增加了类型安全验证机制。</span></span>
<span class="line"><span style="color:#24292E;">	&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; T </span><span style="color:#6F42C1;">getBean</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">name</span><span style="color:#24292E;">, @</span><span style="color:#D73A49;">Nullable</span><span style="color:#24292E;"> Class&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">requiredType</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> BeansException;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	Object </span><span style="color:#6F42C1;">getBean</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">name</span><span style="color:#24292E;">, Object... </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> BeansException;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; T </span><span style="color:#6F42C1;">getBean</span><span style="color:#24292E;">(Class&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">requiredType</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> BeansException;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; T </span><span style="color:#6F42C1;">getBean</span><span style="color:#24292E;">(Class&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">requiredType</span><span style="color:#24292E;">, Object... </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> BeansException;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//提供对bean的检索，看看是否在IOC容器有这个名字的bean</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">containsBean</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">name</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//根据bean名字得到bean实例，并同时判断这个bean是不是单例</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isSingleton</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">name</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> NoSuchBeanDefinitionException;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isPrototype</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">name</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> NoSuchBeanDefinitionException;</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isTypeMatch</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">name</span><span style="color:#24292E;">, ResolvableType </span><span style="color:#E36209;">typeToMatch</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> NoSuchBeanDefinitionException;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isTypeMatch</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">name</span><span style="color:#24292E;">, @</span><span style="color:#D73A49;">Nullable</span><span style="color:#24292E;"> Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">typeToMatch</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> NoSuchBeanDefinitionException;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//得到bean实例的Class类型</span></span>
<span class="line"><span style="color:#24292E;">	@</span><span style="color:#D73A49;">Nullable</span></span>
<span class="line"><span style="color:#24292E;">	Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getType</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">name</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> NoSuchBeanDefinitionException;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//得到bean的别名，如果根据别名检索，那么其原名也会被检索出来</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">getAliases</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">name</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><p>​ <code>ApplicationContext</code> 是 <strong>Spring</strong> 提供的一个高级的 <strong>IOC</strong> 容器， <code>ApplicationContext</code> 应该算是容器的高帅富。</p><h2 id="spring-bean工厂的工作流程" tabindex="-1">spring Bean工厂的工作流程 <a class="header-anchor" href="#spring-bean工厂的工作流程" aria-label="Permalink to &quot;spring Bean工厂的工作流程&quot;">​</a></h2><h3 id="定位" tabindex="-1">定位 <a class="header-anchor" href="#定位" aria-label="Permalink to &quot;定位&quot;">​</a></h3><h3 id="加载" tabindex="-1">加载 <a class="header-anchor" href="#加载" aria-label="Permalink to &quot;加载&quot;">​</a></h3><h3 id="注册" tabindex="-1">注册 <a class="header-anchor" href="#注册" aria-label="Permalink to &quot;注册&quot;">​</a></h3><p><code>BeanDefinition</code> 为什么会有一个 <code>BeanDefinition</code> 就是我们的 <strong>装饰器模式</strong> 。就是对原有对象的包装，就是一个 <strong>包装</strong> 。就是，保留原来的 <strong>OOP</strong> 的关系。</p><p><img src="`+c+'" alt="RootBeanDefinition"></p><p><code>XmlBeanDefinitionReader</code> 负责 XML 文件的读取和解析。转换成我们的 <code>BeanDefinition</code> 就是我们的 <strong>定位功能</strong> 。</p><p><img src="'+i+'" alt="XmlBeanDefinitionReader"></p><h4 id="_4-3-ioc-容器的初始化" tabindex="-1">4.3 IOC 容器的初始化 <a class="header-anchor" href="#_4-3-ioc-容器的初始化" aria-label="Permalink to &quot;4.3 IOC 容器的初始化&quot;">​</a></h4><p>​ IOC 容器的初始化包括 <code>BeanDefinition</code> 的 <code>Resource</code> 定位、载入和注册这三个基本的过程。</p><p><img src="'+E+`" alt="ClassPathXmlApplicationContext"></p><h3 id="spring-中的技巧" tabindex="-1">Spring 中的技巧 <a class="header-anchor" href="#spring-中的技巧" aria-label="Permalink to &quot;Spring 中的技巧&quot;">​</a></h3><p><code>Context</code> 是入口</p><p><strong>定位</strong> ： 用的 <code>Reader</code> 结尾的。</p><p><strong>加载</strong>： <code>BeanDefinition</code> 保存类信息，包括 <strong>OOP</strong> 关系。</p><p><strong>注册</strong>： <code>Facotry</code> 、 <code>Context</code></p><p>注册就是：把用户所定义的 Bean 放到 IOC 容器中 （Map）</p><p>定位资源的位置，</p><p>加载资源的内容，</p><p>注册，把 Bean 写入到 Map 中。</p><h3 id="spring-启动方式" tabindex="-1">Spring 启动方式 <a class="header-anchor" href="#spring-启动方式" aria-label="Permalink to &quot;Spring 启动方式&quot;">​</a></h3><ul><li><code>ClassPathXmlApplicationContext</code> 通过 main 方法启动</li><li>DispatchServlet</li><li>FileSystem</li><li>Plugin</li><li>Listener</li></ul><p>reader</p><p>load</p><p>do 开头的都是具体干活的。</p><p><strong><code>parseBeanDefinitions</code></strong> 的方法实际是解析 XML，把 XML 中的内容变成 <strong><code>BeanDefinition</code></strong></p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ClassPathXmlApplicationContext</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] configLocations, </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> refresh, @</span><span style="color:#F97583;">Nullable</span><span style="color:#E1E4E8;"> ApplicationContext parent)</span></span>
<span class="line"><span style="color:#E1E4E8;">			throws BeansException {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">(parent);</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">setConfigLocations</span><span style="color:#E1E4E8;">(configLocations);</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (refresh) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#6A737D;">// 初始化最核心的方法，就是 refresh()</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#6A737D;">// 把所有的 Bean 重新构造一遍</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#6A737D;">// 七分猜测、三分验证</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">refresh</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ClassPathXmlApplicationContext</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] configLocations, </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> refresh, @</span><span style="color:#D73A49;">Nullable</span><span style="color:#24292E;"> ApplicationContext parent)</span></span>
<span class="line"><span style="color:#24292E;">			throws BeansException {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#005CC5;">super</span><span style="color:#24292E;">(parent);</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">setConfigLocations</span><span style="color:#24292E;">(configLocations);</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (refresh) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6A737D;">// 初始化最核心的方法，就是 refresh()</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6A737D;">// 把所有的 Bean 重新构造一遍</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6A737D;">// 七分猜测、三分验证</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">refresh</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">refresh</span><span style="color:#E1E4E8;">() throws BeansException, IllegalStateException {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">synchronized</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.startupShutdownMonitor) {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#6A737D;">// Prepare this context for refreshing.</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#6A737D;">//调用容器准备刷新的方法，获取容器的当时时间，同时给容器设置同步标识</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">prepareRefresh</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#6A737D;">// Tell the subclass to refresh the internal bean factory.</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#6A737D;">//告诉子类启动refreshBeanFactory()方法，Bean定义资源文件的载入</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#6A737D;">//从子类的refreshBeanFactory()方法启动</span></span>
<span class="line"><span style="color:#E1E4E8;">			ConfigurableListableBeanFactory beanFactory </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">obtainFreshBeanFactory</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#6A737D;">// Prepare the bean factory for use in this context.</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#6A737D;">//为BeanFactory配置容器特性，例如类加载器、事件处理器等</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">prepareBeanFactory</span><span style="color:#E1E4E8;">(beanFactory);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#6A737D;">// Allows post-processing of the bean factory in context subclasses.</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#6A737D;">//为容器的某些子类指定特殊的BeanPost事件处理器</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#B392F0;">postProcessBeanFactory</span><span style="color:#E1E4E8;">(beanFactory);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#6A737D;">// Invoke factory processors registered as beans in the context.</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#6A737D;">//调用所有注册的BeanFactoryPostProcessor的Bean</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#B392F0;">invokeBeanFactoryPostProcessors</span><span style="color:#E1E4E8;">(beanFactory);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#6A737D;">// Register bean processors that intercept bean creation.</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#6A737D;">//为BeanFactory注册BeanPost事件处理器.</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#6A737D;">//BeanPostProcessor是Bean后置处理器，用于监听容器触发的事件</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#B392F0;">registerBeanPostProcessors</span><span style="color:#E1E4E8;">(beanFactory);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#6A737D;">// Initialize message source for this context.</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#6A737D;">//初始化信息源，和国际化相关</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#B392F0;">initMessageSource</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#6A737D;">// Initialize event multicaster for this context.</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#6A737D;">//初始化容器事件传播器.</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#B392F0;">initApplicationEventMulticaster</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#6A737D;">// Initialize other special beans in specific context subclasses.</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#6A737D;">//调用子类的某些特殊Bean初始化方法</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#B392F0;">onRefresh</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#6A737D;">// Check for listener beans and register them.</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#6A737D;">//为事件传播器注册事件监听器.</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#B392F0;">registerListeners</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#6A737D;">// Instantiate all remaining (non-lazy-init) singletons.</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#6A737D;">//初始化所有剩余的单例Bean</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#B392F0;">finishBeanFactoryInitialization</span><span style="color:#E1E4E8;">(beanFactory);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#6A737D;">// Last step: publish corresponding event.</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#6A737D;">//初始化容器的生命周期事件处理器，并发布容器的生命周期事件</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#B392F0;">finishRefresh</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">			}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (BeansException </span><span style="color:#FFAB70;">ex</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (logger.</span><span style="color:#B392F0;">isWarnEnabled</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">					logger.</span><span style="color:#B392F0;">warn</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Exception encountered during context initialization - &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">							</span><span style="color:#9ECBFF;">&quot;cancelling refresh attempt: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> ex);</span></span>
<span class="line"><span style="color:#E1E4E8;">				}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#6A737D;">// Destroy already created singletons to avoid dangling resources.</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#6A737D;">//销毁已创建的Bean</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#B392F0;">destroyBeans</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#6A737D;">// Reset &#39;active&#39; flag.</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#6A737D;">//消refresh操作，重置容器的同步标识</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#B392F0;">cancelRefresh</span><span style="color:#E1E4E8;">(ex);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#6A737D;">// Propagate exception to caller.</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> ex;</span></span>
<span class="line"><span style="color:#E1E4E8;">			}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#6A737D;">// Reset common introspection caches in Spring&#39;s core, since we</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#6A737D;">// might not ever need metadata for singleton beans anymore...</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#B392F0;">resetCommonCaches</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">			}</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">refresh</span><span style="color:#24292E;">() throws BeansException, IllegalStateException {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.startupShutdownMonitor) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6A737D;">// Prepare this context for refreshing.</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6A737D;">//调用容器准备刷新的方法，获取容器的当时时间，同时给容器设置同步标识</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">prepareRefresh</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6A737D;">// Tell the subclass to refresh the internal bean factory.</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6A737D;">//告诉子类启动refreshBeanFactory()方法，Bean定义资源文件的载入</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6A737D;">//从子类的refreshBeanFactory()方法启动</span></span>
<span class="line"><span style="color:#24292E;">			ConfigurableListableBeanFactory beanFactory </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">obtainFreshBeanFactory</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6A737D;">// Prepare the bean factory for use in this context.</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6A737D;">//为BeanFactory配置容器特性，例如类加载器、事件处理器等</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">prepareBeanFactory</span><span style="color:#24292E;">(beanFactory);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6A737D;">// Allows post-processing of the bean factory in context subclasses.</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6A737D;">//为容器的某些子类指定特殊的BeanPost事件处理器</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6F42C1;">postProcessBeanFactory</span><span style="color:#24292E;">(beanFactory);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6A737D;">// Invoke factory processors registered as beans in the context.</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6A737D;">//调用所有注册的BeanFactoryPostProcessor的Bean</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6F42C1;">invokeBeanFactoryPostProcessors</span><span style="color:#24292E;">(beanFactory);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6A737D;">// Register bean processors that intercept bean creation.</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6A737D;">//为BeanFactory注册BeanPost事件处理器.</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6A737D;">//BeanPostProcessor是Bean后置处理器，用于监听容器触发的事件</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6F42C1;">registerBeanPostProcessors</span><span style="color:#24292E;">(beanFactory);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6A737D;">// Initialize message source for this context.</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6A737D;">//初始化信息源，和国际化相关</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6F42C1;">initMessageSource</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6A737D;">// Initialize event multicaster for this context.</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6A737D;">//初始化容器事件传播器.</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6F42C1;">initApplicationEventMulticaster</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6A737D;">// Initialize other special beans in specific context subclasses.</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6A737D;">//调用子类的某些特殊Bean初始化方法</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6F42C1;">onRefresh</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6A737D;">// Check for listener beans and register them.</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6A737D;">//为事件传播器注册事件监听器.</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6F42C1;">registerListeners</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6A737D;">// Instantiate all remaining (non-lazy-init) singletons.</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6A737D;">//初始化所有剩余的单例Bean</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6F42C1;">finishBeanFactoryInitialization</span><span style="color:#24292E;">(beanFactory);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6A737D;">// Last step: publish corresponding event.</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6A737D;">//初始化容器的生命周期事件处理器，并发布容器的生命周期事件</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6F42C1;">finishRefresh</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (BeansException </span><span style="color:#E36209;">ex</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (logger.</span><span style="color:#6F42C1;">isWarnEnabled</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">					logger.</span><span style="color:#6F42C1;">warn</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Exception encountered during context initialization - &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">							</span><span style="color:#032F62;">&quot;cancelling refresh attempt: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> ex);</span></span>
<span class="line"><span style="color:#24292E;">				}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6A737D;">// Destroy already created singletons to avoid dangling resources.</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6A737D;">//销毁已创建的Bean</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6F42C1;">destroyBeans</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6A737D;">// Reset &#39;active&#39; flag.</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6A737D;">//消refresh操作，重置容器的同步标识</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6F42C1;">cancelRefresh</span><span style="color:#24292E;">(ex);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6A737D;">// Propagate exception to caller.</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> ex;</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6A737D;">// Reset common introspection caches in Spring&#39;s core, since we</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6A737D;">// might not ever need metadata for singleton beans anymore...</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6F42C1;">resetCommonCaches</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br></div></div>`,94),u=[b];function g(d,h,m,F,B,A){return n(),a("div",null,u)}const C=s(y,[["render",g]]);export{f as __pageData,C as default};
