import{_ as s,o as a,h as n,Q as l}from"./chunks/framework.da611722.js";const p="/assets/序列化-对象传输怎么去做.777195f1.png",e="/assets/序列化-模块之间通过协议传输.62814516.png",o="/assets/序列化-一个INT-8个字节.5ad6e77f.png",t="/assets/序列化-Varint-算法-第一步-补1-补0.71843511.png",r="/assets/序列化-Varint-算法第二步-再次压缩.6f316760.png",c="/assets/序列化-Varint-负数的序列化.d4c67071.png",i="/assets/序列化-Protobuf存储-算法.a73f5d43.png",D=JSON.parse('{"title":"分布式系统的基石-序列化和反序列化 | JavaGuide","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://javaguide.net/百万架构师/分布式架构的基础/分布式系统的基石-序列化和反序列化.html"}],["meta",{"name":"keywords","content":"分布式系统的基石-序列化和反序列化 , JavaGuide , JavaGuide官网, Java面试指南, Java基础, 多线程, JVM, 虚拟机, 数据库, MySQL, Spring, Redis, MyBatis, 系统设计, 分布式, RPC, 高可用, 高并发"}],["meta",{"name":"og:url","content":"https://JavaGuide.net"}],["meta",{"name":"og:type","content":"website"}],["meta",{"name":"og:image","content":"https://javaguide.net/JavaGuide-og.png"}],["meta",{"name":"og:title","content":"分布式系统的基石-序列化和反序列化 | JavaGuide | Java面试指南 | JavaGuide官网"}],["meta",{"name":"og:description","content":"分布式系统的基石-序列化和反序列化 | JavaGuide | Java面试指南 | JavaGuide官网 | 「JavaGuide.net」一份涵盖大部分 Java 程序员所需要掌握的核心知识。准备 Java 面试，首选 JavaGuide.net ！"}],["meta",{"name":"twitter:site","content":"https://javaguide.net"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:creator","content":"nogeek.cn"}],["meta",{"name":"twitter:title","content":"分布式系统的基石-序列化和反序列化 | JavaGuide | Java面试指南 | JavaGuide官网"}],["meta",{"name":"twitter:description","content":"分布式系统的基石-序列化和反序列化 | JavaGuide | Java面试指南 | JavaGuide官网 | 「JavaGuide.net」一份涵盖大部分 Java 程序员所需要掌握的核心知识。准备 Java 面试，首选 JavaGuide.net ！"}],["meta",{"name":"twitter:image","content":"https://javaguide.net/JavaGuide-og.png"}],["meta",{"name":"sogou_site_verification","content":"fcAkazTXFd"}],["meta",{"name":"baidu-site-verification","content":"codeva-MXEPYsXKGk"}],["meta",{"name":"msvalidate.01","content":"9F2D57CFC59E8031212A166878638B15"}]]},"headers":[],"relativePath":"百万架构师/分布式架构的基础/分布式系统的基石-序列化和反序列化.md","filePath":"百万架构师/分布式架构的基础/分布式系统的基石-序列化和反序列化.md","lastUpdated":1741277271000}'),E={name:"百万架构师/分布式架构的基础/分布式系统的基石-序列化和反序列化.md"},y=l('<ol><li>了解序列化的意义</li><li>如何实现一个序列化操作</li><li>序列化的高阶认识</li><li>常见的序列化技术及应用</li><li>Protobuf实现原理分析</li><li>序列化框架的选型</li></ol><h1 id="了解序列化的意义" tabindex="-1">了解序列化的意义 <a class="header-anchor" href="#了解序列化的意义" aria-label="Permalink to &quot;了解序列化的意义&quot;">​</a></h1><p>我们非常地考虑系统性能的时候，就要考虑到序列化。</p><p>序列化在我们系统架构里边处于非常底层的位置。我们平时不会去关心，我们使用的是什么序列化。后者说我们用的一些RPC框架它是怎么去做的。</p><p>远程通信需要用到序列化。</p><p>序列化和反序列化是我们几乎每天面临的问题，</p><p>项目之间的调用都需要序列化。是我们必须要掌握的东西。</p><p>如果想把java对象传输给其他的进程。</p><p>JVM内部有一个内部的对象，需要传输。</p><h2 id="对象的传输怎么去做" tabindex="-1">对象的传输怎么去做 <a class="header-anchor" href="#对象的传输怎么去做" aria-label="Permalink to &quot;对象的传输怎么去做&quot;">​</a></h2><p>RPC做远程传输，不可能只传输字节流，还需要一些java对象。</p><p>在分布式架构系统中，序列化的性能会对我们系统性能有影响。所以我们要去关注序列化、从而提升整体的性能。</p><p>Socket传输一个流，可以简单地传输</p><p>当我们要传输List/Object等java对象时，怎么办？</p><p>Java中允许在内存中创建一些可复用的java对象，只有在JVM在运行时对象才会存在，然后JVM的生命周期限制了对象的生命周期。</p><p><img src="'+p+`" alt="序列化-对象传输怎么去做.png"></p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>发送端</td><td>序列化</td><td>把对象的状态信息转化成可存储可传输的形式的数据</td></tr><tr><td>接收端</td><td>反序列化</td><td>反过来</td></tr></tbody></table><p>使用tomcat时，把session放在内存中，如果用户比较多的话，比如说10万，100万，假设，那我们会把session数据放在磁盘上，然后用的时候再反序列化。</p><h3 id="远程传输" tabindex="-1">远程传输 <a class="header-anchor" href="#远程传输" aria-label="Permalink to &quot;远程传输&quot;">​</a></h3><h3 id="状态信息存储到磁盘上" tabindex="-1">状态信息存储到磁盘上 <a class="header-anchor" href="#状态信息存储到磁盘上" aria-label="Permalink to &quot;状态信息存储到磁盘上&quot;">​</a></h3><h1 id="序列化带来的挑战" tabindex="-1">序列化带来的挑战 <a class="header-anchor" href="#序列化带来的挑战" aria-label="Permalink to &quot;序列化带来的挑战&quot;">​</a></h1><ol><li><pre><code> 我们希望序列化出来的数据越小越好，越小就越节省带宽，
</code></pre></li><li><pre><code> 序列化本身会占用我们的内存和资源，
</code></pre></li></ol><p>序列化的快、慢；序列化出来的字节大、小。</p><p>Java实现序列化：serialization</p><h2 id="serialization" tabindex="-1">Serialization <a class="header-anchor" href="#serialization" aria-label="Permalink to &quot;Serialization&quot;">​</a></h2><ol><li><pre><code> 数据比较大
</code></pre></li><li><pre><code> 语言限制（跨语言跨平台）
</code></pre></li><li><pre><code> Xml（soap）（WebService里面用得很多，比java生成出来的二进制的序列化方式更加容易理解）
</code></pre></li></ol><h2 id="json" tabindex="-1">JSON <a class="header-anchor" href="#json" aria-label="Permalink to &quot;JSON&quot;">​</a></h2><p>简单文本格式的，基于restful风格的API逐步取代XML</p><p>Spring 4 以后自带基于jackJson的自动转化json的功能，</p><p>但是JSON，占用的空间也很大，而且性能也相对比较低。</p><p>跟用户打交道时，需要提升效率。</p><p>Protobufs messagepack</p><h2 id="idea设置生成serialversionuid" tabindex="-1">IDEA设置生成SerialVersionUID <a class="header-anchor" href="#idea设置生成serialversionuid" aria-label="Permalink to &quot;IDEA设置生成SerialVersionUID&quot;">​</a></h2><ul><li>setting <ul><li>Editor <ul><li>Inspections <ul><li>serializable class without serialVersinUid : ✔️</li></ul></li></ul></li></ul></li></ul><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Data</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> superClass </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Serializable</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> serialVersionUID </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">281884127299001746L</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//   private static final long serialVersionUID = -1L;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> Integer b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Integer age;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String name;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Data</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> superClass </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Serializable</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> serialVersionUID </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">281884127299001746L</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//   private static final long serialVersionUID = -1L;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Integer b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Integer age;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String name;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="serialversionuid作用" tabindex="-1">serialVersionUID作用 <a class="header-anchor" href="#serialversionuid作用" aria-label="Permalink to &quot;serialVersionUID作用&quot;">​</a></h2><ul><li><p>版本的UID</p><ul><li>判断类是否一样的，</li></ul></li><li><p>默认地根据calss文件，生成对应的64位的hash字段。（我们看不到）</p></li><li><p>编译的时候生成的</p></li></ul><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">java.io.invalidCalssException</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> com.gupao.User. class compatible</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> seriVersionUid </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">3493499349L</span><span style="color:#E1E4E8;">. local </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">serialVersionUid</span><span style="color:#E1E4E8;"> = -3</span></span>
<span class="line"><span style="color:#E1E4E8;">   at java................</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">java.io.invalidCalssException</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> com.gupao.User. class compatible</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> seriVersionUid </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">3493499349L</span><span style="color:#24292E;">. local </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">serialVersionUid</span><span style="color:#24292E;"> = -3</span></span>
<span class="line"><span style="color:#24292E;">   at java................</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>面试题：</p><h3 id="serialversionuid不一致" tabindex="-1">serialVersionUID不一致 <a class="header-anchor" href="#serialversionuid不一致" aria-label="Permalink to &quot;serialVersionUID不一致&quot;">​</a></h3><p>假如序列化与反序列化的serialVersionUID 不一致，会报invalidCalssException错误。</p><h3 id="假设两个serialversionuid一致" tabindex="-1">假设两个serialVersionUID一致， <a class="header-anchor" href="#假设两个serialversionuid一致" aria-label="Permalink to &quot;假设两个serialVersionUID一致，&quot;">​</a></h3><p>序列化的类是四个字段，反序列化的类是三个字段，两个serialVersionUID一样。</p><p>序列化的类是四个字段序列化。反序列化传输进去了三个字段，然后序列化不报错。</p><p>只不过是三个字段序列化，反序列化传出进去了四个字段，序列化不报错，为空。</p><h2 id="静态变量的序列化" tabindex="-1">静态变量的序列化 <a class="header-anchor" href="#静态变量的序列化" aria-label="Permalink to &quot;静态变量的序列化&quot;">​</a></h2><p>在类中定义一个静态变量。</p><p>Java序列化存储类的瞬时状态。</p><p>静态变量不参与序列化。</p><h2 id="transient" tabindex="-1">transient <a class="header-anchor" href="#transient" aria-label="Permalink to &quot;transient&quot;">​</a></h2><p>Transient表示不会被序列化。</p><h2 id="父子类关系" tabindex="-1">父子类关系 <a class="header-anchor" href="#父子类关系" aria-label="Permalink to &quot;父子类关系&quot;">​</a></h2><p>序列化的对象必须实现序列化，</p><h4 id="子类实现序列化-父类不实现序列化-不能够被序列化" tabindex="-1">子类实现序列化，父类不实现序列化，不能够被序列化 <a class="header-anchor" href="#子类实现序列化-父类不实现序列化-不能够被序列化" aria-label="Permalink to &quot;子类实现序列化，父类不实现序列化，不能够被序列化&quot;">​</a></h4><h4 id="父类实现了序列化-子类不实现序列化也可以序列化。" tabindex="-1">父类实现了序列化，子类不实现序列化也可以序列化。 <a class="header-anchor" href="#父类实现了序列化-子类不实现序列化也可以序列化。" aria-label="Permalink to &quot;父类实现了序列化，子类不实现序列化也可以序列化。&quot;">​</a></h4><h2 id="可以自己写一个writeojbect" tabindex="-1">可以自己写一个writeOjbect <a class="header-anchor" href="#可以自己写一个writeojbect" aria-label="Permalink to &quot;可以自己写一个writeOjbect&quot;">​</a></h2><p>手写序列化，反序列化 绕过 transient 实现序列化，手动地写到流里边。</p><h2 id="序列化两次" tabindex="-1">序列化两次 <a class="header-anchor" href="#序列化两次" aria-label="Permalink to &quot;序列化两次&quot;">​</a></h2><p>一个序列化的文件大小，</p><p>对一个对象在同一个流里边输出两次，</p><p>在同一个流管道里输出两次并不会输出两次</p><p>第二次输出的是上一个对象的引用</p><p>加了5个字节，</p><p>指向同一个对象。</p><h2 id="克隆" tabindex="-1">克隆 <a class="header-anchor" href="#克隆" aria-label="Permalink to &quot;克隆&quot;">​</a></h2><p>序列化可以实现克隆</p><p>Clonable 克隆接口，浅克隆</p><h4 id="浅克隆" tabindex="-1">浅克隆 <a class="header-anchor" href="#浅克隆" aria-label="Permalink to &quot;浅克隆&quot;">​</a></h4><p>浅克隆，只克隆这个对象的所有的值，和他这个对象本身，只是一个引用。只是一个引用，并不是一个新的对象。引用的对象不会被复制。</p><p>它只是克隆当前这个对象本身和这个对象对应的值，但是这个对象里边成员变量里边的对象所指向的引用，它不会再去克隆。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CloneDemo</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> CloneNotSupportedException, </span></span>
<span class="line"><span style="color:#E1E4E8;">    IOException, ClassNotFoundException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Email email </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Email</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        email.</span><span style="color:#B392F0;">setContent</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;今天去钓鱼&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        Person p1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Person</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;A&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        p1.</span><span style="color:#B392F0;">setEmail</span><span style="color:#E1E4E8;">(email);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//Person p2 = p1.clone();</span></span>
<span class="line"><span style="color:#E1E4E8;">        Person p2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> p1.</span><span style="color:#B392F0;">deepClone</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        p2.</span><span style="color:#B392F0;">setName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;B&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        p2.</span><span style="color:#B392F0;">getEmail</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">setContent</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;今天去打架&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(p1);</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(p2);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CloneDemo</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> CloneNotSupportedException, </span></span>
<span class="line"><span style="color:#24292E;">    IOException, ClassNotFoundException {</span></span>
<span class="line"><span style="color:#24292E;">        Email email </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Email</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        email.</span><span style="color:#6F42C1;">setContent</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;今天去钓鱼&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        Person p1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;A&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        p1.</span><span style="color:#6F42C1;">setEmail</span><span style="color:#24292E;">(email);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//Person p2 = p1.clone();</span></span>
<span class="line"><span style="color:#24292E;">        Person p2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p1.</span><span style="color:#6F42C1;">deepClone</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        p2.</span><span style="color:#6F42C1;">setName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;B&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        p2.</span><span style="color:#6F42C1;">getEmail</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">setContent</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;今天去打架&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(p1);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(p2);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h5 id="结果" tabindex="-1">结果 <a class="header-anchor" href="#结果" aria-label="Permalink to &quot;结果&quot;">​</a></h5><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">Person(name</span><span style="color:#E1E4E8;">=A, </span><span style="color:#9ECBFF;">email=Email</span><span style="color:#E1E4E8;">(content</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">今天去打架</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#B392F0;">Person(name</span><span style="color:#E1E4E8;">=B, </span><span style="color:#9ECBFF;">email=Email</span><span style="color:#E1E4E8;">(content</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">今天去打架</span><span style="color:#E1E4E8;">))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">Person(name</span><span style="color:#24292E;">=A, </span><span style="color:#032F62;">email=Email</span><span style="color:#24292E;">(content</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">今天去打架</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#6F42C1;">Person(name</span><span style="color:#24292E;">=B, </span><span style="color:#032F62;">email=Email</span><span style="color:#24292E;">(content</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">今天去打架</span><span style="color:#24292E;">))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="深克隆。" tabindex="-1">深克隆。 <a class="header-anchor" href="#深克隆。" aria-label="Permalink to &quot;深克隆。&quot;">​</a></h4><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 用序列化实现深度克隆</span></span>
<span class="line"><span style="color:#6A737D;">// 手写深度克隆</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">xxxxx</span><span style="color:#E1E4E8;"> Implents serialable{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//   序列化，方法</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 反序列化 方法</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 用序列化实现深度克隆</span></span>
<span class="line"><span style="color:#6A737D;">// 手写深度克隆</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">xxxxx</span><span style="color:#24292E;"> Implents serialable{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//   序列化，方法</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 反序列化 方法</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>深度克隆以后的结果</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">Person</span><span style="color:#E1E4E8;">(name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">A, email</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">Email</span><span style="color:#E1E4E8;">(content</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">今天去钓鱼))</span></span>
<span class="line"><span style="color:#B392F0;">Person</span><span style="color:#E1E4E8;">(name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">B, email</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">Email</span><span style="color:#E1E4E8;">(content</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">今天去打架))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">(name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">A, email</span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;">Email</span><span style="color:#24292E;">(content</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">今天去钓鱼))</span></span>
<span class="line"><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">(name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">B, email</span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;">Email</span><span style="color:#24292E;">(content</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">今天去打架))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="传输对象-序列化" tabindex="-1">传输对象，序列化 <a class="header-anchor" href="#传输对象-序列化" aria-label="Permalink to &quot;传输对象，序列化&quot;">​</a></h2><p><img src="`+e+`" alt="序列化-模块之间通过协议传输.png"></p><h1 id="常见的序列化技术" tabindex="-1">常见的序列化技术 <a class="header-anchor" href="#常见的序列化技术" aria-label="Permalink to &quot;常见的序列化技术&quot;">​</a></h1><h3 id="考虑因素" tabindex="-1">考虑因素 <a class="header-anchor" href="#考虑因素" aria-label="Permalink to &quot;考虑因素&quot;">​</a></h3><ol><li><pre><code> 序列化结果的数据大小
</code></pre></li><li><pre><code> 序列化占用CPU，内存   性能
</code></pre></li><li><pre><code> 序列化的复杂度。实现起来是否复杂，学习成本
</code></pre></li></ol><h3 id="xml形式" tabindex="-1">XML形式， <a class="header-anchor" href="#xml形式" aria-label="Permalink to &quot;XML形式，&quot;">​</a></h3><p>序列化，可读性非常高，效率低，数据量大。</p><p>应用：webService 中的soap （http+xml）传输的形式</p><p>性能要求很高的时候不会选用XML技术。</p><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;com.thoughtworks.xstream&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;xstream&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;1.4.9&lt;/</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;com.thoughtworks.xstream&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;xstream&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;1.4.9&lt;/</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>基于 <code>OXMapping</code> 的一个实现方法</p><h2 id="基于json实现序列化" tabindex="-1">基于JSON实现序列化 <a class="header-anchor" href="#基于json实现序列化" aria-label="Permalink to &quot;基于JSON实现序列化&quot;">​</a></h2><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>Jackson</td><td>spring 默认使用<br>比 <code>fastjson</code> 快<br>比GSON的性能要好</td><td></td></tr><tr><td>Fastjson</td><td>据说最快<br>不太稳定</td><td></td></tr><tr><td>GSON</td><td>谷歌的GSON</td><td></td></tr></tbody></table><p>Jackson、GSON 比 fastjson 的稳定性要好</p><ul><li>Hession 序列化 hession2</li><li>Dubbo默认使用hession，对 hession实现了一个优化，生成流的时候做了一个压缩。Hession2实现了多个序列化的选择。</li></ul><p>所有序列化生成的数据格式不一样</p><ul><li>hession2 对 hession做了一个优化，他的性能也是不错的。</li></ul><h3 id="dobbo提供的序列化" tabindex="-1">Dobbo提供的序列化 <a class="header-anchor" href="#dobbo提供的序列化" aria-label="Permalink to &quot;Dobbo提供的序列化&quot;">​</a></h3><ul><li><p><code>ConpactedJavaSerializatioin</code> 压缩的java序列化</p></li><li><p><code>DubboSerialization</code></p></li><li><p><code>FastJsonSerialization</code></p></li><li><p><code>Hession2Serialization</code></p></li><li><p><code>JavaSerialization</code></p></li><li><p><code>JsonSerialization</code></p></li><li><p><code>NativeJavaSerialization</code></p></li><li><p>Kyio 和 protobuf 都不能选择</p></li></ul><h1 id="protobuf序列化框架" tabindex="-1">Protobuf序列化框架 <a class="header-anchor" href="#protobuf序列化框架" aria-label="Permalink to &quot;Protobuf序列化框架&quot;">​</a></h1><h2 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点&quot;">​</a></h2><ol><li>谷歌开源</li><li>独立语言、独立平台 <ul><li>（基于Java，基于C，基于C++，基于pathon，它可以去做不同平台的交互）</li><li>纯粹地基于表示层的协议，它可以和各种传输层协议一起使用。</li></ul></li><li>压缩以后空间开销小，性能比较好 <ul><li>性能要求高的话，需要用protobuf</li></ul></li><li>解析性能比较高</li></ol><h2 id="缺点" tabindex="-1">缺点 <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;缺点&quot;">​</a></h2><p>Protobuf 学习成本比较高，使用起来比较麻烦。</p><p>Github上有独立的编译器，</p><ol><li><pre><code> 下载编译器
</code></pre></li><li><pre><code> 编写独立的proto文件（自己的语法）
</code></pre></li><li><pre><code> 编译（通过编译器编译成java版本）
</code></pre></li></ol><h3 id="下载" tabindex="-1">下载： <a class="header-anchor" href="#下载" aria-label="Permalink to &quot;下载：&quot;">​</a></h3><ul><li><a href="https://github.com/google/protobuf" target="_blank" rel="noreferrer">https://github.com/google/protobuf</a><ul><li>release</li><li><code>protoc-3.6.0-win32.zip</code></li></ul></li></ul><ol><li><pre><code> 创建文本  \`user.proto\` 
</code></pre></li></ol><p>定义一个一个proto文件，</p><div class="language-protobuf vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">protobuf</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Syntax </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> “proto2”;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">Package com.gupaoedu.serial;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">Option java_package</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">”com.gupaoedu.serial”</span></span>
<span class="line"><span style="color:#E1E4E8;">Option java_outer_classname</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">”com.gupaoedu.serial”</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Syntax </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> “proto2”;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">Package com.gupaoedu.serial;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">Option java_package</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">”com.gupaoedu.serial”</span></span>
<span class="line"><span style="color:#24292E;">Option java_outer_classname</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">”com.gupaoedu.serial”</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="文件格式" tabindex="-1">文件格式 <a class="header-anchor" href="#文件格式" aria-label="Permalink to &quot;文件格式&quot;">​</a></h3><h3 id="编译命令" tabindex="-1">编译命令 <a class="header-anchor" href="#编译命令" aria-label="Permalink to &quot;编译命令&quot;">​</a></h3><ul><li>Shirft + 右键 打开 powerShell</li></ul><p>Fluent风格，实现序列化</p><h2 id="粘贴进去-java文件" tabindex="-1">粘贴进去.java文件 <a class="header-anchor" href="#粘贴进去-java文件" aria-label="Permalink to &quot;粘贴进去.java文件&quot;">​</a></h2><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">protoBufDemo</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> InvalidProtocolBufferException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// fluent 风格</span></span>
<span class="line"><span style="color:#E1E4E8;">        UserProto .User user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> UserProto.User.</span><span style="color:#B392F0;">newBuilder</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">setName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Darian&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">setAge</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">18</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        ByteString bytes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> user.</span><span style="color:#B392F0;">toByteString</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(bytes);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        UserProto.User nUser </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> UserProto.User.</span><span style="color:#B392F0;">parseFrom</span><span style="color:#E1E4E8;">(bytes);</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(nUser);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">protoBufDemo</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> InvalidProtocolBufferException {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// fluent 风格</span></span>
<span class="line"><span style="color:#24292E;">        UserProto .User user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> UserProto.User.</span><span style="color:#6F42C1;">newBuilder</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">setName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Darian&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">setAge</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">18</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        ByteString bytes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> user.</span><span style="color:#6F42C1;">toByteString</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(bytes);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        UserProto.User nUser </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> UserProto.User.</span><span style="color:#6F42C1;">parseFrom</span><span style="color:#24292E;">(bytes);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(nUser);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">ByteString@20sdfsfd2 size=</span><span style="color:#F97583;">10&gt;</span></span>
<span class="line"><span style="color:#B392F0;">name:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;darian&quot;</span></span>
<span class="line"><span style="color:#B392F0;">age:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">18</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">ByteString@20sdfsfd2 size=</span><span style="color:#D73A49;">10&gt;</span></span>
<span class="line"><span style="color:#6F42C1;">name:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;darian&quot;</span></span>
<span class="line"><span style="color:#6F42C1;">age:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">18</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h1 id="protobuf-原理解析" tabindex="-1">Protobuf 原理解析 <a class="header-anchor" href="#protobuf-原理解析" aria-label="Permalink to &quot;Protobuf 原理解析&quot;">​</a></h1><p>Protobuf 为什么序列化的字节数那么小，</p><p>利用了位运算</p><p>BitMap/BitSet</p><p>一个int 4个字节，一个字节8个byte位。</p><p><img src="`+o+'" alt="序列化-一个INT-8个字节.png"></p><ol><li><p>Varint做编码</p></li><li><p>T-L-V做存储</p></li></ol><p>Protobuf存储占用的空间很小而且你存的数越小，它占用的空间数越小。</p><p>数字和字符串都要转化成编码 去存储。</p><p>Int 32 = 296 【23个0】 100101000</p><p>前边的23个0全部是浪费的。</p><p>Varint有自己的编码规范，</p><h3 id="第一步-varint从末尾开始选取7位" tabindex="-1">第一步：Varint从末尾开始选取7位 <a class="header-anchor" href="#第一步-varint从末尾开始选取7位" aria-label="Permalink to &quot;第一步：Varint从末尾开始选取7位&quot;">​</a></h3><p><img src="'+t+'" alt="序列化-Varint-算法-第一步-补1-补0.png"></p><p><img src="'+r+'" alt="序列化-Varint-算法第二步-再次压缩.png"></p><p>负数存储很麻烦</p><p>根据原始的数生成一个二进制，去做一个反转，反转以后再取一个异或运算，所以最后生成的结果会远远大于它本身。</p><p>按照这种存储，负数反而更大。</p><h2 id="负数是-zigzag" tabindex="-1">负数是（zigzag） <a class="header-anchor" href="#负数是-zigzag" aria-label="Permalink to &quot;负数是（zigzag）&quot;">​</a></h2><p><img src="'+c+'" alt="序列化-Varint-负数的序列化.png"></p><p>Int 32 = -2 00000010</p><p>​ 11111101</p><p>​ 11111110</p><p>左移一位右边补0</p><p>右移31位，左边补1</p><p>111111100 ^ 11111111</p><p>00000011 （zigzag）</p><h2 id="protobuf存储" tabindex="-1">Protobuf存储 <a class="header-anchor" href="#protobuf存储" aria-label="Permalink to &quot;Protobuf存储&quot;">​</a></h2><p><img src="'+i+`" alt="序列化-Protobuf存储-算法.png"></p><p>Int 存的是32位数字</p><p>Tag、Length、Value</p><p>存储value时，</p><ol><li><pre><code> 首位不懂
</code></pre></li><li><pre><code> 剩余位减1取反
</code></pre></li></ol><p>Field number&lt;&lt;3 | wire type</p><p>Wire_type 0 int32 int64</p><p>Wire_type 1 18个字节 double</p><h2 id="thrift-avro-kryo-messagepack-fst" tabindex="-1">Thrift/Avro/Kryo/messagepack/FST <a class="header-anchor" href="#thrift-avro-kryo-messagepack-fst" aria-label="Permalink to &quot;Thrift/Avro/Kryo/messagepack/FST&quot;">​</a></h2><p>序列化选型的因素</p><ol><li><pre><code> 序列化的开销，序列化结果大小，
</code></pre></li><li><pre><code> 序列化的性能，算法，计算规则，计算的耗时。
</code></pre></li><li><pre><code> 跨语言、跨平台、兼容性
</code></pre></li><li><pre><code> 学习成本，这门技术的学习成本。
</code></pre></li></ol><p>二进制复杂对象的存储</p><h4 id="序列化的性能分析地址" tabindex="-1">序列化的性能分析地址： <a class="header-anchor" href="#序列化的性能分析地址" aria-label="Permalink to &quot;序列化的性能分析地址：&quot;">​</a></h4><p><a href="https://github.com/eishay/jvm-serializers/wiki" target="_blank" rel="noreferrer">https://github.com/eishay/jvm-serializers/wiki</a></p>`,157),d=[y];function u(b,h,m,g,v,F){return a(),n("div",null,d)}const k=s(E,[["render",u]]);export{D as __pageData,k as default};
