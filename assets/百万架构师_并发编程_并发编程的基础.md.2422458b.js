import{_ as s}from"./chunks/JavaGuide_并发编程_基础_线程_JMM_交互图.4d122015.js";import{_ as n,o as a,h as l,Q as p}from"./chunks/framework.da611722.js";const o="/assets/JavaGuide_并发编程_基础_CPU架构图解.85e4f99f.png",e="/assets/JavaGuide_并发编程_基础_Tomcat线程.7f7ab966.png",r="/assets/JavaGuide_并发编程_基础_Tomcat_BIO_线程.397404b5.png",t="/assets/JavaGuide_并发编程_基础_执行的链路节点.14d43a45.png",c="/assets/JavaGuide_并发编程_基础_线程执行状态图.7f1cb658.png",E="/assets/JavaGuide_并发编程_基础_线程_interrupt_方法.2d08290d.png",y="/assets/JavaGuide_并发编程_基础_线程_CPU高速缓存.be3d2436.png",i="/assets/JavaGuide_并发编程_基础_线程_Windows多级缓存.0a346279.png",u="/assets/JavaGuide_并发编程_基础_线程_缓存一致性问题.74d0d3fa.png",T=JSON.parse('{"title":"并发编程的基础 | JavaGuide","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://javaguide.net/百万架构师/并发编程/并发编程的基础.html"}],["meta",{"name":"keywords","content":"并发编程的基础 , JavaGuide , JavaGuide官网, Java面试指南, Java基础, 多线程, JVM, 虚拟机, 数据库, MySQL, Spring, Redis, MyBatis, 系统设计, 分布式, RPC, 高可用, 高并发"}],["meta",{"name":"og:url","content":"https://JavaGuide.net"}],["meta",{"name":"og:type","content":"website"}],["meta",{"name":"og:image","content":"https://javaguide.net/JavaGuide-og.png"}],["meta",{"name":"og:title","content":"并发编程的基础 | JavaGuide | Java面试指南 | JavaGuide官网"}],["meta",{"name":"og:description","content":"并发编程的基础 | JavaGuide | Java面试指南 | JavaGuide官网 | 「JavaGuide.net」一份涵盖大部分 Java 程序员所需要掌握的核心知识。准备 Java 面试，首选 JavaGuide.net ！"}],["meta",{"name":"twitter:site","content":"https://javaguide.net"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:creator","content":"nogeek.cn"}],["meta",{"name":"twitter:title","content":"并发编程的基础 | JavaGuide | Java面试指南 | JavaGuide官网"}],["meta",{"name":"twitter:description","content":"并发编程的基础 | JavaGuide | Java面试指南 | JavaGuide官网 | 「JavaGuide.net」一份涵盖大部分 Java 程序员所需要掌握的核心知识。准备 Java 面试，首选 JavaGuide.net ！"}],["meta",{"name":"twitter:image","content":"https://javaguide.net/JavaGuide-og.png"}],["meta",{"name":"sogou_site_verification","content":"fcAkazTXFd"}],["meta",{"name":"baidu-site-verification","content":"codeva-MXEPYsXKGk"}],["meta",{"name":"msvalidate.01","content":"9F2D57CFC59E8031212A166878638B15"}]]},"headers":[],"relativePath":"百万架构师/并发编程/并发编程的基础.md","filePath":"百万架构师/并发编程/并发编程的基础.md","lastUpdated":1741277271000}'),d={name:"百万架构师/并发编程/并发编程的基础.md"},b=p('<h2 id="课程目标" tabindex="-1">课程目标 <a class="header-anchor" href="#课程目标" aria-label="Permalink to &quot;课程目标&quot;">​</a></h2><p><strong>1. 多线程的发展历史</strong></p><p><strong>2. 线程的应用</strong></p><p><strong>3. 并发编程的基础</strong></p><p><strong>4. 线程安全的问题</strong></p><blockquote><p>特定的指令，计算机不会存储指令，把指令写下来，一次性读取指令，批处理。</p><p>然后我们需要把批处理进行隔离、保存它的进度。</p></blockquote><p>进程 —&gt; 线程</p><blockquote><p>单核CPU 只有可能会有一个进程去执行。</p></blockquote><h3 id="什么情况下应该使用多线程" tabindex="-1">什么情况下应该使用多线程 <a class="header-anchor" href="#什么情况下应该使用多线程" aria-label="Permalink to &quot;什么情况下应该使用多线程&quot;">​</a></h3><blockquote><p>线程出现的目的是什么？解决进程中多任务的实时性的问题？其实简单来说，就是解决“阻塞”的问题。阻塞的意思就是程序运行到某个函数或过程后等待某些事件发生而暂时停止 CPU 占用的情况，也就是说会使得 CPU 闲置。还有一些场景就是比如对于一个函数中的运算逻辑的性能问题，我们可以 <strong>通过多线程的技术，使得一个函数中的多个逻辑运算通过多线程技术达到一个并行执行，从而提高性能。</strong></p></blockquote><h6 id="cpu-架构图解" tabindex="-1">CPU 架构图解： <a class="header-anchor" href="#cpu-架构图解" aria-label="Permalink to &quot;CPU 架构图解：&quot;">​</a></h6><p><img src="'+o+'" alt="JavaGuide_并发编程_基础_CPU架构图解.png"></p><p>所以，多线程最终解决的就是“等待”的问题，所以简单总结的使用场景</p><ul><li><strong>通过并行计算提高程序执行性能</strong></li><li><strong>需要等待网络、I/O响应导致耗费大量的执行时间，可以采用异步线程的方式来减少阻塞</strong></li></ul><h3 id="tomcat-7-以前的-i-o-模型" tabindex="-1">Tomcat 7 以前的 I/O 模型 <a class="header-anchor" href="#tomcat-7-以前的-i-o-模型" aria-label="Permalink to &quot;Tomcat 7 以前的 I/O 模型&quot;">​</a></h3><p>多线程的应用场景</p><ul><li><strong>客户端阻塞</strong> 如果客户端只有一个线程，这个线程发起读取文件的操作必须等待 IO 流返回，线程（客户端）才能做其他的事</li><li><strong>线程级别阻塞（BIO） ：</strong> 客户端只有一个线程情况下，会导致整个客户端阻塞。那么我们可以使用多线程，一部分线程在等待 IO 操作返回的同时其他线程可以继续做其他的事。此时从客户端角度来说，客户端没有闲着。</li></ul><h5 id="tomcat-模型" tabindex="-1">tomcat 模型： <a class="header-anchor" href="#tomcat-模型" aria-label="Permalink to &quot;tomcat 模型：&quot;">​</a></h5><p><img src="'+e+'" alt="JavaGuide_并发编程_基础_Tomcat线程.png"></p><p>多个客户端都是阻塞的，我只有处理完一个请求才能接收下一个请求。然后客户端就会阻塞。所以 Tomcat 采用了多线程的技术。利用了多线程的技术实现了非阻塞。</p><p><img src="'+r+`" alt="JavaGuide_并发编程_基础_Tomcat_BIO_线程.png"></p><h2 id="如何应用多线程" tabindex="-1">如何应用多线程 <a class="header-anchor" href="#如何应用多线程" aria-label="Permalink to &quot;如何应用多线程&quot;">​</a></h2><p>在 JAVA 中有多个方式来实现多线程。继承 Thread 类、实现 Runable 接口、使用 ExecutorService 、Callable、Future 实现带返回结果的多线程。</p><ul><li><code>Thread </code></li><li><code>Runable </code></li><li><code>Callable</code> / <code>Future</code> 可以实现带返回值的线程</li></ul><h5 id="继承-thread-类创建线程" tabindex="-1">继承 Thread 类创建线程 <a class="header-anchor" href="#继承-thread-类创建线程" aria-label="Permalink to &quot;继承 Thread 类创建线程&quot;">​</a></h5><p>​ Thread 类本质上是实现了 Runable 接口的一个实例，代表一个线程的实例。启动线程的唯一方法就是通过 Thread 类的 start() 方法。 start() 方法是一个 native 方法。它会启动一个新线程，并执行 run() 方法。这种实现多线程很简单，通过自己的类直接 extends Thread ， 并重写 run() 方法，就可以启动新线程并执行自己定义的 run() 方法。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyThread</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Thread</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyThread</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyThread</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;MyThrea run().....&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyThread</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Thread</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyThread</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyThread</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;MyThrea run().....&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h5 id="实现-runable-接口创建线程" tabindex="-1">实现 Runable 接口创建线程 <a class="header-anchor" href="#实现-runable-接口创建线程" aria-label="Permalink to &quot;实现 Runable 接口创建线程&quot;">​</a></h5><p>​ 如果自己的类已经继承了另一个类，就无法直接继承 Thread，此时，可以实现 Runable 接口。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RunableDemo</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Runnable</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Thread</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RunableDemo</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Thread</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RunableDemo</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;[&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> Thread.</span><span style="color:#B392F0;">currentThread</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;]&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;runable My run().....&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RunableDemo</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Runnable</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Thread</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RunableDemo</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Thread</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RunableDemo</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;[&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> Thread.</span><span style="color:#6F42C1;">currentThread</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;]&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;runable My run().....&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[Thread</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]runable My </span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">().....</span></span>
<span class="line"><span style="color:#E1E4E8;">[Thread</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]runable My </span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">().....</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[Thread</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]runable My </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">().....</span></span>
<span class="line"><span style="color:#24292E;">[Thread</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]runable My </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">().....</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h6 id="错误的写法" tabindex="-1">错误的写法： <a class="header-anchor" href="#错误的写法" aria-label="Permalink to &quot;错误的写法：&quot;">​</a></h6><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RunableDemo</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Runnable</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">//    public static void main(String[] args) {</span></span>
<span class="line"><span style="color:#6A737D;">//        new Thread(new RunableDemo()).start();</span></span>
<span class="line"><span style="color:#6A737D;">//        new Thread(new RunableDemo()).start();</span></span>
<span class="line"><span style="color:#6A737D;">//    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RunableDemo</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RunableDemo</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;[&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> Thread.</span><span style="color:#B392F0;">currentThread</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;]&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;runable My run().....&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RunableDemo</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Runnable</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">//    public static void main(String[] args) {</span></span>
<span class="line"><span style="color:#6A737D;">//        new Thread(new RunableDemo()).start();</span></span>
<span class="line"><span style="color:#6A737D;">//        new Thread(new RunableDemo()).start();</span></span>
<span class="line"><span style="color:#6A737D;">//    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RunableDemo</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RunableDemo</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;[&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> Thread.</span><span style="color:#6F42C1;">currentThread</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;]&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;runable My run().....&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[main]runable My </span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">().....</span></span>
<span class="line"><span style="color:#E1E4E8;">[main]runable My </span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">().....</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[main]runable My </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">().....</span></span>
<span class="line"><span style="color:#24292E;">[main]runable My </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">().....</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h5 id="实现-callable-接口通过-futuretask-包装器来创建-thread-线程" tabindex="-1">实现 Callable 接口通过 FutureTask 包装器来创建 Thread 线程 <a class="header-anchor" href="#实现-callable-接口通过-futuretask-包装器来创建-thread-线程" aria-label="Permalink to &quot;实现 Callable 接口通过 FutureTask 包装器来创建 Thread 线程&quot;">​</a></h5><p>​ 有的时候，我们可能需要让异步执行的线程在执行完以后，提供一个返回值到当前的主线程，主线程需要这个值进行后续的逻辑处理，那么这个时候，就需要带返回值的线程了。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/***</span></span>
<span class="line"><span style="color:#6A737D;"> * 当你想要异步的线程执行你的某一个逻辑，那么在这个运行结束以后</span></span>
<span class="line"><span style="color:#6A737D;"> * 我想要拿到子线程运行的结果</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CallableDemo</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Callable</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">        ExecutorService executorService </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Executors.</span><span style="color:#B392F0;">newSingleThreadExecutor</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        CallableDemo callableDemo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CallableDemo</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        Future&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; future </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> executorService.</span><span style="color:#B392F0;">submit</span><span style="color:#E1E4E8;">(callableDemo);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">/***</span></span>
<span class="line"><span style="color:#6A737D;">         * 这里可以写其他的业务</span></span>
<span class="line"><span style="color:#6A737D;">         * 去写其他东西</span></span>
<span class="line"><span style="color:#6A737D;">         */</span></span>
<span class="line"><span style="color:#E1E4E8;">        String returnValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> future.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 这个地方在阻塞</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(returnValue);</span></span>
<span class="line"><span style="color:#E1E4E8;">        executorService.</span><span style="color:#B392F0;">shutdown</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;darain&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/***</span></span>
<span class="line"><span style="color:#6A737D;"> * 当你想要异步的线程执行你的某一个逻辑，那么在这个运行结束以后</span></span>
<span class="line"><span style="color:#6A737D;"> * 我想要拿到子线程运行的结果</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CallableDemo</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Callable</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        ExecutorService executorService </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Executors.</span><span style="color:#6F42C1;">newSingleThreadExecutor</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        CallableDemo callableDemo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CallableDemo</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        Future&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; future </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> executorService.</span><span style="color:#6F42C1;">submit</span><span style="color:#24292E;">(callableDemo);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">/***</span></span>
<span class="line"><span style="color:#6A737D;">         * 这里可以写其他的业务</span></span>
<span class="line"><span style="color:#6A737D;">         * 去写其他东西</span></span>
<span class="line"><span style="color:#6A737D;">         */</span></span>
<span class="line"><span style="color:#24292E;">        String returnValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> future.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 这个地方在阻塞</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(returnValue);</span></span>
<span class="line"><span style="color:#24292E;">        executorService.</span><span style="color:#6F42C1;">shutdown</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;darain&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h4 id="如何把多线程用得优雅" tabindex="-1">如何把多线程用得优雅 <a class="header-anchor" href="#如何把多线程用得优雅" aria-label="Permalink to &quot;如何把多线程用得优雅&quot;">​</a></h4><p>合理地利用异步操作，可以大大地提升程序的处理性能，下面这个案例，如何看过 zookeeper 源码的同学应该看到过。</p><p>通过阻塞队列以及多线程的方式，实现对请求的异步化处理，提升处理性能。</p><h5 id="模仿多个线程处理同一个请求" tabindex="-1">模仿多个线程处理同一个请求 <a class="header-anchor" href="#模仿多个线程处理同一个请求" aria-label="Permalink to &quot;模仿多个线程处理同一个请求&quot;">​</a></h5><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Data</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Request</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String name;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Data</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Request</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String name;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RequestProcessor</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">processorRequest</span><span style="color:#E1E4E8;">(Request </span><span style="color:#FFAB70;">requset</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RequestProcessor</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">processorRequest</span><span style="color:#24292E;">(Request </span><span style="color:#E36209;">requset</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RequiredArgsConstructor</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PrintProcessor</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Thread</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RequestProcessor</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    LinkedBlockingQueue&lt;</span><span style="color:#F97583;">Request</span><span style="color:#E1E4E8;">&gt; linkedBlockingQueue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> LinkedBlockingQueue&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> RequestProcessor nextProcess;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">processorRequest</span><span style="color:#E1E4E8;">(Request </span><span style="color:#FFAB70;">requset</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        linkedBlockingQueue.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(requset);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                Request requset </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> linkedBlockingQueue.</span><span style="color:#B392F0;">take</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;[&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> Thread.</span><span style="color:#B392F0;">currentThread</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;] &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;print Data:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> requset);</span></span>
<span class="line"><span style="color:#E1E4E8;">                nextProcess.</span><span style="color:#B392F0;">processorRequest</span><span style="color:#E1E4E8;">(requset);</span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (InterruptedException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                e.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RequiredArgsConstructor</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PrintProcessor</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Thread</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RequestProcessor</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    LinkedBlockingQueue&lt;</span><span style="color:#D73A49;">Request</span><span style="color:#24292E;">&gt; linkedBlockingQueue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedBlockingQueue&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> RequestProcessor nextProcess;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">processorRequest</span><span style="color:#24292E;">(Request </span><span style="color:#E36209;">requset</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        linkedBlockingQueue.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(requset);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                Request requset </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> linkedBlockingQueue.</span><span style="color:#6F42C1;">take</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;[&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> Thread.</span><span style="color:#6F42C1;">currentThread</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;] &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;print Data:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> requset);</span></span>
<span class="line"><span style="color:#24292E;">                nextProcess.</span><span style="color:#6F42C1;">processorRequest</span><span style="color:#24292E;">(requset);</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (InterruptedException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RequiredArgsConstructor</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SaveProcessor</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Thread</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RequestProcessor</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    LinkedBlockingQueue&lt;</span><span style="color:#F97583;">Request</span><span style="color:#E1E4E8;">&gt; linkedBlockingQueue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> LinkedBlockingQueue&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">processorRequest</span><span style="color:#E1E4E8;">(Request </span><span style="color:#FFAB70;">requset</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        linkedBlockingQueue.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(requset);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                Request requset </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> linkedBlockingQueue.</span><span style="color:#B392F0;">take</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;[&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> Thread.</span><span style="color:#B392F0;">currentThread</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;] &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;save data:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> requset);</span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (InterruptedException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                e.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RequiredArgsConstructor</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SaveProcessor</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Thread</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RequestProcessor</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    LinkedBlockingQueue&lt;</span><span style="color:#D73A49;">Request</span><span style="color:#24292E;">&gt; linkedBlockingQueue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedBlockingQueue&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">processorRequest</span><span style="color:#24292E;">(Request </span><span style="color:#E36209;">requset</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        linkedBlockingQueue.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(requset);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                Request requset </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> linkedBlockingQueue.</span><span style="color:#6F42C1;">take</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;[&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> Thread.</span><span style="color:#6F42C1;">currentThread</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;] &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;save data:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> requset);</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (InterruptedException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/***</span></span>
<span class="line"><span style="color:#6A737D;"> * 我们去处理的时候，用异步线程去处理。</span></span>
<span class="line"><span style="color:#6A737D;"> * 当我们把一个请求丢过来的时候，不是直接去处理，而是通过异步线程去处理。</span></span>
<span class="line"><span style="color:#6A737D;"> * zookeeper 就是类似的处理，一方面，你可以通过你的处理把职责划分开。</span></span>
<span class="line"><span style="color:#6A737D;"> * 一方面你可以通过异步线程的处理去提升你程序的性能</span></span>
<span class="line"><span style="color:#6A737D;"> * 合理地利用你 CPU 的资源</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * 这个和 zookeeper 里边非常像</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Demo</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> PrintProcessor printProcessor;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Demo</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        SaveProcessor saveProcessor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SaveProcessor</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        saveProcessor.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        printProcessor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PrintProcessor</span><span style="color:#E1E4E8;">(saveProcessor);</span></span>
<span class="line"><span style="color:#E1E4E8;">        printProcessor.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Request requset </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Request</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        requset.</span><span style="color:#B392F0;">setName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;darian&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Demo</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">doTest</span><span style="color:#E1E4E8;">(requset);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doTest</span><span style="color:#E1E4E8;">(Request </span><span style="color:#FFAB70;">request</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        printProcessor.</span><span style="color:#B392F0;">processorRequest</span><span style="color:#E1E4E8;">(request);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/***</span></span>
<span class="line"><span style="color:#6A737D;"> * 我们去处理的时候，用异步线程去处理。</span></span>
<span class="line"><span style="color:#6A737D;"> * 当我们把一个请求丢过来的时候，不是直接去处理，而是通过异步线程去处理。</span></span>
<span class="line"><span style="color:#6A737D;"> * zookeeper 就是类似的处理，一方面，你可以通过你的处理把职责划分开。</span></span>
<span class="line"><span style="color:#6A737D;"> * 一方面你可以通过异步线程的处理去提升你程序的性能</span></span>
<span class="line"><span style="color:#6A737D;"> * 合理地利用你 CPU 的资源</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * 这个和 zookeeper 里边非常像</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Demo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> PrintProcessor printProcessor;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Demo</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        SaveProcessor saveProcessor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SaveProcessor</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        saveProcessor.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        printProcessor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PrintProcessor</span><span style="color:#24292E;">(saveProcessor);</span></span>
<span class="line"><span style="color:#24292E;">        printProcessor.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Request requset </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Request</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        requset.</span><span style="color:#6F42C1;">setName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;darian&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Demo</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">doTest</span><span style="color:#24292E;">(requset);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doTest</span><span style="color:#24292E;">(Request </span><span style="color:#E36209;">request</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        printProcessor.</span><span style="color:#6F42C1;">processorRequest</span><span style="color:#24292E;">(request);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p><img src="`+t+'" alt="JavaGuide_并发编程_基础_执行的链路节点.png"></p><p>就像一个链表一样地，上一个对象的引用指向下一个对象。是不会乱序的。</p><h2 id="线程的基础知识" tabindex="-1">线程的基础知识 <a class="header-anchor" href="#线程的基础知识" aria-label="Permalink to &quot;线程的基础知识&quot;">​</a></h2><p>​ 线程作为操作系统调度的最小单元，并且能够让多线程同时执行，极大地提高了程序的性能，在多核的环境下的优势更加明显。但是在多线程的使用过程中如果对它的特性和原理不够了解的话，就容易造成各种问题。</p><h4 id="线程的状态-六种" tabindex="-1">线程的状态（六种） <a class="header-anchor" href="#线程的状态-六种" aria-label="Permalink to &quot;线程的状态（六种）&quot;">​</a></h4><p>JAVA 线程既然能够创建，那么也会销毁，所以线程是存在生命周期的。那么我们接下来从线程的生命周期开始去了解线程。</p><p>线程一共六种状态</p><p>（NEW、RUNNABLE、BLOCKED、WAITING、TIME_WAITING、TERMINATED）</p><h6 id="new" tabindex="-1">NEW <a class="header-anchor" href="#new" aria-label="Permalink to &quot;NEW&quot;">​</a></h6><p>​ 初始状态，线程被构建，但是还没有调用 <code>#start</code> 方法</p><h6 id="runnable" tabindex="-1">RUNNABLE <a class="header-anchor" href="#runnable" aria-label="Permalink to &quot;RUNNABLE&quot;">​</a></h6><p>​ 运行状态，JAVA 线程把操作系统中的就绪和运行两种状态统一称为 &quot;运行中&quot;</p><h6 id="blocked" tabindex="-1">BLOCKED <a class="header-anchor" href="#blocked" aria-label="Permalink to &quot;BLOCKED&quot;">​</a></h6><p>阻塞，表示线程进如等待状态，也就是线程因为某种原因放弃了 CPU 的使用权，阻塞也分为几种情况。</p><ul><li><p>等待阻塞 运行的线程调用了 <code>#wait</code> 方法，JVM 会把当前线程放到等待队列</p></li><li><p>同步阻塞 <code>synchronized</code> ，运行的线程在获取对象的同步锁时，若该同步锁被其他线程占用了，那么 JVM 会把当前的线程放入到锁池中。</p></li><li><p>其他阻塞 <code>sleep</code> / <code>join</code> 运行的线程执行 <code>Thread.sleep()</code> 或者 <code>t.join</code> 方法，或者发出了 I/O 请求时， JVM 会把当前线程设置为阻塞状态，当 sleep 结束、join 线程终止、io 处理完毕则线程恢复。</p><h5 id="waiting" tabindex="-1">WAITING <a class="header-anchor" href="#waiting" aria-label="Permalink to &quot;WAITING&quot;">​</a></h5></li></ul><p>等待 （waiting） 是我们的线程调用了一个 <code>#wait</code> 方法，实际上也会变成一个阻塞。就是我们没有办法继续去运行线程了。</p><h6 id="time-waiting" tabindex="-1">TIME_WAITING <a class="header-anchor" href="#time-waiting" aria-label="Permalink to &quot;TIME_WAITING&quot;">​</a></h6><p>​ 超时等待状态，超时以后自动返回</p><h6 id="terminated" tabindex="-1">TERMINATED <a class="header-anchor" href="#terminated" aria-label="Permalink to &quot;TERMINATED&quot;">​</a></h6><p>​ 终止状态，表示当前线程执行完毕</p><h4 id="线程运行状态图" tabindex="-1">线程运行状态图： <a class="header-anchor" href="#线程运行状态图" aria-label="Permalink to &quot;线程运行状态图：&quot;">​</a></h4><p><img src="'+c+`" alt="JavaGuide_并发编程_基础_线程执行状态图.png"></p><p>线程的运行状态有两种状态，</p><p>不存在就绪的状态，只是为了描述它的一个状态。</p><blockquote><p>打开 <code>Thread</code> 类，搜索 state 有哪些状态，它写得很清楚。</p></blockquote><p>当运行中的线程的时间片被 CPU 抢占的时候，那么它又会变成一个就绪状态。</p><p>线程执行完就是终止。</p><p><code>synchroninzed</code> 就是让这个线程获得锁。获得锁，就意味着，其他线程在调用这个方法的时候，它会阻塞。当我们获得锁的时候。比如说我们现在有两个线程。第一个 T1 线程访问同步代码块。同步代码块里面，首先它会获得一个锁。当 T2 线程进来以后，它是没有办法获得锁的。</p><h3 id="线程状态" tabindex="-1">线程状态： <a class="header-anchor" href="#线程状态" aria-label="Permalink to &quot;线程状态：&quot;">​</a></h3><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ThreadStatusDemo</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Thread</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    TimeUnit.SECONDS.</span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (InterruptedException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    e.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }, </span><span style="color:#9ECBFF;">&quot;timewaiting&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Thread</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">) {   </span><span style="color:#6A737D;">// 我们在一个循环里边获得一个锁</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">synchronized</span><span style="color:#E1E4E8;"> (ThreadStatusDemo.class) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#6A737D;">// 然后调用 wait()  方法，是因为它调用 wait 方法之前必须要获得锁</span></span>
<span class="line"><span style="color:#E1E4E8;">                        ThreadStatusDemo.class.</span><span style="color:#B392F0;">wait</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (InterruptedException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                        e.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }, </span><span style="color:#9ECBFF;">&quot;waiting&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Thread</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">blockDemo</span><span style="color:#E1E4E8;">(), </span><span style="color:#9ECBFF;">&quot;blockDemo-0&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Thread</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">blockDemo</span><span style="color:#E1E4E8;">(), </span><span style="color:#9ECBFF;">&quot;blockDemo-1&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">blockDemo</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Thread</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">synchronized</span><span style="color:#E1E4E8;"> (blockDemo.class) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">// 100 秒，一直让它阻塞</span></span>
<span class="line"><span style="color:#E1E4E8;">                        TimeUnit.SECONDS.</span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (InterruptedException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                        e.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ThreadStatusDemo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Thread</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                    TimeUnit.SECONDS.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (InterruptedException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                    e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }, </span><span style="color:#032F62;">&quot;timewaiting&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Thread</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) {   </span><span style="color:#6A737D;">// 我们在一个循环里边获得一个锁</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> (ThreadStatusDemo.class) {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#6A737D;">// 然后调用 wait()  方法，是因为它调用 wait 方法之前必须要获得锁</span></span>
<span class="line"><span style="color:#24292E;">                        ThreadStatusDemo.class.</span><span style="color:#6F42C1;">wait</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (InterruptedException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                        e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }, </span><span style="color:#032F62;">&quot;waiting&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Thread</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">blockDemo</span><span style="color:#24292E;">(), </span><span style="color:#032F62;">&quot;blockDemo-0&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Thread</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">blockDemo</span><span style="color:#24292E;">(), </span><span style="color:#032F62;">&quot;blockDemo-1&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">blockDemo</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Thread</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> (blockDemo.class) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 100 秒，一直让它阻塞</span></span>
<span class="line"><span style="color:#24292E;">                        TimeUnit.SECONDS.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (InterruptedException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                        e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br></div></div><h5 id="通过相应的命令显示线程状态" tabindex="-1">通过相应的命令显示线程状态： <a class="header-anchor" href="#通过相应的命令显示线程状态" aria-label="Permalink to &quot;通过相应的命令显示线程状态：&quot;">​</a></h5><ul><li>打开终端或者命令提示符，键入 <code>JPS</code> ,（JDK 1.5 提供的要给显示当前所有的 JAVA 进程 PID 的命令），可以获得相应进程的 PID</li><li>根据上一步骤获得的 PID，继续输入 <code>jstack </code> + pid (<code>jstack</code> 时 JAVA 虚拟机自带的一种堆栈跟踪工具。jstack 会打印出给定的 JAVA 进程 ID 或 core file 或远程调试服务的 java 堆栈信息)</li></ul><p>我们在写线程的时候，最好定义一个名称。我们去查看问题的时候，有利于我们去排查问题。</p><p>阻塞状态，<code>blocked</code> 当 <code>synchronized</code> 加锁的情况下，两个线程同时去访问一个方法，这个时候，就会存在 阻塞。</p><p><code>JPS</code> 是 JDK 1.5 以后，显示所有 JAVA 进程的命令。</p><p><code>jstack 30112</code> 可以查看线程的状态。</p><ul><li>blockDemo-0 获得锁，变成了一个 <code>TIMED_WAITING</code> 的状态。 <code>#sleep</code></li><li>blockDemo-1 没有拿到锁 （on object monitor）</li><li><code>TIMED_WAITING</code> <code>#sleep</code> 方法</li></ul><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&quot;DestroyJavaVM&quot;</span><span style="color:#E1E4E8;"> #</span><span style="color:#79B8FF;">18</span><span style="color:#E1E4E8;"> prio</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;"> os_prio</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> tid</span><span style="color:#F97583;">=0x</span><span style="color:#79B8FF;">0000000002a02800</span><span style="color:#E1E4E8;"> nid</span><span style="color:#F97583;">=0x</span><span style="color:#79B8FF;">697c</span><span style="color:#E1E4E8;"> waiting on condition [</span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">0000000000000000</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">   java.lang.Thread.State: RUNNABLE</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">&quot;blockDemo-1&quot;</span><span style="color:#E1E4E8;"> #</span><span style="color:#79B8FF;">17</span><span style="color:#E1E4E8;"> prio</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;"> os_prio</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> tid</span><span style="color:#F97583;">=0x</span><span style="color:#79B8FF;">0000000029066800</span><span style="color:#E1E4E8;"> nid</span><span style="color:#F97583;">=0x</span><span style="color:#79B8FF;">5f74</span><span style="color:#E1E4E8;"> waiting </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> monitor entry [</span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">0000000029bff000</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">   java.lang.Thread.State: </span><span style="color:#B392F0;">BLOCKED</span><span style="color:#E1E4E8;"> (on object </span><span style="color:#FFAB70;">monitor</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">&quot;blockDemo-0&quot;</span><span style="color:#E1E4E8;"> #</span><span style="color:#79B8FF;">15</span><span style="color:#E1E4E8;"> prio</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;"> os_prio</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> tid</span><span style="color:#F97583;">=0x</span><span style="color:#79B8FF;">0000000029065800</span><span style="color:#E1E4E8;"> nid</span><span style="color:#F97583;">=0x</span><span style="color:#79B8FF;">36f8</span><span style="color:#E1E4E8;"> waiting on condition [</span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">0000000029aff000</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">   java.lang.Thread.State: </span><span style="color:#B392F0;">TIMED_WAITING</span><span style="color:#E1E4E8;"> (sleeping)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">&quot;waiting&quot;</span><span style="color:#E1E4E8;"> #</span><span style="color:#79B8FF;">13</span><span style="color:#E1E4E8;"> prio</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;"> os_prio</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> tid</span><span style="color:#F97583;">=0x</span><span style="color:#79B8FF;">0000000029061000</span><span style="color:#E1E4E8;"> nid</span><span style="color:#F97583;">=0x</span><span style="color:#79B8FF;">7bd0</span><span style="color:#E1E4E8;"> in Object.</span><span style="color:#B392F0;">wait</span><span style="color:#E1E4E8;">() [</span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">00000000299fe000</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">   java.lang.Thread.State: </span><span style="color:#B392F0;">WAITING</span><span style="color:#E1E4E8;"> (on object </span><span style="color:#FFAB70;">monitor</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">&quot;timewaiting&quot;</span><span style="color:#E1E4E8;"> #</span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;"> prio</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;"> os_prio</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> tid</span><span style="color:#F97583;">=0x</span><span style="color:#79B8FF;">0000000029094800</span><span style="color:#E1E4E8;"> nid</span><span style="color:#F97583;">=0x</span><span style="color:#79B8FF;">6bd4</span><span style="color:#E1E4E8;"> waiting on condition [</span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">00000000298fe000</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">   java.lang.Thread.State: </span><span style="color:#B392F0;">TIMED_WAITING</span><span style="color:#E1E4E8;"> (sleeping)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">&quot;Service Thread&quot;</span><span style="color:#E1E4E8;"> #</span><span style="color:#79B8FF;">11</span><span style="color:#E1E4E8;"> daemon prio</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">9</span><span style="color:#E1E4E8;"> os_prio</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> tid</span><span style="color:#F97583;">=0x</span><span style="color:#79B8FF;">0000000027540800</span><span style="color:#E1E4E8;"> nid</span><span style="color:#F97583;">=0x</span><span style="color:#79B8FF;">8310</span><span style="color:#E1E4E8;"> runnable [</span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">0000000000000000</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">   java.lang.Thread.State: RUNNABLE</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">&quot;C1 CompilerThread3&quot;</span><span style="color:#E1E4E8;"> #</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;"> daemon prio</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">9</span><span style="color:#E1E4E8;"> os_prio</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> tid</span><span style="color:#F97583;">=0x</span><span style="color:#79B8FF;">000000002747e000</span><span style="color:#E1E4E8;"> nid</span><span style="color:#F97583;">=0x</span><span style="color:#79B8FF;">5344</span><span style="color:#E1E4E8;"> waiting on condition [</span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">0000000000000000</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">   java.lang.Thread.State: RUNNABLE</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">&quot;C2 CompilerThread2&quot;</span><span style="color:#E1E4E8;"> #</span><span style="color:#79B8FF;">9</span><span style="color:#E1E4E8;"> daemon prio</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">9</span><span style="color:#E1E4E8;"> os_prio</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> tid</span><span style="color:#F97583;">=0x</span><span style="color:#79B8FF;">000000002747d000</span><span style="color:#E1E4E8;"> nid</span><span style="color:#F97583;">=0x</span><span style="color:#79B8FF;">24c0</span><span style="color:#E1E4E8;"> waiting on condition [</span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">0000000000000000</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">   java.lang.Thread.State: RUNNABLE</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">&quot;C2 CompilerThread1&quot;</span><span style="color:#E1E4E8;"> #</span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;"> daemon prio</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">9</span><span style="color:#E1E4E8;"> os_prio</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> tid</span><span style="color:#F97583;">=0x</span><span style="color:#79B8FF;">0000000027475800</span><span style="color:#E1E4E8;"> nid</span><span style="color:#F97583;">=0x</span><span style="color:#79B8FF;">7c30</span><span style="color:#E1E4E8;"> waiting on condition [</span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">0000000000000000</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">   java.lang.Thread.State: RUNNABLE</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">&quot;C2 CompilerThread0&quot;</span><span style="color:#E1E4E8;"> #</span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;"> daemon prio</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">9</span><span style="color:#E1E4E8;"> os_prio</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> tid</span><span style="color:#F97583;">=0x</span><span style="color:#79B8FF;">0000000027474800</span><span style="color:#E1E4E8;"> nid</span><span style="color:#F97583;">=0x</span><span style="color:#79B8FF;">5c78</span><span style="color:#E1E4E8;"> waiting on condition [</span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">0000000000000000</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">   java.lang.Thread.State: RUNNABLE</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">&quot;Monitor Ctrl-Break&quot;</span><span style="color:#E1E4E8;"> #</span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;"> daemon prio</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;"> os_prio</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> tid</span><span style="color:#F97583;">=0x</span><span style="color:#79B8FF;">000000002745c800</span><span style="color:#E1E4E8;"> nid</span><span style="color:#F97583;">=0x</span><span style="color:#79B8FF;">de0</span><span style="color:#E1E4E8;"> runnable [</span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">00000000289fe000</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">   java.lang.Thread.State: RUNNABLE</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">&quot;Attach Listener&quot;</span><span style="color:#E1E4E8;"> #</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;"> daemon prio</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;"> os_prio</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> tid</span><span style="color:#F97583;">=0x</span><span style="color:#79B8FF;">00000000273ba000</span><span style="color:#E1E4E8;"> nid</span><span style="color:#F97583;">=0x</span><span style="color:#79B8FF;">3434</span><span style="color:#E1E4E8;"> waiting on condition [</span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">0000000000000000</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">   java.lang.Thread.State: RUNNABLE</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">&quot;Signal Dispatcher&quot;</span><span style="color:#E1E4E8;"> #</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> daemon prio</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">9</span><span style="color:#E1E4E8;"> os_prio</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> tid</span><span style="color:#F97583;">=0x</span><span style="color:#79B8FF;">0000000027411800</span><span style="color:#E1E4E8;"> nid</span><span style="color:#F97583;">=0x</span><span style="color:#79B8FF;">839c</span><span style="color:#E1E4E8;"> runnable [</span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">0000000000000000</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">   java.lang.Thread.State: RUNNABLE</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">&quot;Finalizer&quot;</span><span style="color:#E1E4E8;"> #</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> daemon prio</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;"> os_prio</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> tid</span><span style="color:#F97583;">=0x</span><span style="color:#79B8FF;">00000000273a3800</span><span style="color:#E1E4E8;"> nid</span><span style="color:#F97583;">=0x</span><span style="color:#79B8FF;">79bc</span><span style="color:#E1E4E8;"> in Object.</span><span style="color:#B392F0;">wait</span><span style="color:#E1E4E8;">() [</span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">00000000286fe000</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">   java.lang.Thread.State: </span><span style="color:#B392F0;">WAITING</span><span style="color:#E1E4E8;"> (on object </span><span style="color:#FFAB70;">monitor</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">&quot;Reference Handler&quot;</span><span style="color:#E1E4E8;"> #</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> daemon prio</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;"> os_prio</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> tid</span><span style="color:#F97583;">=0x</span><span style="color:#79B8FF;">0000000002afa000</span><span style="color:#E1E4E8;"> nid</span><span style="color:#F97583;">=0x</span><span style="color:#79B8FF;">4e7c</span><span style="color:#E1E4E8;"> in Object.</span><span style="color:#B392F0;">wait</span><span style="color:#E1E4E8;">() [</span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">00000000285ff000</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">   java.lang.Thread.State: </span><span style="color:#B392F0;">WAITING</span><span style="color:#E1E4E8;"> (on object </span><span style="color:#FFAB70;">monitor</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;DestroyJavaVM&quot;</span><span style="color:#24292E;"> #</span><span style="color:#005CC5;">18</span><span style="color:#24292E;"> prio</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> os_prio</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> tid</span><span style="color:#D73A49;">=0x</span><span style="color:#005CC5;">0000000002a02800</span><span style="color:#24292E;"> nid</span><span style="color:#D73A49;">=0x</span><span style="color:#005CC5;">697c</span><span style="color:#24292E;"> waiting on condition [</span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">0000000000000000</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">   java.lang.Thread.State: RUNNABLE</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">&quot;blockDemo-1&quot;</span><span style="color:#24292E;"> #</span><span style="color:#005CC5;">17</span><span style="color:#24292E;"> prio</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> os_prio</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> tid</span><span style="color:#D73A49;">=0x</span><span style="color:#005CC5;">0000000029066800</span><span style="color:#24292E;"> nid</span><span style="color:#D73A49;">=0x</span><span style="color:#005CC5;">5f74</span><span style="color:#24292E;"> waiting </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> monitor entry [</span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">0000000029bff000</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">   java.lang.Thread.State: </span><span style="color:#6F42C1;">BLOCKED</span><span style="color:#24292E;"> (on object </span><span style="color:#E36209;">monitor</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">&quot;blockDemo-0&quot;</span><span style="color:#24292E;"> #</span><span style="color:#005CC5;">15</span><span style="color:#24292E;"> prio</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> os_prio</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> tid</span><span style="color:#D73A49;">=0x</span><span style="color:#005CC5;">0000000029065800</span><span style="color:#24292E;"> nid</span><span style="color:#D73A49;">=0x</span><span style="color:#005CC5;">36f8</span><span style="color:#24292E;"> waiting on condition [</span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">0000000029aff000</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">   java.lang.Thread.State: </span><span style="color:#6F42C1;">TIMED_WAITING</span><span style="color:#24292E;"> (sleeping)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">&quot;waiting&quot;</span><span style="color:#24292E;"> #</span><span style="color:#005CC5;">13</span><span style="color:#24292E;"> prio</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> os_prio</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> tid</span><span style="color:#D73A49;">=0x</span><span style="color:#005CC5;">0000000029061000</span><span style="color:#24292E;"> nid</span><span style="color:#D73A49;">=0x</span><span style="color:#005CC5;">7bd0</span><span style="color:#24292E;"> in Object.</span><span style="color:#6F42C1;">wait</span><span style="color:#24292E;">() [</span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">00000000299fe000</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">   java.lang.Thread.State: </span><span style="color:#6F42C1;">WAITING</span><span style="color:#24292E;"> (on object </span><span style="color:#E36209;">monitor</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">&quot;timewaiting&quot;</span><span style="color:#24292E;"> #</span><span style="color:#005CC5;">12</span><span style="color:#24292E;"> prio</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> os_prio</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> tid</span><span style="color:#D73A49;">=0x</span><span style="color:#005CC5;">0000000029094800</span><span style="color:#24292E;"> nid</span><span style="color:#D73A49;">=0x</span><span style="color:#005CC5;">6bd4</span><span style="color:#24292E;"> waiting on condition [</span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">00000000298fe000</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">   java.lang.Thread.State: </span><span style="color:#6F42C1;">TIMED_WAITING</span><span style="color:#24292E;"> (sleeping)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">&quot;Service Thread&quot;</span><span style="color:#24292E;"> #</span><span style="color:#005CC5;">11</span><span style="color:#24292E;"> daemon prio</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">9</span><span style="color:#24292E;"> os_prio</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> tid</span><span style="color:#D73A49;">=0x</span><span style="color:#005CC5;">0000000027540800</span><span style="color:#24292E;"> nid</span><span style="color:#D73A49;">=0x</span><span style="color:#005CC5;">8310</span><span style="color:#24292E;"> runnable [</span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">0000000000000000</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">   java.lang.Thread.State: RUNNABLE</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">&quot;C1 CompilerThread3&quot;</span><span style="color:#24292E;"> #</span><span style="color:#005CC5;">10</span><span style="color:#24292E;"> daemon prio</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">9</span><span style="color:#24292E;"> os_prio</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> tid</span><span style="color:#D73A49;">=0x</span><span style="color:#005CC5;">000000002747e000</span><span style="color:#24292E;"> nid</span><span style="color:#D73A49;">=0x</span><span style="color:#005CC5;">5344</span><span style="color:#24292E;"> waiting on condition [</span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">0000000000000000</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">   java.lang.Thread.State: RUNNABLE</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">&quot;C2 CompilerThread2&quot;</span><span style="color:#24292E;"> #</span><span style="color:#005CC5;">9</span><span style="color:#24292E;"> daemon prio</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">9</span><span style="color:#24292E;"> os_prio</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> tid</span><span style="color:#D73A49;">=0x</span><span style="color:#005CC5;">000000002747d000</span><span style="color:#24292E;"> nid</span><span style="color:#D73A49;">=0x</span><span style="color:#005CC5;">24c0</span><span style="color:#24292E;"> waiting on condition [</span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">0000000000000000</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">   java.lang.Thread.State: RUNNABLE</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">&quot;C2 CompilerThread1&quot;</span><span style="color:#24292E;"> #</span><span style="color:#005CC5;">8</span><span style="color:#24292E;"> daemon prio</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">9</span><span style="color:#24292E;"> os_prio</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> tid</span><span style="color:#D73A49;">=0x</span><span style="color:#005CC5;">0000000027475800</span><span style="color:#24292E;"> nid</span><span style="color:#D73A49;">=0x</span><span style="color:#005CC5;">7c30</span><span style="color:#24292E;"> waiting on condition [</span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">0000000000000000</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">   java.lang.Thread.State: RUNNABLE</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">&quot;C2 CompilerThread0&quot;</span><span style="color:#24292E;"> #</span><span style="color:#005CC5;">7</span><span style="color:#24292E;"> daemon prio</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">9</span><span style="color:#24292E;"> os_prio</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> tid</span><span style="color:#D73A49;">=0x</span><span style="color:#005CC5;">0000000027474800</span><span style="color:#24292E;"> nid</span><span style="color:#D73A49;">=0x</span><span style="color:#005CC5;">5c78</span><span style="color:#24292E;"> waiting on condition [</span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">0000000000000000</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">   java.lang.Thread.State: RUNNABLE</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">&quot;Monitor Ctrl-Break&quot;</span><span style="color:#24292E;"> #</span><span style="color:#005CC5;">6</span><span style="color:#24292E;"> daemon prio</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> os_prio</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> tid</span><span style="color:#D73A49;">=0x</span><span style="color:#005CC5;">000000002745c800</span><span style="color:#24292E;"> nid</span><span style="color:#D73A49;">=0x</span><span style="color:#005CC5;">de0</span><span style="color:#24292E;"> runnable [</span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">00000000289fe000</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">   java.lang.Thread.State: RUNNABLE</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">&quot;Attach Listener&quot;</span><span style="color:#24292E;"> #</span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> daemon prio</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> os_prio</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> tid</span><span style="color:#D73A49;">=0x</span><span style="color:#005CC5;">00000000273ba000</span><span style="color:#24292E;"> nid</span><span style="color:#D73A49;">=0x</span><span style="color:#005CC5;">3434</span><span style="color:#24292E;"> waiting on condition [</span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">0000000000000000</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">   java.lang.Thread.State: RUNNABLE</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">&quot;Signal Dispatcher&quot;</span><span style="color:#24292E;"> #</span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> daemon prio</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">9</span><span style="color:#24292E;"> os_prio</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> tid</span><span style="color:#D73A49;">=0x</span><span style="color:#005CC5;">0000000027411800</span><span style="color:#24292E;"> nid</span><span style="color:#D73A49;">=0x</span><span style="color:#005CC5;">839c</span><span style="color:#24292E;"> runnable [</span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">0000000000000000</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">   java.lang.Thread.State: RUNNABLE</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">&quot;Finalizer&quot;</span><span style="color:#24292E;"> #</span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> daemon prio</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">8</span><span style="color:#24292E;"> os_prio</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> tid</span><span style="color:#D73A49;">=0x</span><span style="color:#005CC5;">00000000273a3800</span><span style="color:#24292E;"> nid</span><span style="color:#D73A49;">=0x</span><span style="color:#005CC5;">79bc</span><span style="color:#24292E;"> in Object.</span><span style="color:#6F42C1;">wait</span><span style="color:#24292E;">() [</span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">00000000286fe000</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">   java.lang.Thread.State: </span><span style="color:#6F42C1;">WAITING</span><span style="color:#24292E;"> (on object </span><span style="color:#E36209;">monitor</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">&quot;Reference Handler&quot;</span><span style="color:#24292E;"> #</span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> daemon prio</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">10</span><span style="color:#24292E;"> os_prio</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> tid</span><span style="color:#D73A49;">=0x</span><span style="color:#005CC5;">0000000002afa000</span><span style="color:#24292E;"> nid</span><span style="color:#D73A49;">=0x</span><span style="color:#005CC5;">4e7c</span><span style="color:#24292E;"> in Object.</span><span style="color:#6F42C1;">wait</span><span style="color:#24292E;">() [</span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">00000000285ff000</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">   java.lang.Thread.State: </span><span style="color:#6F42C1;">WAITING</span><span style="color:#24292E;"> (on object </span><span style="color:#E36209;">monitor</span><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div><p>我们很多时候，要多发现线程的信息。</p><h3 id="线程的启动和终止" tabindex="-1">线程的启动和终止 <a class="header-anchor" href="#线程的启动和终止" aria-label="Permalink to &quot;线程的启动和终止&quot;">​</a></h3><p>你怎么去启动一个线程？终止？</p><p><code>#start</code> native 方法，告诉 JVM 去启动一个线程。然后调用 <code>#run</code> 方法去执行。</p><p><s><code>#stop</code></s> 方法是不建议使用的。 <code>@Deprecated</code> ！！它就像我们在 Linux 系统中，<code>kill</code> 命令一样，就是我不知道我当前这个线程是不是还在运行，有没有还没处理完的。没有处理完的话，我强制关闭，就会出现一些数据问题，和一些不可预测地问题出现。 <s><code>#susped</code></s>， <s><code>#resume</code></s> 。</p><p>怎么样优雅的关闭？我们关闭 Tomcat 也好，关闭一些进程也好，我们都会提供一些优雅的方式去关闭。一些指令去执行，一般的中间件都会做一个操作，一般都会先去阻止后续的请求进来，然后等待正在运行的线程执行完以后优雅地停止掉。</p><h5 id="interrupt-优雅中断的方式。" tabindex="-1"><code>#interrupt</code> 优雅中断的方式。 <a class="header-anchor" href="#interrupt-优雅中断的方式。" aria-label="Permalink to &quot;\`#interrupt\` 优雅中断的方式。&quot;">​</a></h5><p>​ 当其他线程通过调用当前线程的 <code>#interrupt</code> 方法，表示向当前线程打个招呼，告诉他可以中断线程的执行了，至于什么时候中断，取决于当前线程自己。线程通过检查自身是或否被中断来进行响应，可以通过 <code>isIntrrupted()</code> 来判断是否被中断。</p><p>实现线程终止的逻辑：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InterruptDemo</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> InterruptedException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Thread thread </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Thread</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 我去判断是否中断这个线程</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">Thread.</span><span style="color:#B392F0;">currentThread</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">isInterrupted</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(i);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }, </span><span style="color:#9ECBFF;">&quot;interruptDemo&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        thread.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        TimeUnit.SECONDS.</span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 通过线程的 interrupt  设置标识为 true</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(thread.</span><span style="color:#B392F0;">isInterrupted</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        thread.</span><span style="color:#B392F0;">interrupt</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(thread.</span><span style="color:#B392F0;">isInterrupted</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InterruptDemo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> InterruptedException {</span></span>
<span class="line"><span style="color:#24292E;">        Thread thread </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Thread</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 我去判断是否中断这个线程</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">Thread.</span><span style="color:#6F42C1;">currentThread</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">isInterrupted</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">                i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(i);</span></span>
<span class="line"><span style="color:#24292E;">        }, </span><span style="color:#032F62;">&quot;interruptDemo&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        thread.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        TimeUnit.SECONDS.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 通过线程的 interrupt  设置标识为 true</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(thread.</span><span style="color:#6F42C1;">isInterrupted</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        thread.</span><span style="color:#6F42C1;">interrupt</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(thread.</span><span style="color:#6F42C1;">isInterrupted</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>这种通过表示为或者中断操作的方式能够使线程在终止时有机会去清理资源，而不是武断地将线程停止。因此更加安全和优雅。</p><h4 id="thread-interrupted" tabindex="-1">Thread.interrupted <a class="header-anchor" href="#thread-interrupted" aria-label="Permalink to &quot;Thread.interrupted&quot;">​</a></h4><p>通过 interrupt，设置了一个标识告诉线程可以终止运行了。线程中还提供了静态方法 <code>Thread.interrupted()</code> 对设置中断标识的线程复位。比如在线程，外边的线程调用 <code>thread.interrupt</code> 来设置中断标识，而在线程里边，又通过 <code>Thread.interrupted</code> 把线程的标识进行了复位。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">interrupt1</span><span style="color:#E1E4E8;">() throws InterruptedException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Thread thread </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Thread</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> interrupted </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Thread.</span><span style="color:#B392F0;">currentThread</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">isInterrupted</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (interrupted) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;before:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> interrupted);</span></span>
<span class="line"><span style="color:#E1E4E8;">                Thread.</span><span style="color:#B392F0;">interrupted</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 对线程进行复位，中断标识为 false</span></span>
<span class="line"><span style="color:#E1E4E8;">                System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;after:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> Thread.</span><span style="color:#B392F0;">currentThread</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">isInterrupted</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">    thread.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    TimeUnit.SECONDS.</span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    thread.</span><span style="color:#B392F0;">interrupt</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 设置中断标识为 true</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">interrupt1</span><span style="color:#24292E;">() throws InterruptedException {</span></span>
<span class="line"><span style="color:#24292E;">    Thread thread </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Thread</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> interrupted </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Thread.</span><span style="color:#6F42C1;">currentThread</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">isInterrupted</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (interrupted) {</span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;before:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> interrupted);</span></span>
<span class="line"><span style="color:#24292E;">                Thread.</span><span style="color:#6F42C1;">interrupted</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 对线程进行复位，中断标识为 false</span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;after:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> Thread.</span><span style="color:#6F42C1;">currentThread</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">isInterrupted</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">    thread.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    TimeUnit.SECONDS.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    thread.</span><span style="color:#6F42C1;">interrupt</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 设置中断标识为 true</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">before:</span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">after:</span><span style="color:#79B8FF;">false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">before:</span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">after:</span><span style="color:#005CC5;">false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="其他的线程复位" tabindex="-1">其他的线程复位 <a class="header-anchor" href="#其他的线程复位" aria-label="Permalink to &quot;其他的线程复位&quot;">​</a></h4><p>​ 除了通过 <code>Thread.interrupted</code> 方法对线程中断标识进行复位以外，还有一种被动复位的场景，就是对抛出 <code>interruptedException</code> 异常的方法，在 <code>interruptedException</code> 抛出之前， JVM 会先把线程的<code>中断标识位</code>清除，然后会抛出 <code>InterruptedException</code> 这个时候，如果调用 <code>#isInterrupted</code> 方法，将会返回 false。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">interrupt2</span><span style="color:#E1E4E8;">() throws InterruptedException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Thread thread </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Thread</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                Thread.</span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10000</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (InterruptedException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 抛出该异常，会将复位表示设置为 false</span></span>
<span class="line"><span style="color:#E1E4E8;">                e.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">    thread.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    thread.</span><span style="color:#B392F0;">interrupt</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 将复位表示设置为 true</span></span>
<span class="line"><span style="color:#E1E4E8;">    TimeUnit.SECONDS.</span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;before:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> thread.</span><span style="color:#B392F0;">isInterrupted</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    TimeUnit.SECONDS.</span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;after:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> thread.</span><span style="color:#B392F0;">isInterrupted</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">interrupt2</span><span style="color:#24292E;">() throws InterruptedException {</span></span>
<span class="line"><span style="color:#24292E;">    Thread thread </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Thread</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                Thread.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (InterruptedException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 抛出该异常，会将复位表示设置为 false</span></span>
<span class="line"><span style="color:#24292E;">                e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">    thread.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    thread.</span><span style="color:#6F42C1;">interrupt</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 将复位表示设置为 true</span></span>
<span class="line"><span style="color:#24292E;">    TimeUnit.SECONDS.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;before:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> thread.</span><span style="color:#6F42C1;">isInterrupted</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    TimeUnit.SECONDS.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;after:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> thread.</span><span style="color:#6F42C1;">isInterrupted</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p><img src="`+E+`" alt="JavaGuide_并发编程_基础_线程_interrupt_方法.png"></p><p>通过指令的方式，<code>volatile boolean isStop = false;</code> 这样的一个方式，也是可以的。通过内存的可见。</p><p><code>interrupt</code> 和我们设置标志变量的方式是一样的。</p><p><code>java.lang.Thread#interrupt</code></p><ul><li><code>java.lang.Thread#interrupt0</code> native 方法</li></ul><p>thread.cpp</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> Thread::</span><span style="color:#B392F0;">is_interrupted</span><span style="color:#E1E4E8;">(Thread</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">thread</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">clear_interrupted</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">debug_only</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">check_for_dangling_thread_pointer</span><span style="color:#E1E4E8;">(thread);)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Note:  If clear_interrupted==false, this simply fetches and</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// returns the value of the field osthread()-&gt;interrupted().</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">os::is_interrupted</span><span style="color:#E1E4E8;">(thread, clear_interrupted);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> Thread::</span><span style="color:#6F42C1;">is_interrupted</span><span style="color:#24292E;">(Thread</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">thread</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#E36209;">clear_interrupted</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">debug_only</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">check_for_dangling_thread_pointer</span><span style="color:#24292E;">(thread);)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Note:  If clear_interrupted==false, this simply fetches and</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// returns the value of the field osthread()-&gt;interrupted().</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">os::is_interrupted</span><span style="color:#24292E;">(thread, clear_interrupted);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>os_linux.cpp</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> os::</span><span style="color:#B392F0;">interrupt</span><span style="color:#E1E4E8;">(Thread</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">thread</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">assert</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Thread::current</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> thread </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> Threads_lock-&gt;</span><span style="color:#B392F0;">owned_by_self</span><span style="color:#E1E4E8;">(), </span><span style="color:#9ECBFF;">&quot;possibility of dangling Thread pointer&quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">    OSThread</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> osthread </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> thread-&gt;</span><span style="color:#B392F0;">osthread</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">osthread-&gt;</span><span style="color:#B392F0;">interrupted</span><span style="color:#E1E4E8;">()) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        osthread-&gt;</span><span style="color:#B392F0;">set_interrupted</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// More than one thread can get here with the same value of osthread,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// resulting in multiple notifications. We do, however, want the store </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// to interrupted() to be visible to other threads before we execute unpark(). </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">OrderAccess::fence</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">        ParkEvent </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> slp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> thread-&gt;_SleepEvent ; </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (slp </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">) slp-&gt;</span><span style="color:#B392F0;">unpark</span><span style="color:#E1E4E8;">() ;</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// For JSR166. Unpark even if interrupt status already was set </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (thread-&gt;</span><span style="color:#B392F0;">is_Java_thread</span><span style="color:#E1E4E8;">()) </span></span>
<span class="line"><span style="color:#E1E4E8;">        ((JavaThread</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">)thread)-&gt;</span><span style="color:#B392F0;">parker</span><span style="color:#E1E4E8;">()-&gt;</span><span style="color:#B392F0;">unpark</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    ParkEvent </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> ev </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> thread-&gt;_ParkEvent ;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (ev </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">) ev-&gt;</span><span style="color:#B392F0;">unpark</span><span style="color:#E1E4E8;">() ; </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> os::</span><span style="color:#6F42C1;">interrupt</span><span style="color:#24292E;">(Thread</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">thread</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">assert</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Thread::current</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> thread </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> Threads_lock-&gt;</span><span style="color:#6F42C1;">owned_by_self</span><span style="color:#24292E;">(), </span><span style="color:#032F62;">&quot;possibility of dangling Thread pointer&quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">    OSThread</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> osthread </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> thread-&gt;</span><span style="color:#6F42C1;">osthread</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">osthread-&gt;</span><span style="color:#6F42C1;">interrupted</span><span style="color:#24292E;">()) { </span></span>
<span class="line"><span style="color:#24292E;">        osthread-&gt;</span><span style="color:#6F42C1;">set_interrupted</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// More than one thread can get here with the same value of osthread,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// resulting in multiple notifications. We do, however, want the store </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// to interrupted() to be visible to other threads before we execute unpark(). </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">OrderAccess::fence</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">        ParkEvent </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> slp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> thread-&gt;_SleepEvent ; </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (slp </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">) slp-&gt;</span><span style="color:#6F42C1;">unpark</span><span style="color:#24292E;">() ;</span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// For JSR166. Unpark even if interrupt status already was set </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (thread-&gt;</span><span style="color:#6F42C1;">is_Java_thread</span><span style="color:#24292E;">()) </span></span>
<span class="line"><span style="color:#24292E;">        ((JavaThread</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">)thread)-&gt;</span><span style="color:#6F42C1;">parker</span><span style="color:#24292E;">()-&gt;</span><span style="color:#6F42C1;">unpark</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">    ParkEvent </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> ev </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> thread-&gt;_ParkEvent ;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (ev </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">) ev-&gt;</span><span style="color:#6F42C1;">unpark</span><span style="color:#24292E;">() ; </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>内存屏障 <code>fence()</code> ，让标志位改变，让所有线程看见，和 <code>volatile</code> 一个意思。</p><p><code>unpark()</code> 线程。</p><p>其实就是通过 <code>unpark</code> 去唤醒</p><p><code>Thread#interrupted</code> 是一个静态方法，对设置的中断标识的线程进行复位。</p><h4 id="线程的停止方法之-2" tabindex="-1">线程的停止方法之 2 <a class="header-anchor" href="#线程的停止方法之-2" aria-label="Permalink to &quot;线程的停止方法之 2&quot;">​</a></h4><p>​ 除了通过 <code>#interrupt</code> 标识去中断线程以外，我们可以通过 ：</p><p>​ 定义一个 <code>volatile</code> 修饰的成员变量，来控制线程的终止。这实际上是应用了 volatile 实现多线程之间的共享变量可见性这一特点来实现的。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ThreadStopDemo3</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 这种和 interrupted 方式是一样的。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">volatile</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> stop </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> InterruptedException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Thread thread </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Thread</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">stop) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#E1E4E8;">        thread.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;begin start thread&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        Thread.</span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        stop </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ThreadStopDemo3</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 这种和 interrupted 方式是一样的。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">volatile</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> stop </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> InterruptedException {</span></span>
<span class="line"><span style="color:#24292E;">        Thread thread </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Thread</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">stop) {</span></span>
<span class="line"><span style="color:#24292E;">                i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">        thread.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;begin start thread&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        Thread.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        stop </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="线程的安全性" tabindex="-1">线程的安全性 <a class="header-anchor" href="#线程的安全性" aria-label="Permalink to &quot;线程的安全性&quot;">​</a></h2><ul><li>可见性</li><li>原子性</li><li>有序性</li></ul><p>认识这三个问题。</p><h4 id="可见性" tabindex="-1">可见性 <a class="header-anchor" href="#可见性" aria-label="Permalink to &quot;可见性&quot;">​</a></h4><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/***</span></span>
<span class="line"><span style="color:#6A737D;"> * 可见性问题</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">VisableDemo</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 加上 volatile 之后，才可以停止。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">volatile</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> stop </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> InterruptedException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Thread thread </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Thread</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">stop) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#E1E4E8;">        thread.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        TimeUnit.SECONDS.</span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        stop </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/***</span></span>
<span class="line"><span style="color:#6A737D;"> * 可见性问题</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">VisableDemo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 加上 volatile 之后，才可以停止。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">volatile</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> stop </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> InterruptedException {</span></span>
<span class="line"><span style="color:#24292E;">        Thread thread </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Thread</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">stop) {</span></span>
<span class="line"><span style="color:#24292E;">                i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">        thread.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        TimeUnit.SECONDS.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        stop </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h4 id="原子性" tabindex="-1">原子性 <a class="header-anchor" href="#原子性" aria-label="Permalink to &quot;原子性&quot;">​</a></h4><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/***</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AutomicDemo</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> count </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> InterruptedException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Thread</span><span style="color:#E1E4E8;">(AutomicDemo</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">inc).</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        Thread.</span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">4000</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;y运行结果：&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> count);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// y运行结果：952    (&lt;= 1000)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">inc</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            Thread.</span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (InterruptedException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            e.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        count</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/***</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AutomicDemo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> count </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> InterruptedException {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Thread</span><span style="color:#24292E;">(AutomicDemo</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">inc).</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        Thread.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;y运行结果：&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> count);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// y运行结果：952    (&lt;= 1000)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">inc</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            Thread.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (InterruptedException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        count</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h4 id="有序性" tabindex="-1">有序性 <a class="header-anchor" href="#有序性" aria-label="Permalink to &quot;有序性&quot;">​</a></h4><p>没有办法演示。</p><p>有序性是指，程序执行的顺序和我们代码编写的顺序是不一致的。它会存在编译器的优化，和指令的优化。就是 CPU 执行过程中的一个指令重排的问题。</p><p>JAVA 内存模型中允许编译器和处理器去指令重排序来优化我们的执行。提升我们 CPU 的利用率。</p><p>它有一个原则：</p><p>在不影响我们代码语义的情况下会进行适当的重排序。</p><h3 id="cpu-的高速缓存" tabindex="-1">CPU 的高速缓存 <a class="header-anchor" href="#cpu-的高速缓存" aria-label="Permalink to &quot;CPU 的高速缓存&quot;">​</a></h3><p>JMM 的高速缓存</p><p>​ 线程是 CPU 调度的一个最小单元。线程设计的目的仍然是更充分地利用计算机处理的性能，但是绝大部分的运算任务不能只依靠处理器 “计算” 就能完成，处理器还需要和内存交互，比如读取运算数据、存储运算结果，这个 I/O 操作是很难消除的。而由于计算机的存储设备和处理器的运算速度差距非常大，所以现代计算机系统都会增加一层读写速度尽可能接近处理器运算速度的高速缓存来作为内存和处理器之间的缓冲：将运行需要使用的数据复制到缓存中，让运算能快速进行，当运算结束后再从缓存同步到内存中。</p><p>​ 运行时会先去内存中去加载，如果找不到就会去主内存中去加载。</p><h5 id="cpu-高速缓存图片" tabindex="-1">CPU 高速缓存图片： <a class="header-anchor" href="#cpu-高速缓存图片" aria-label="Permalink to &quot;CPU 高速缓存图片：&quot;">​</a></h5><p><img src="`+y+'" alt="JavaGuide_并发编程_基础_线程_CPU高速缓存.png"></p><p>寄存器：【Rages】</p><p>​ 高速缓存从下到上越接近 CPU 速度越快，同时容量也越小，现在大部分处理器都有二级或者三级缓存，从下到上依次是 <strong>L3 cache</strong>, <strong>L2 cache</strong>, <strong>L1 cache</strong> , 缓存又可以分为指令缓存和数据缓存，指令缓存用来缓存程序的代码，数据缓存用来缓存程序的数据。</p><ul><li><p>L1 Cache</p><p>​ 一级缓存，本地 core 的缓存，分为 32K 的数据缓存 L1d 和 32K 指令缓存 L1i ，访问 L1 需要 3cycles, 耗时大约 1ns.</p></li><li><p>L2 Cache</p><p>​ 二级缓存，本地 core 的缓存，被设计为 L1 缓存与共享 L3 缓存之间的缓冲，大小为 256K，访问 L2 需要 12 cycles，耗时 3ns</p></li><li><p>L3 Cache</p><p>​ 三级缓存，在同插槽的所有 core 共享 L3 缓存，分为多个 2M 的端，访问 L3 需要 38 cycles， 耗时大约 12ns</p></li></ul><p>L3 缓存主要是为了解决 CPU 操作的一个延时的问题。</p><p>如果缓存中拿不到，就会去主内存中去加载。</p><p><img src="'+i+'" alt="JavaGuide_并发编程_基础_线程_Windows多级缓存.png"></p><h5 id="缓存一致性问题" tabindex="-1">缓存一致性问题 <a class="header-anchor" href="#缓存一致性问题" aria-label="Permalink to &quot;缓存一致性问题&quot;">​</a></h5><p>​ CPU-0 读取竹村的数据，缓存到 CPU-0 的告诉缓存中，CPU-1 也做了同样的事情，而 CPU-1 把 count 的值修改成了 2，并且同步到 CPU-1 的告诉缓存，但是这个修改后的值，并没有写入到主存中，CPU-0 访问该字节，由于缓存没有更新。所以仍然是之前的值，就会导致数据不一致的问题。</p><p>​ 每个CPU 可以运行一个线程，那么多个 CPU 可以并行运行多个线程。多个线程同时去读取一个共享变量的时候，就会把这个数据都加载到它的高速缓存中来。每个 CPU 的高速缓存池对于其他 CPU 来说是不可见的。</p><p><img src="'+u+`" alt="JavaGuide_并发编程_基础_线程_缓存一致性问题.png"></p><p>​</p><p>​ 引发这个问题的原因是，多核心 CPU 存在指令并行执行，而各个 CPU 核心之间的数据不共享从而导致缓存一致性问题，为了解决这个问题，CPU 生产厂商提供了相应的解决方案。</p><p>CPU 层面提供了两种锁</p><ul><li>总线锁</li><li>缓存锁</li></ul><h4 id="总线锁" tabindex="-1">总线锁 <a class="header-anchor" href="#总线锁" aria-label="Permalink to &quot;总线锁&quot;">​</a></h4><p>​ 锁总线，当我们其中一个 CPU 在执行一个线程，去访问一个数据的时候，会往总线上发起一个 <strong>LOCK</strong> 信号，那么其他的CPU 再次去请求这个相同的数据进行操作的时候，它就会被阻塞，意味着这个总线锁就是一个排他锁。对于整个 CPU 来说，它是一个排他的，对于 多个 CPU 来说，它会导致性能问题。多核的目的是做负载，提升运行效率。单核的提升达到瓶颈。加了一个总线锁，就又让它串行执行。所以 P6 系列以后的处理器，出现了另外一种方式，就是缓存锁。</p><h4 id="缓存锁" tabindex="-1">缓存锁 <a class="header-anchor" href="#缓存锁" aria-label="Permalink to &quot;缓存锁&quot;">​</a></h4><p>​ 如果缓存在处理器缓存中的内存区域在 LOCK 操作期间被锁定，当它执行操作回写内存的时候，处理不再总线上声明 LOCK 信号，而是修改内部的缓存地址，然后通过缓存一致性机制来保证操作的原子性，因为缓存一致性会阻止同时修改两个以上处理器缓存的内存区域的数据，当其他处理器会写已经被锁定的缓存行的数据时会导致该缓存行无效。</p><p>​ 所以如果声明了 CPU 的锁机制，会生成一个 LOCK 指令，会产生两个作用。</p><ol><li>LOCK 前缀指令会引起处理器缓存器缓存会写到内存，在 P6 以后的处理器中，LOCK 信号一般不锁总线，而是锁缓存</li><li>一个处理器的缓存会写到内存，会导致其他处理器的缓存无效。</li></ol><h4 id="缓存一致性协议" tabindex="-1">缓存一致性协议 <a class="header-anchor" href="#缓存一致性协议" aria-label="Permalink to &quot;缓存一致性协议&quot;">​</a></h4><p>处理器上有一套完整的协议，来保证 Cache 的一致性，比较经典的就是 MESI 协议。</p><p>一般都是 <strong>MESI</strong> 的协议。它的方法是在 CPU 中保存了一个标记位，这个标记位有四种状态。</p><ul><li><p>M(modify)</p><p>​ 修改缓存，当前 CPU 缓存已经被修改，表示已经和内存中的数据不一致了</p></li><li><p>I(invalid)</p><p>​ 失效缓存，说明 CPU 的缓存已经不能使用了</p></li><li><p>E(exclusive)</p><p>​ 独占缓存，当前的 CPU 的缓存和内存中的数据保持一致，而且其他处理器没有缓存该数据</p></li><li><p>S(shared)</p><p>​ 共享缓存，数据和内存中数据一致，并且该数据存在多个 CPU 缓存中。</p><p>​</p><pre><code>  每个 Core 的 Cache 控制器不仅知道自己的读写操作，也监听其他的 Cache 的读写操作，嗅探（snooping）协议。
</code></pre></li></ul><h5 id="cpu-的读取会遵循几个原则" tabindex="-1">CPU 的读取会遵循几个原则： <a class="header-anchor" href="#cpu-的读取会遵循几个原则" aria-label="Permalink to &quot;CPU 的读取会遵循几个原则：&quot;">​</a></h5><ol><li>如果缓存的状态是 <strong>I</strong> ，那么就从内存中读取，否则直接从缓存中读取</li><li>如果缓存处于 <strong>M</strong> 或者 <strong>E</strong> 的 CPU 嗅探到其他 CPU 有读的操作，就把自己的缓存写入到内存，并把自己的状态设置为 <strong>S</strong></li><li>只有缓存状态是 <strong>M</strong> 或 <strong>E</strong> 的时候，CPU 才可以修改缓存中的数据，修改后，缓存状态变为 MC。</li></ol><p>(怎么去通知缓存失效不需要去关心的)</p><h4 id="cpu-的优化执行" tabindex="-1">CPU 的优化执行 <a class="header-anchor" href="#cpu-的优化执行" aria-label="Permalink to &quot;CPU 的优化执行&quot;">​</a></h4><p>​ 除了增加高速缓存以外，为了更充分地利用处理器内部的运算单元，处理器会对输入的代码进行乱序执行优化，处理器会在计算之后将乱序执行的结果重组，保证该结果与顺序执行的结果一致，但并不保证程序中各个语句计算的先后顺序与输入代码中的顺序一致，这个是处理器的优化执行。还有一个就是编程语言的编译器也会有类似的优化，比如说做指令重拍来提升性能。</p><p>​ 它会保证一个约束：保证我的语义不会变化。（你可以重排序，你可以对指令乱序执行，但是语义不能发生变化。）CPU 访问主内存的时候，可能是一个交叉访问的。对于同一个 CPU 访问内存是可控的。但是对于多处理器来说，我的访问顺序是可变的，不确定的。乱序执行，有些指令执行的时间比较长，CPU 会比较占用时间。CPU 会进行优化的执行，通过我们编译器的优化，还有乱序访问。CPU 访问主内存的顺序，对多个 CPU 来说是不可控的。</p><h3 id="并发编程的问题" tabindex="-1">并发编程的问题 <a class="header-anchor" href="#并发编程的问题" aria-label="Permalink to &quot;并发编程的问题&quot;">​</a></h3><p>​ 原子性，可见性，有序性都是抽象的概念。他们的核心本质就是“缓存一致性问题”和“处理器优化的指令重排序问题”。</p><ul><li>可见性问题？</li><li>乱序执行（内存乱序访问？）</li></ul><p>​ 缓存一致性，就会导致可见性问题。处理器的乱序执行会导致原子性的问题，指令重拍会导致有序性问题，为了解决这些问题，所以在 JVM 中引入了 JMM 的概念。</p><h4 id="jmm-应用层面-内存模型" tabindex="-1">JMM (应用层面) 内存模型 <a class="header-anchor" href="#jmm-应用层面-内存模型" aria-label="Permalink to &quot;JMM  (应用层面) 内存模型&quot;">​</a></h4><p>​ 内存模型定义了共享内存系统中多线程程序读写操作行为的规范，来屏蔽各种硬件和操作系统的内存访问差异，来实现 JAVA 程序在各个平台下都能达成一致的内存访问效果。JAVA 内存模型的主要目标是定义程序中各个变量的访问规则，也就是在虚拟机中将变量存储到内存以及从内存中取出变量（这里的变量指的是共享变量，也就是实例对象、静态字段、数组对象等存储在堆内存中的变量。而对于局部变量这类的，属于线程私有，不会被共享）这类的底层细节。通过这些规则来规范对内存的读写操作，从而保证指令执行的正确性。</p><p>​ 它与处理器有关、与缓存有关、与并发有关、与编译器有关。他解决了 CPU 多级缓存、处理器优化、指令重拍等导致的内存访问问题，保证了并发场景下的可见性、原子性和有序性。内存模型解决并发问题主要采取两种方式：限制处理器优化和使用内存屏障。</p><p>​ JAVA 内存模型定义了线程和内存的交互方式，在 JMM 抽象模型中，分为主内存、工作内存。主内存是所有线程共享的，工作内存是每个线程独有的。线程对变量的所有操作（读取、赋值）都必须在工作内存中进行，不能直接读写主内存中的变量。并且不同的线程之间无法访问对方工作内存中的变量，线程的变量值的传递都需要通过主内存来完成。他们三者的交互关系如下：</p><h5 id="jmm-交互图" tabindex="-1">JMM 交互图 <a class="header-anchor" href="#jmm-交互图" aria-label="Permalink to &quot;JMM 交互图&quot;">​</a></h5><p><img src="`+s+'" alt="JavaGuide_并发编程_基础_线程_JMM_交互图.png"></p><p>​ 所以总的来说，<strong>JMM</strong> 是一种规范，目的是解决由于多线程通过共享内存进行通讯是，存在的本地内存数据不一致、编译器会对代码指令重排序、处理器会对代码乱序执行等带来的问题。目的是保证并发编程场景中的原子性、可见性和有序性。</p>',179),F=[b];function m(h,C,D,A,g,v){return a(),l("div",null,F)}const k=n(d,[["render",m]]);export{T as __pageData,k as default};
