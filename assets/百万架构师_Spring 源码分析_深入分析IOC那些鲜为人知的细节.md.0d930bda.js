import{_ as s}from"./chunks/dispatcherServlet图.c8bb58dd.js";import{_ as n,o as a,h as l,Q as p}from"./chunks/framework.da611722.js";const u=JSON.parse('{"title":"深入分析IOC那些鲜为人知的细节 | JavaGuide","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://javaguide.net/百万架构师/Spring 源码分析/深入分析IOC那些鲜为人知的细节.html"}],["meta",{"name":"keywords","content":"深入分析IOC那些鲜为人知的细节 , JavaGuide , JavaGuide官网, Java面试指南, Java基础, 多线程, JVM, 虚拟机, 数据库, MySQL, Spring, Redis, MyBatis, 系统设计, 分布式, RPC, 高可用, 高并发"}],["meta",{"name":"og:url","content":"https://JavaGuide.net"}],["meta",{"name":"og:type","content":"website"}],["meta",{"name":"og:image","content":"https://javaguide.net/JavaGuide-og.png"}],["meta",{"name":"og:title","content":"深入分析IOC那些鲜为人知的细节 | JavaGuide | Java面试指南 | JavaGuide官网"}],["meta",{"name":"og:description","content":"深入分析IOC那些鲜为人知的细节 | JavaGuide | Java面试指南 | JavaGuide官网 | 「JavaGuide.net」一份涵盖大部分 Java 程序员所需要掌握的核心知识。准备 Java 面试，首选 JavaGuide.net ！"}],["meta",{"name":"twitter:site","content":"https://javaguide.net"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:creator","content":"nogeek.cn"}],["meta",{"name":"twitter:title","content":"深入分析IOC那些鲜为人知的细节 | JavaGuide | Java面试指南 | JavaGuide官网"}],["meta",{"name":"twitter:description","content":"深入分析IOC那些鲜为人知的细节 | JavaGuide | Java面试指南 | JavaGuide官网 | 「JavaGuide.net」一份涵盖大部分 Java 程序员所需要掌握的核心知识。准备 Java 面试，首选 JavaGuide.net ！"}],["meta",{"name":"twitter:image","content":"https://javaguide.net/JavaGuide-og.png"}],["meta",{"name":"sogou_site_verification","content":"fcAkazTXFd"}],["meta",{"name":"baidu-site-verification","content":"codeva-MXEPYsXKGk"}],["meta",{"name":"msvalidate.01","content":"9F2D57CFC59E8031212A166878638B15"}]]},"headers":[],"relativePath":"百万架构师/Spring 源码分析/深入分析IOC那些鲜为人知的细节.md","filePath":"百万架构师/Spring 源码分析/深入分析IOC那些鲜为人知的细节.md","lastUpdated":1741277271000}'),e={name:"百万架构师/Spring 源码分析/深入分析IOC那些鲜为人知的细节.md"},o=p('<h2 id="dispatcherservlet-图片" tabindex="-1">dispatcherServlet 图片 <a class="header-anchor" href="#dispatcherservlet-图片" aria-label="Permalink to &quot;dispatcherServlet 图片&quot;">​</a></h2><p><img src="'+s+`" alt="dispatcherServlet图.png"></p><h5 id="abstractapplicationcontext" tabindex="-1"><code>AbstractApplicationContext</code> <a class="header-anchor" href="#abstractapplicationcontext" aria-label="Permalink to &quot;\`AbstractApplicationContext\`&quot;">​</a></h5><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//初始化所有剩余的单例Bean</span></span>
<span class="line"><span style="color:#6A737D;">// 当工厂初始化完成的时候，</span></span>
<span class="line"><span style="color:#B392F0;">finishBeanFactoryInitialization</span><span style="color:#E1E4E8;">(beanFactory);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//初始化所有剩余的单例Bean</span></span>
<span class="line"><span style="color:#6A737D;">// 当工厂初始化完成的时候，</span></span>
<span class="line"><span style="color:#6F42C1;">finishBeanFactoryInitialization</span><span style="color:#24292E;">(beanFactory);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>它在判断它是不是“延时加载”，如果不是“延时加载”才给它注入</p><h5 id="defaultlistablebeanfactory-加载。" tabindex="-1"><code>DefaultListableBeanFactory</code> 加载。 <a class="header-anchor" href="#defaultlistablebeanfactory-加载。" aria-label="Permalink to &quot;\`DefaultListableBeanFactory\` 加载。&quot;">​</a></h5><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//对配置lazy-init属性单态Bean的预实例化</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">preInstantiateSingletons</span><span style="color:#E1E4E8;">() throws BeansException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.logger.</span><span style="color:#B392F0;">isDebugEnabled</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.logger.</span><span style="color:#B392F0;">debug</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Pre-instantiating singletons in &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Iterate over a copy to allow for init methods which in turn register new bean definitions.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// While this may not be part of the regular factory bootstrap, it does otherwise work fine.</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; beanNames </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.beanDefinitionNames);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Trigger initialization of all non-lazy singleton beans...</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (String beanName </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> beanNames) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//获取指定名称的Bean定义</span></span>
<span class="line"><span style="color:#E1E4E8;">        RootBeanDefinition bd </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getMergedLocalBeanDefinition</span><span style="color:#E1E4E8;">(beanName);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//Bean不是抽象的，是单态模式的，且lazy-init属性配置为false</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">bd.</span><span style="color:#B392F0;">isAbstract</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> bd.</span><span style="color:#B392F0;">isSingleton</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">bd.</span><span style="color:#B392F0;">isLazyInit</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//如果指定名称的bean是创建容器的Bean</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isFactoryBean</span><span style="color:#E1E4E8;">(beanName)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">//FACTORY_BEAN_PREFIX=”&amp;”，当Bean名称前面加”&amp;”符号</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">//时，获取的是产生容器对象本身，而不是容器产生的Bean.</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">//调用getBean方法，触发容器对Bean实例化和依赖注入过程</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> FactoryBean&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; factory </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (FactoryBean</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;">) </span><span style="color:#B392F0;">getBean</span><span style="color:#E1E4E8;">(FACTORY_BEAN_PREFIX </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> beanName);</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">//标识是否需要预实例化</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> isEagerInit;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (System.</span><span style="color:#B392F0;">getSecurityManager</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> factory </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> SmartFactoryBean) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">//一个匿名内部类</span></span>
<span class="line"><span style="color:#E1E4E8;">                    isEagerInit </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> AccessController.</span><span style="color:#B392F0;">doPrivileged</span><span style="color:#E1E4E8;">((PrivilegedAction</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Boolean</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">) () </span><span style="color:#F97583;">-&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">                                                                ((SmartFactoryBean</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;">) factory).</span><span style="color:#B392F0;">isEagerInit</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">                                                                </span><span style="color:#B392F0;">getAccessControlContext</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    isEagerInit </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (factory </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> SmartFactoryBean </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">                                   ((SmartFactoryBean</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;">) factory).</span><span style="color:#B392F0;">isEagerInit</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (isEagerInit) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">//调用getBean方法，触发容器对Bean实例化和依赖注入过程</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#B392F0;">getBean</span><span style="color:#E1E4E8;">(beanName);</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">getBean</span><span style="color:#E1E4E8;">(beanName);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Trigger post-initialization callback for all applicable beans...</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (String beanName </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> beanNames) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Object singletonInstance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getSingleton</span><span style="color:#E1E4E8;">(beanName);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (singletonInstance </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> SmartInitializingSingleton) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> SmartInitializingSingleton smartSingleton </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (SmartInitializingSingleton) singletonInstance;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (System.</span><span style="color:#B392F0;">getSecurityManager</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                AccessController.</span><span style="color:#B392F0;">doPrivileged</span><span style="color:#E1E4E8;">((PrivilegedAction</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Object</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">) () </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    smartSingleton.</span><span style="color:#B392F0;">afterSingletonsInstantiated</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                }, </span><span style="color:#B392F0;">getAccessControlContext</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                smartSingleton.</span><span style="color:#B392F0;">afterSingletonsInstantiated</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//对配置lazy-init属性单态Bean的预实例化</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">preInstantiateSingletons</span><span style="color:#24292E;">() throws BeansException {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.logger.</span><span style="color:#6F42C1;">isDebugEnabled</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.logger.</span><span style="color:#6F42C1;">debug</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Pre-instantiating singletons in &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Iterate over a copy to allow for init methods which in turn register new bean definitions.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// While this may not be part of the regular factory bootstrap, it does otherwise work fine.</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; beanNames </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.beanDefinitionNames);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Trigger initialization of all non-lazy singleton beans...</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (String beanName </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> beanNames) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//获取指定名称的Bean定义</span></span>
<span class="line"><span style="color:#24292E;">        RootBeanDefinition bd </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getMergedLocalBeanDefinition</span><span style="color:#24292E;">(beanName);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//Bean不是抽象的，是单态模式的，且lazy-init属性配置为false</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">bd.</span><span style="color:#6F42C1;">isAbstract</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> bd.</span><span style="color:#6F42C1;">isSingleton</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">bd.</span><span style="color:#6F42C1;">isLazyInit</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//如果指定名称的bean是创建容器的Bean</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isFactoryBean</span><span style="color:#24292E;">(beanName)) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">//FACTORY_BEAN_PREFIX=”&amp;”，当Bean名称前面加”&amp;”符号</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">//时，获取的是产生容器对象本身，而不是容器产生的Bean.</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">//调用getBean方法，触发容器对Bean实例化和依赖注入过程</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> FactoryBean&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; factory </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (FactoryBean</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;">) </span><span style="color:#6F42C1;">getBean</span><span style="color:#24292E;">(FACTORY_BEAN_PREFIX </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> beanName);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">//标识是否需要预实例化</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> isEagerInit;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (System.</span><span style="color:#6F42C1;">getSecurityManager</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> factory </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> SmartFactoryBean) {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">//一个匿名内部类</span></span>
<span class="line"><span style="color:#24292E;">                    isEagerInit </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> AccessController.</span><span style="color:#6F42C1;">doPrivileged</span><span style="color:#24292E;">((PrivilegedAction</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Boolean</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">) () </span><span style="color:#D73A49;">-&gt;</span></span>
<span class="line"><span style="color:#24292E;">                                                                ((SmartFactoryBean</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;">) factory).</span><span style="color:#6F42C1;">isEagerInit</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">                                                                </span><span style="color:#6F42C1;">getAccessControlContext</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                    isEagerInit </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (factory </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> SmartFactoryBean </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">                                   ((SmartFactoryBean</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;">) factory).</span><span style="color:#6F42C1;">isEagerInit</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (isEagerInit) {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">//调用getBean方法，触发容器对Bean实例化和依赖注入过程</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6F42C1;">getBean</span><span style="color:#24292E;">(beanName);</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">getBean</span><span style="color:#24292E;">(beanName);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Trigger post-initialization callback for all applicable beans...</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (String beanName </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> beanNames) {</span></span>
<span class="line"><span style="color:#24292E;">        Object singletonInstance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getSingleton</span><span style="color:#24292E;">(beanName);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (singletonInstance </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> SmartInitializingSingleton) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> SmartInitializingSingleton smartSingleton </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (SmartInitializingSingleton) singletonInstance;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (System.</span><span style="color:#6F42C1;">getSecurityManager</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                AccessController.</span><span style="color:#6F42C1;">doPrivileged</span><span style="color:#24292E;">((PrivilegedAction</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Object</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">) () </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                    smartSingleton.</span><span style="color:#6F42C1;">afterSingletonsInstantiated</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                }, </span><span style="color:#6F42C1;">getAccessControlContext</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                smartSingleton.</span><span style="color:#6F42C1;">afterSingletonsInstantiated</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br></div></div><h5 id="beanfactory-主语是-factory-顶层接口" tabindex="-1">BeanFactory：主语是 Factory（顶层接口） <a class="header-anchor" href="#beanfactory-主语是-factory-顶层接口" aria-label="Permalink to &quot;BeanFactory：主语是 Factory（顶层接口）&quot;">​</a></h5><p>​ 具体的工厂会通过 <strong>策略模式</strong> 去实现，不同的工厂生产不同的产品</p><h5 id="factorybean-主语是-bean-所有工厂生产的产品都要实现此接口" tabindex="-1">FactoryBean：主语是 Bean，所有工厂生产的产品都要实现此接口 <a class="header-anchor" href="#factorybean-主语是-bean-所有工厂生产的产品都要实现此接口" aria-label="Permalink to &quot;FactoryBean：主语是 Bean，所有工厂生产的产品都要实现此接口&quot;">​</a></h5><p>​ 简言之：<strong>BeanFactory</strong> 生产出来的产品都是 <strong>FactoryBean</strong> 。</p><p>​ <strong>大部分情况下，BeanFactory 本身也是通过 BeanFactory 创建的，也就是说 BeanFactory 也是一个 FactoryBean。</strong></p><blockquote><p>​ 策略模式是我们预设好的创建者模型，我们选用什么样的策略是由用户来决定，这个工厂本身我是不知道调用什么方法去创建对象的。我要根据用户的配置去把这个配置搞出来，这个工厂本身是一个单例，所以 BeanFactory 也是要由 BeanFactory 来创建的。</p></blockquote><h4 id="beanfactory-和-factorybean" tabindex="-1">BeanFactory 和 FactoryBean <a class="header-anchor" href="#beanfactory-和-factorybean" aria-label="Permalink to &quot;BeanFactory 和 FactoryBean&quot;">​</a></h4><p><strong>&quot;&amp;&quot;</strong> 区别 BeanFactory。</p><p><code>Beanname</code> 和 <code>Instance</code>。</p><p><code>key</code> 和 <code>value</code>。</p><p>Java在中 所有东西都是对象，Spring 中所有都是 FactoryBean。 <strong>异曲同工</strong> 。</p><p>Spring 中的 Bean 初始化之前和之后，都会有一个处理。</p><p>它有一个配置文件，来决定它用哪个工厂。</p>`,20),t=[o];function r(c,i,E,y,b,m){return a(),l("div",null,t)}const d=n(e,[["render",r]]);export{u as __pageData,d as default};
