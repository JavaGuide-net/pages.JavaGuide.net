import{_ as s}from"./chunks/JavaGuide_并发编程_基础_线程_JMM_交互图.4d122015.js";import{_ as a,o as n,h as l,Q as p}from"./chunks/framework.da611722.js";const o="/assets/JavaGuide_并发编程_原理1_线程的模型.4fe20e2c.png",e="/assets/JavaGuide_并发编程_原理1_hisdis放在jre中.dd238368.png",c="/assets/JavaGuide_并发编程_原理1_ide配置.a8a53eab.png",r="/assets/JavaGuide_并发编程_原理1_线程执行顺序.b7bb7734.png",t="/assets/JavaGuide_并发编程_原理1_store_barrier_模型.e24f99c6.png",i="/assets/JavaGuide_并发编程_原理1_load_barrier_模型.a3869099.png",E="/assets/JavaGuide_并发编程_原理1_full_barrier_模型.d5369864.png",y="/assets/JavaGuide_并发编程_原理1_storeload_内存屏障.5795e960.png",f=JSON.parse('{"title":"并发编程的原理(一) | JavaGuide","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://JavaGuide.net/百万架构师/并发编程/并发编程的原理(一).html"}],["meta",{"name":"keywords","content":"并发编程的原理(一) , JavaGuide , JavaGuide官网, Java面试指南, Java基础, 多线程, JVM, 虚拟机, 数据库, MySQL, Spring, Redis, MyBatis, 系统设计, 分布式, RPC, 高可用, 高并发"}],["meta",{"name":"og:url","content":"https://JavaGuide.net"}],["meta",{"name":"og:type","content":"website"}],["meta",{"name":"og:image","content":"https://JavaGuide.net/og.png"}],["meta",{"name":"og:title","content":"并发编程的原理(一) | JavaGuide | Java面试指南 | JavaGuide官网"}],["meta",{"name":"og:description","content":"并发编程的原理(一) | JavaGuide | Java面试指南 | JavaGuide官网 | 「JavaGuide.net」一份涵盖大部分 Java 程序员所需要掌握的核心知识。准备 Java 面试，首选 JavaGuide.net ！"}],["meta",{"name":"twitter:site","content":"https://JavaGuide.net"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:creator","content":"nogeek.cn"}],["meta",{"name":"twitter:title","content":"并发编程的原理(一) | JavaGuide | Java面试指南 | JavaGuide官网"}],["meta",{"name":"twitter:description","content":"并发编程的原理(一) | JavaGuide | Java面试指南 | JavaGuide官网 | 「JavaGuide.net」一份涵盖大部分 Java 程序员所需要掌握的核心知识。准备 Java 面试，首选 JavaGuide.net ！"}],["meta",{"name":"twitter:image","content":"https://JavaGuide.net/og.png"}],["meta",{"name":"sogou_site_verification","content":"fcAkazTXFd"}],["meta",{"name":"baidu-site-verification","content":"codeva-MXEPYsXKGk"}],["meta",{"name":"msvalidate.01","content":"9F2D57CFC59E8031212A166878638B15"}]]},"headers":[],"relativePath":"百万架构师/并发编程/并发编程的原理(一).md","filePath":"百万架构师/并发编程/并发编程的原理(一).md","lastUpdated":1741277271000}'),d={name:"百万架构师/并发编程/并发编程的原理(一).md"},b=p('<h1 id="并发编程的原理" tabindex="-1">并发编程的原理 <a class="header-anchor" href="#并发编程的原理" aria-label="Permalink to &quot;并发编程的原理&quot;">​</a></h1><h4 id="课程目标" tabindex="-1">课程目标 <a class="header-anchor" href="#课程目标" aria-label="Permalink to &quot;课程目标&quot;">​</a></h4><ol><li><strong>JMM</strong> 内存模型</li><li><strong>JMM</strong> 如何解决原子性、可见性、有序性的问题</li><li><code>Synchronized</code> 和 <code>volatile</code></li></ol><h3 id="回顾" tabindex="-1">回顾 <a class="header-anchor" href="#回顾" aria-label="Permalink to &quot;回顾&quot;">​</a></h3><p>​ 线程的转换，线程的停止。基于 CPU 的内存模型，硬件架构，高速缓存，和它的一些线程的并行执行所带来的问题，在 CPU 层面上提供了解决方案，比如说 总线锁、缓存锁的方式解决这些问题。</p><p>​ 在 JAVA 层面，统一了规范，JMM 定义了共享内存系统中多个线程同时访问内存时的规范。去屏蔽硬件和操作系统的内存访问的差异。它和 JVM 是有点类似的。 JVM 的出现是为了提供了一个在操作系统层面上一个虚拟机，他可以真正地实现一次编译，到处运行的效果。JMM 也是类似的道理，他最终实现了 JAVA 程序在各个平台下都能够实现一致的内存访问效果。</p><p><img src="'+s+'" alt="JavaGuide_并发编程_基础_线程_JMM_交互图.png"></p><p>​ 在 JMM 定义了 8 种内存的操作。</p><p>​ lock 就是锁定，锁定我们的主内存的变量，保证他变成一个线程的独占状态，这个是一个开放式的指令。</p><p><img src="'+o+'" alt="JavaGuide_并发编程_原理1_线程的模型.png"></p><p>​ CPU 层面的解决方式是总线锁和缓存锁。</p><p>​ 而 JMM 是在我们的 CPU 和我们的应用层之间抽象的一个模型，去解决底层的一个问题。</p><ul><li>多线程通讯的两种方式 <ul><li>共享内存</li><li>消息传递</li></ul></li></ul><p>​ 内存中存在一个共享变量的值，当多个线程访问主内存的时候，一个线程 1 先去改变工作内存从 1 -&gt; 2，主内存从 1 变成 2， 线程2 去访问的时候，就变成 2 。这是消息共享内存的传递方式。</p><p>​ 消息传递，就是 <code>wait</code> / <code>notify</code> ，这种就是线程中间没有公共状态，线程之间去发送消息，它都是通过一种阻塞、等待、释放锁的方式，去唤醒去改变共享变量的通讯的数据。</p><p>在 JMM 模型中会有一个问题，什么时候同步到主内存，什么时候同步到另一个线程的内存。</p><ul><li><p>可见性问题？</p></li><li><p>原子性问题</p><p>​ 当我们线程同时去访问共享变量的时候，当两个线程同时运行，同时去对这个值去 <code>+ 1</code> ，最后结果 不对，导致的原子性问题。</p></li><li><p>有序性？</p><p>​ 包含编译器和 CPU 层面的有序性的问题。</p></li></ul><p>​ JMM 是基于我们物理模型的抽象。抽象内存模型在硬件抽象模型里有它的映射关系。</p><ul><li><code>主内存</code> JVM 层面的堆内存，堆内存是从我们的物理内存里边去划分一块内存去分配给这个进程。物理内存的一部分。</li><li><code>工作内存</code> CPU 的高速缓存和 CPU 的寄存器。</li></ul><p>CPU 层面上有解决方案，但是 JMM 怎么去解决。</p><h5 id="有序性问题原因" tabindex="-1">有序性问题原因 <a class="header-anchor" href="#有序性问题原因" aria-label="Permalink to &quot;有序性问题原因&quot;">​</a></h5><ul><li>编译器的指令重排序</li><li>处理器的指令重排序</li><li>内存系统的重排序，（内存访问的顺序性，多线程访问内存是没有顺序的。）</li></ul><h2 id="jmm怎么解决原子性、可见性、有序性的问题" tabindex="-1">JMM怎么解决原子性、可见性、有序性的问题？ <a class="header-anchor" href="#jmm怎么解决原子性、可见性、有序性的问题" aria-label="Permalink to &quot;JMM怎么解决原子性、可见性、有序性的问题？&quot;">​</a></h2><p>​ 在 JAVA 中提供了一系列和并发处理相关的关键字，比如 <code>volatile</code> 、 <code>Synchronized</code> 、 <code>final</code> 、 <code>j.u.c</code> 等，这些就是Java内存模型封装了底层的实现后提供给开发人员使用的关键字，在开发多线程代码的时候，我们可以 <code>synchronized</code> 等关键词来控制并发，使得我们不需要关心底层的编译器优化、缓存一致性的问题了，所以在JAVA 内存模型中，除了定义了一套规范，还提供了开放的指令在底层进行封装后，提供给开发人员使用。</p><ul><li><code>Synchronized</code> 是“万能”的。</li></ul><h3 id="原子性保障" tabindex="-1">原子性保障 <a class="header-anchor" href="#原子性保障" aria-label="Permalink to &quot;原子性保障&quot;">​</a></h3><p>​ 在 <strong>JAVA</strong> 中提供了两个高级的字节码指令 <code>monitorenter</code> 和 <code>monitorexit</code> ，在Java中对应的 <code>Synchronized</code> 来保证代码块内的操作是原子的。</p><h3 id="可见性" tabindex="-1">可见性 <a class="header-anchor" href="#可见性" aria-label="Permalink to &quot;可见性&quot;">​</a></h3><p>​ <strong>JAVA</strong> 中的 <code>volatile</code> 关键字提供了一个功能，那就是被其修饰的变量在被修改后可以立即同步到主内存，被其修饰的变量在每次使用之前都从主内存刷新。因此，可以使用volatile来保证多线程操作时变量的可见性。除了<code>volatile</code>，JAVA中的 <code>synchronized</code> 和 <code>final</code> 两个关键字也可以实现可见性。</p><h3 id="有序性" tabindex="-1">有序性 <a class="header-anchor" href="#有序性" aria-label="Permalink to &quot;有序性&quot;">​</a></h3><p>​ 在 JAVA 中，可以使用 <code>synchronized</code> 和 <code>volatile</code> 来保证多线程之间操作的有序性。实现方式有所区别： <code>volatile</code> 关键字会禁止指令重排。 <code>synchronized</code> 关键字保证同一时刻只允许一条线程操作。</p><h3 id="volatile如何保证可见性" tabindex="-1">volatile如何保证可见性 <a class="header-anchor" href="#volatile如何保证可见性" aria-label="Permalink to &quot;volatile如何保证可见性&quot;">​</a></h3><p>volatile 是一个轻量级的锁。（解决可见性、防止指令重排）</p><blockquote><p>下载hsdis工具 ，<a href="https://sourceforge.net/projects/fcml/files/fcml-1.1.1/hsdis-1.1.1-win32-amd64.zip/download" target="_blank" rel="noreferrer">https://sourceforge.net/projects/fcml/files/fcml-1.1.1/hsdis-1.1.1-win32-amd64.zip/download</a></p><p>解压后存放到jre目录的server路径下</p><blockquote><p><img src="'+e+'" alt="JavaGuide_并发编程_原理1_hisdis放在jre中.png"></p><blockquote><p>JDK 下边的 JRE 就行</p></blockquote><p><img src="'+c+`" alt="JavaGuide_并发编程_原理1_ide配置.png"></p></blockquote><p>然后跑main函数，跑main函数之前，加入如下虚拟机参数：</p><p>-server -Xcomp -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly -XX:CompileCommand=compileonly,*App.getInstance（替换成实际运行的代码）</p></blockquote><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ThreadDemo</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">volatile</span><span style="color:#E1E4E8;"> ThreadDemo instance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> ThreadDemo </span><span style="color:#B392F0;">getInstance</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (instance</span><span style="color:#F97583;">==</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">            instance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ThreadDemo</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> instance;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        ThreadDemo.</span><span style="color:#B392F0;">getInstance</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ThreadDemo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">volatile</span><span style="color:#24292E;"> ThreadDemo instance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> ThreadDemo </span><span style="color:#6F42C1;">getInstance</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (instance</span><span style="color:#D73A49;">==</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">            instance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ThreadDemo</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> instance;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        ThreadDemo.</span><span style="color:#6F42C1;">getInstance</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">0000000002bf6098</span><span style="color:#E1E4E8;">: lock add dword ptr [rsp],</span><span style="color:#FDAEB7;font-style:italic;">0h</span><span style="color:#E1E4E8;">  ;</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">putstatic instance</span></span>
<span class="line"><span style="color:#E1E4E8;">                                                ; </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> com.darian.multiplethread2.ThreadDemo::getInstance@</span><span style="color:#79B8FF;">13</span><span style="color:#E1E4E8;"> (line </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">0000000002bf6098</span><span style="color:#24292E;">: lock add dword ptr [rsp],</span><span style="color:#B31D28;font-style:italic;">0h</span><span style="color:#24292E;">  ;</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">putstatic instance</span></span>
<span class="line"><span style="color:#24292E;">                                                ; </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> com.darian.multiplethread2.ThreadDemo::getInstance@</span><span style="color:#005CC5;">13</span><span style="color:#24292E;"> (line </span><span style="color:#005CC5;">8</span><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>没有加 <code>volatile</code> ，是没有锁的。</p><p>​ <code>volatile</code> 变量修饰的共享变量，在进行写操作的时候会多出一个 <code>lock</code> 前缀的汇编指令，这个指令在前面我们讲解CPU高速缓存的时候提到过，会触发总线锁或者缓存锁，通过缓存一致性协议来解决可见性问题对于声明 <code>volatile</code> 的变量进行写操作，JVM就会向处理器发送一条Lock前缀的指令，把这个变量所在的缓存行的数据写回到系统内存，再根据我们前面提到过的 <strong>MESI</strong> 的缓存一致性协议，来保证多 CPU 下的各个高速缓存中的数据的一致性。</p><h3 id="volatile防止指令重排序" tabindex="-1">volatile防止指令重排序 <a class="header-anchor" href="#volatile防止指令重排序" aria-label="Permalink to &quot;volatile防止指令重排序&quot;">​</a></h3><p>​ 指令重排的目的是最大化的提高CPU利用率以及性能，CPU的乱序执行优化在单核时代并不影响正确性，但是在多核时代的多线程能够在不同的核心上实现真正的并行，一旦线程之间共享数据，就可能会出现一些不可预料的问题指令重排序必须要遵循的原则是，不影响代码执行的最终结果，编译器和处理器不会改变存在数据依赖关系的两个操作的执行顺序，(这里所说的数据依赖性仅仅是针对单个处理器中执行的指令和单个线程中执行的操作.)这个语义，实际上就是 <code>as-if-serial</code> 语义，不管怎么重排序，单线程程序的执行结果不会改变，编译器、处理器都必须遵守 <code>as-if-serial</code> 语义。</p><ul><li><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">VolatileDemo</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// as-if-serial</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> c </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> b;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">VolatileDemo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// as-if-serial</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> b;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>​ 编译器在编译的时候，以及 CPU 在执行的时候，都会存在相应的指令执行，所以在编译以后，可能会对我们的指令做一个顺序的调整。可能会先执行 <code>b = 3</code> ，在去执行 <code>a = 2</code> ，最终会满足不会影响最终的运行结果。最终的结果是不会变的。</p></li></ul><h3 id="多核心多线程下的指令重排影响" tabindex="-1">多核心多线程下的指令重排影响 <a class="header-anchor" href="#多核心多线程下的指令重排影响" aria-label="Permalink to &quot;多核心多线程下的指令重排影响&quot;">​</a></h3><h3 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h3><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">VolatileSortDemo</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, y </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> InterruptedException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Thread t1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Thread</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            x </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> b;</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#E1E4E8;">        Thread t2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Thread</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            y </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a;</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#E1E4E8;">        t1.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        t2.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        t1.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        t2.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;[x=&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;]</span><span style="color:#79B8FF;">\\t</span><span style="color:#9ECBFF;">[y=&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> y </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;]&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">VolatileSortDemo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, y </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> InterruptedException {</span></span>
<span class="line"><span style="color:#24292E;">        Thread t1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Thread</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> b;</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">        Thread t2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Thread</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            y </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a;</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">        t1.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        t2.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        t1.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        t2.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;[x=&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;]</span><span style="color:#005CC5;">\\t</span><span style="color:#032F62;">[y=&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> y </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;]&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>​ 如果不考虑编译器重排序和缓存可见性问题，上面这段代码可能会出现的结果是</p><ul><li>x=0,y=1;</li><li>x=1,y=0;</li><li>x=1,y=1</li></ul><p>​ 这三种结果，既可能是先后执行t1/t2，也可能是反过来，还可能是t1/t2交替执行，但是这段代码的执行结果也有可能是 <code>x=0,y=0</code> 。这就是在乱序执行的情况下会导致的一种结果。因为线程t1内部的两行代码之间不存在数据依赖，因此可以把 <code>x=b</code> 乱序到 <code>a=1</code> 之前。同时线程 t2 中的 <code>y=a</code> 也可以早于t1中的 <code>a=1</code> 执行，那么他们的执行顺序可能是。</p><p><img src="`+r+'" alt="JavaGuide_并发编程_原理1_线程执行顺序.png"></p><ul><li>t1: x=b</li><li>t2:b=1</li><li>t2:y=a</li><li>t1:a=1</li></ul><p>​ 所以从上面的例子来看，重排序会导致可见性问题。但是重排序带来的问题的严重性远远大于可见性，因为并不是所有指令都是简单的读或写，比如 <strong>DCL</strong> 的部分初始化问题。所以单纯地解决可见性问题还不够，还需要解决处理器重排序问题。</p><h5 id="dcl-的问题" tabindex="-1">DCL 的问题 <a class="header-anchor" href="#dcl-的问题" aria-label="Permalink to &quot;DCL 的问题&quot;">​</a></h5><ul><li>可能会存在指令重排序的半内存、不完整对象的问题。</li></ul><p>提供了一种解决方式叫内存屏障。</p><p><code>#join</code> 底层是基于 <code>wait</code> <code>notify</code> 来实现的。</p><h3 id="内存屏障" tabindex="-1">内存屏障 <a class="header-anchor" href="#内存屏障" aria-label="Permalink to &quot;内存屏障&quot;">​</a></h3><p>​ 内存屏障需要解决我们前面提到的两个问题。一个是编译器的优化乱序和CPU的执行乱序，我们可以分别使用 <code>优化屏障</code> 和 <code>内存屏障</code> 这两个机制来解决。</p><ul><li>优化屏障</li><li>内存屏障</li></ul><h4 id="从cpu层面来了解一下什么是内存屏障" tabindex="-1">从CPU层面来了解一下什么是内存屏障 <a class="header-anchor" href="#从cpu层面来了解一下什么是内存屏障" aria-label="Permalink to &quot;从CPU层面来了解一下什么是内存屏障&quot;">​</a></h4><p>​ CPU的乱序执行，本质还是，由于在多CPU的机器上，每个CPU都存在cache，当一个特定数据第一次被特定一个CPU获取时，由于在该CPU缓存中不存在，就会从内存中去获取，被加载到CPU高速缓存中后就能从缓存中快速访问。当某个CPU进行写操作时，它必须确保其他的CPU已经将这个数据从他们的缓存中移除，这样才能让其他CPU 安全地修改数据。显然，存在多个cache时，我们必须通过一个cache一致性协议来避免数据不一致的问题，而这个通讯的过程就可能导致乱序访问的问题，也就是运行时的内存乱序访问。现在的CPU架构都提供了内存屏障功能，在 <strong>x86的cpu</strong> 中，实现了相应的内存屏障写屏障(store barrier)、读屏障(load barrier)和 全屏障(Full Barrier)，主要的作用是。</p><ul><li>防止指令之间的重排序</li><li>保证数据的可见性</li></ul><p>编译的时候会进行优化，执行的时候乱序执行。</p><blockquote><p><code>instance = new ThreadDemo();</code> 分为 3 个操作，分配内存，指向地址，初始化。</p></blockquote><h5 id="store-barrier" tabindex="-1">store barrier <a class="header-anchor" href="#store-barrier" aria-label="Permalink to &quot;store barrier&quot;">​</a></h5><p><img src="'+t+'" alt="JavaGuide_并发编程_原理1_store_barrier_模型.png"></p><p>​ <code>store barrier</code>称为 写屏障 ，相当于 <code>storestore barrier</code> , 强制所有在 storestore 内存屏障之前的所有指令先执行。都要在该内存屏障之前执行，并发送缓存失效的信号。所有在 <code>storestore barrier</code> 指令之后的store 指令，都必须在 <code>storestore barrier</code> 屏障之前的指令执行完后再被执行。也就是禁止了写屏障前后的指令进行重排序，使得所有 <code>store barrier</code> 之前发生的内存更新都是可见的（这里的可见指的是修改值可见以及操作结果可见）</p><h5 id="load-barrier" tabindex="-1">load barrier <a class="header-anchor" href="#load-barrier" aria-label="Permalink to &quot;load barrier&quot;">​</a></h5><p><img src="'+i+'" alt="JavaGuide_并发编程_原理1_load_barrier_模型.png"></p><p>​ <code>load barrier</code>称为读屏障，相当于<code>loadload barrier</code> ，强制所有在 <code>load barrier</code> 读屏障之后的 <code>load</code> 指令，都在 <code>load barrier</code> 屏障之后执行。也就是禁止对 <code>load barrier</code> 读屏障前后的 <code>load</code> 指令进行重排序， 配合 <code>store barrier</code> ，使得所有 <code>store barrier</code> 之前发生的内存更新，对 <code>load barrier</code> 之后的 <code>load</code> 操作是可见的。</p><h5 id="full-barrier" tabindex="-1">Full barrier <a class="header-anchor" href="#full-barrier" aria-label="Permalink to &quot;Full barrier&quot;">​</a></h5><p><img src="'+E+`" alt="JavaGuide_并发编程_原理1_full_barrier_模型.png"></p><p>​ <code>full barrier</code> 称为全屏障，相当于 <code>storeload</code> ，是一个全能型的屏障，因为它同时具备前面两种屏障的效果。强制了所有在 <code>storeload barrier</code> 之前的 <code>store/load</code> 指令，都在该屏障之前被执行，所有在该屏障之后的的 <code>store/load</code> 指令，都在该屏障之后被执行。禁止对 <code>storeload</code> 屏障前后的指令进行重排序。</p><h5 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h5><p>​ 内存屏障只是解决 <strong>顺序一致性问题</strong> ，不解决 <strong>缓存一致性问题</strong> ，缓存一致性 是由 <strong>cpu的缓存锁</strong> 以及 <strong>MESI</strong> 协议来完成的。而缓存一致性协议只关心缓存一致性，不关心顺序一致性。所以这是两个问题。编译器层面如何解决指令重排序问题。</p><h5 id="编译层如何解决指令重排序问题" tabindex="-1">编译层如何解决指令重排序问题？ <a class="header-anchor" href="#编译层如何解决指令重排序问题" aria-label="Permalink to &quot;编译层如何解决指令重排序问题？&quot;">​</a></h5><p>​ 在编译器层面，通过volatile关键字，取消编译器层面的缓存和重排序。保证编译程序时在优化屏障之前的指令不会在优化屏障之后执行。这就保证了编译时期的优化不会影响到实际代码逻辑顺序。如果硬件架构本身已经保证了内存可见性，那么 <code>volatile</code> 就是一个空标记，不会插入相关语义的内存屏障。如果硬件架构本身不进行处理器重排序，有更强的重排序语义，那么 <code>volatile</code> 就是一个空标记，不会插入相关语义的内存屏障。 ​ 在 <strong>JMM</strong> 中把内存屏障指令分为4类，通过在不同的语义下使用不同的内存屏障来禁止特定类型的处理器重排序，从而来保证内存的可见性</p><ul><li>loadload barrier</li><li>storestore barrier</li><li>loadstore barrier</li><li>storeload barrier</li></ul><p>LoadLoad Barriers, load1 ; LoadLoad; load2 , 确保load1数据的装载优先于load2及所有后续装载指令的装载 StoreStore Barriers, store1; storestore;store2 , 确保store1数据对其他处理器可见优先于store2及所有后续存储 指令的存储 LoadStore Barries， load1;loadstore;store2, 确保load1数据装载优先于store2以及后续的存储指令刷新到内存 StoreLoad Barries， store1; storeload;load2, 确保store1数据对其他处理器变得可见， 优先于load2及所有后续 装载指令的装载；这条内存屏障指令是一个全能型的屏障，在前面讲cpu层面的内存屏障的时候有提到。它同时具有其他3条屏障的效果。</p><h3 id="volatile为什么不能保证原子性" tabindex="-1">volatile为什么不能保证原子性 <a class="header-anchor" href="#volatile为什么不能保证原子性" aria-label="Permalink to &quot;volatile为什么不能保证原子性&quot;">​</a></h3><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Demo</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">volatile</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Demo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">volatile</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>然后通过 <code>javap -c Demo.class</code> ，去查看字节码</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">volatile</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i;</span></span>
<span class="line"><span style="color:#E1E4E8;">    descriptor: I</span></span>
<span class="line"><span style="color:#E1E4E8;">    flags: (</span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">0048</span><span style="color:#E1E4E8;">) ACC_STATIC, ACC_VOLATILE</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">volatile</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i;</span></span>
<span class="line"><span style="color:#24292E;">    descriptor: I</span></span>
<span class="line"><span style="color:#24292E;">    flags: (</span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">0048</span><span style="color:#24292E;">) ACC_STATIC, ACC_VOLATILE</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><strong><code>ACC_VOLATILE</code></strong></p><h6 id="accessflags-hpp" tabindex="-1">accessFlags.hpp <a class="header-anchor" href="#accessflags-hpp" aria-label="Permalink to &quot;accessFlags.hpp&quot;">​</a></h6><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">is_volatile</span><span style="color:#E1E4E8;">    () </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;">         { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (_flags </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> JVM_ACC_VOLATILE    ) </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">is_volatile</span><span style="color:#24292E;">    () </span><span style="color:#D73A49;">const</span><span style="color:#24292E;">         { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (_flags </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> JVM_ACC_VOLATILE    ) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h6 id="bytecodeinterpreter-cpp" tabindex="-1">bytecodeinterpreter.cpp <a class="header-anchor" href="#bytecodeinterpreter-cpp" aria-label="Permalink to &quot;bytecodeinterpreter.cpp&quot;">​</a></h6><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 把结果写回到栈中</span></span>
<span class="line"><span style="color:#6A737D;">// Now store the result on the stack</span></span>
<span class="line"><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#E1E4E8;">TosState tos_type </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cache</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">flag_state</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> field_offset </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cache</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">f2_as_index</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (cache</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">is_volatile</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (support_IRIW_for_not_multiple_copy_atomic_cpu) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">OrderAccess::fence</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (tos_type </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> atos) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">VERIFY_OOP</span><span style="color:#E1E4E8;">(obj-&gt;</span><span style="color:#B392F0;">obj_field_acquire</span><span style="color:#E1E4E8;">(field_offset));</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">SET_STACK_OBJECT</span><span style="color:#E1E4E8;">(obj-&gt;</span><span style="color:#B392F0;">obj_field_acquire</span><span style="color:#E1E4E8;">(field_offset), </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (tos_type </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> itos) {</span><span style="color:#6A737D;">  // int 型的数据</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">SET_STACK_INT</span><span style="color:#E1E4E8;">(obj-&gt;</span><span style="color:#B392F0;">int_field_acquire</span><span style="color:#E1E4E8;">(field_offset), </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//。。。。。。。。。。。</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 把结果写回到栈中</span></span>
<span class="line"><span style="color:#6A737D;">// Now store the result on the stack</span></span>
<span class="line"><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#24292E;">TosState tos_type </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cache</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">flag_state</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> field_offset </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cache</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">f2_as_index</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (cache</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">is_volatile</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (support_IRIW_for_not_multiple_copy_atomic_cpu) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">OrderAccess::fence</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (tos_type </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> atos) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">VERIFY_OOP</span><span style="color:#24292E;">(obj-&gt;</span><span style="color:#6F42C1;">obj_field_acquire</span><span style="color:#24292E;">(field_offset));</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">SET_STACK_OBJECT</span><span style="color:#24292E;">(obj-&gt;</span><span style="color:#6F42C1;">obj_field_acquire</span><span style="color:#24292E;">(field_offset), </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (tos_type </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> itos) {</span><span style="color:#6A737D;">  // int 型的数据</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">SET_STACK_INT</span><span style="color:#24292E;">(obj-&gt;</span><span style="color:#6F42C1;">int_field_acquire</span><span style="color:#24292E;">(field_offset), </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//。。。。。。。。。。。</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>拿到这个值，去看这个 <code>cache</code> 是不是 <code>volatile</code> 修饰的。</p><h6 id="oop-inline-hpp" tabindex="-1">oop.inline.hpp <a class="header-anchor" href="#oop-inline-hpp" aria-label="Permalink to &quot;oop.inline.hpp&quot;">​</a></h6><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">release_store</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">volatile</span><span style="color:#E1E4E8;"> jint</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">P</span><span style="color:#E1E4E8;">, jint </span><span style="color:#FFAB70;">v</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;">   </span><span style="color:#6F42C1;">release_store</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">volatile</span><span style="color:#24292E;"> jint</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">  </span><span style="color:#E36209;">P</span><span style="color:#24292E;">, jint </span><span style="color:#E36209;">v</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>根据不同的操作系统，有不同的实现。 JMM 是为了解决不同的系统做的处理方案。</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">inline</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> OrderAccess::release </span><span style="color:#B392F0;">sotre</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">volatile</span><span style="color:#E1E4E8;"> jint</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">p</span><span style="color:#E1E4E8;">, jint </span><span style="color:#FFAB70;">v</span><span style="color:#E1E4E8;">){</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">p </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> v;}</span><span style="color:#6A737D;"> // 语言级别的内存屏障</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">inline</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> OrderAccess::release </span><span style="color:#6F42C1;">sotre</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">volatile</span><span style="color:#24292E;"> jint</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">p</span><span style="color:#24292E;">, jint </span><span style="color:#E36209;">v</span><span style="color:#24292E;">){</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> v;}</span><span style="color:#6A737D;"> // 语言级别的内存屏障</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>volatile 是一个语言级别的 memery barry</p><p>​ 被 <code>volatile</code> 声明的变量随时都可能发生变化，每次使用的时候，必须从这个变量的对应的内存地址去读取，编译器对这个 <code>volatile</code> 修饰的变量不会去做代码优化。</p><h4 id="内存屏障提供的几种功能" tabindex="-1">内存屏障提供的几种功能？ <a class="header-anchor" href="#内存屏障提供的几种功能" aria-label="Permalink to &quot;内存屏障提供的几种功能？&quot;">​</a></h4><ul><li>确保指令重排序，不会把它后边指令排序到内存屏障的前边，也不会把内存屏障前边的指令排序到内存屏障的后边</li><li>强制对缓存的修改立即写入到主内存里边。</li><li>如果是写操作的话，会导致我们其他 CPU 的缓存无效。</li></ul><h4 id="规则" tabindex="-1">规则 <a class="header-anchor" href="#规则" aria-label="Permalink to &quot;规则&quot;">​</a></h4><ul><li>对每个 <code>volatile</code> 写操作的前边会插入 storestore barrier</li><li>对每个 <code>volatile</code> 写操作的后边会插入 storeload barrier</li><li>对每个 <code>volatile</code> 读操作前边插入 loadload barrier</li><li>对每个 <code>volatile</code> 读操作后边插入 loadstore barrier</li></ul><h6 id="orderaccess-linux-x86-hpp" tabindex="-1">orderaccess_linux_x86.hpp <a class="header-anchor" href="#orderaccess-linux-x86-hpp" aria-label="Permalink to &quot;orderaccess_linux_x86.hpp&quot;">​</a></h6><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">inline</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> OrderAccess::</span><span style="color:#B392F0;">loadload</span><span style="color:#E1E4E8;">()   { </span><span style="color:#B392F0;">compiler_barrier</span><span style="color:#E1E4E8;">(); }</span></span>
<span class="line"><span style="color:#F97583;">inline</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> OrderAccess::</span><span style="color:#B392F0;">storestore</span><span style="color:#E1E4E8;">() { </span><span style="color:#B392F0;">compiler_barrier</span><span style="color:#E1E4E8;">(); }</span></span>
<span class="line"><span style="color:#F97583;">inline</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> OrderAccess::</span><span style="color:#B392F0;">loadstore</span><span style="color:#E1E4E8;">()  { </span><span style="color:#B392F0;">compiler_barrier</span><span style="color:#E1E4E8;">(); }</span></span>
<span class="line"><span style="color:#F97583;">inline</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> OrderAccess::</span><span style="color:#B392F0;">storeload</span><span style="color:#E1E4E8;">()  { </span><span style="color:#B392F0;">fence</span><span style="color:#E1E4E8;">();            }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">inline</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> OrderAccess::</span><span style="color:#6F42C1;">loadload</span><span style="color:#24292E;">()   { </span><span style="color:#6F42C1;">compiler_barrier</span><span style="color:#24292E;">(); }</span></span>
<span class="line"><span style="color:#D73A49;">inline</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> OrderAccess::</span><span style="color:#6F42C1;">storestore</span><span style="color:#24292E;">() { </span><span style="color:#6F42C1;">compiler_barrier</span><span style="color:#24292E;">(); }</span></span>
<span class="line"><span style="color:#D73A49;">inline</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> OrderAccess::</span><span style="color:#6F42C1;">loadstore</span><span style="color:#24292E;">()  { </span><span style="color:#6F42C1;">compiler_barrier</span><span style="color:#24292E;">(); }</span></span>
<span class="line"><span style="color:#D73A49;">inline</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> OrderAccess::</span><span style="color:#6F42C1;">storeload</span><span style="color:#24292E;">()  { </span><span style="color:#6F42C1;">fence</span><span style="color:#24292E;">();            }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>假如说 是 <code>storeload()</code> 然后，调用 <code>fence()</code> 方法，</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">inline</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> OrderAccess::</span><span style="color:#B392F0;">fence</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// always use locked addl since mfence is sometimes expensive</span></span>
<span class="line"><span style="color:#F97583;">#ifdef</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AMD64</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">__asm__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">volatile</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#9ECBFF;">lock; addl $0,0(%%rsp)</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> : : : </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#9ECBFF;">cc</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#9ECBFF;">memory</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">#else</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">__asm__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">volatile</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#9ECBFF;">lock; addl $0,0(%%esp)</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> : : : </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#9ECBFF;">cc</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#9ECBFF;">memory</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">#endif</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">compiler_barrier</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">inline</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> OrderAccess::</span><span style="color:#6F42C1;">fence</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// always use locked addl since mfence is sometimes expensive</span></span>
<span class="line"><span style="color:#D73A49;">#ifdef</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AMD64</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">__asm__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">volatile</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;</span><span style="color:#032F62;">lock; addl $0,0(%%rsp)</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> : : : </span><span style="color:#032F62;">&quot;</span><span style="color:#032F62;">cc</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;</span><span style="color:#032F62;">memory</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">#else</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">__asm__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">volatile</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;</span><span style="color:#032F62;">lock; addl $0,0(%%esp)</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> : : : </span><span style="color:#032F62;">&quot;</span><span style="color:#032F62;">cc</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;</span><span style="color:#032F62;">memory</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">#endif</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">compiler_barrier</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>汇编指令。 就是内存屏障。<code>storeload</code> 就是一个内存屏障。</p><p><img src="`+y+`" alt="JavaGuide_并发编程_原理1_storeload_内存屏障.png"></p><p><code>OrderAccess::storeload();</code></p><p>​ 是永远追加在后边的。是为了避免 <code>volatile</code> 写操作后边，有一些 <code>volatile</code> 读写操作的重排序。因为编译器，没办法去判断，<code>volatile</code> 后边是不是还要去插入。为了保证正确实现 <code>volatile</code> 语义，实现了悲观策略。我最终都要加上 这个屏障。</p><p>​</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">VolatileDemo1</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">volatile</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> stop </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> InterruptedException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Thread thread </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Thread</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">9</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">stop){</span></span>
<span class="line"><span style="color:#E1E4E8;">                i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#E1E4E8;">        thread.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        Thread.</span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        stop </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">VolatileDemo1</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">volatile</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> stop </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> InterruptedException {</span></span>
<span class="line"><span style="color:#24292E;">        Thread thread </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Thread</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">9</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">stop){</span></span>
<span class="line"><span style="color:#24292E;">                i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">        thread.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        Thread.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        stop </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>​ 对于 <code>volatile</code> 修饰的变量，如果其他的线程对这个值进行了一个变更的话，他会去加一个内存屏障，他会去保证我们的可见性。我们会保证在我们的CPU 层面，就是我们的汇编指令层面，它实际上会去发起一个 LOCK 的汇编指令，这个 LOCK 指令最终做的就是把我们的这个缓存更新到我们的内存里边。</p><h5 id="原子性" tabindex="-1">原子性 <a class="header-anchor" href="#原子性" aria-label="Permalink to &quot;原子性&quot;">​</a></h5><p><strong>对符合操作的原子性是没有办法保证原子性的！！！</strong></p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">VolatileIncrDemo</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">volatile</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">incr</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">VolatileIncrDemo</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">incr</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">VolatileIncrDemo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">volatile</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">incr</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">VolatileIncrDemo</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">incr</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><code>javap -c volatileIncrDemo.class</code> 之后</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">  public </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">incr</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    Code:</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">: aload_0</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">: dup</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">: getfield      #</span><span style="color:#79B8FF;">2</span><span style="color:#6A737D;">                  // Field i:I</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">: iconst_1</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">: iadd</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">: putfield      #</span><span style="color:#79B8FF;">2</span><span style="color:#6A737D;">                  // Field i:I</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">return</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">  public </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">incr</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    Code:</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">: aload_0</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">: dup</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">: getfield      #</span><span style="color:#005CC5;">2</span><span style="color:#6A737D;">                  // Field i:I</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">: iconst_1</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">: iadd</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">7</span><span style="color:#24292E;">: putfield      #</span><span style="color:#005CC5;">2</span><span style="color:#6A737D;">                  // Field i:I</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">return</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h6 id="对一个原子递增的操作-会分为三个步骤" tabindex="-1">对一个原子递增的操作，会分为三个步骤： <a class="header-anchor" href="#对一个原子递增的操作-会分为三个步骤" aria-label="Permalink to &quot;对一个原子递增的操作，会分为三个步骤：&quot;">​</a></h6><ol><li>读取 volatile 变量的值到 local ；</li><li>增加变量的值；</li><li>把 local 的值回写</li></ol><p>多个线程同时去执行的话。三个操作。</p><p>每个线程可能拿到旧的值去更新。</p><p><code>Synchronized</code> 原子性，避免线程的并行执行</p><p>AtomicInteger ( CAS ) 、Lock ( CAS/ LockSupport / AQS / unsafe )</p><p>不安全都放到 unsafe ，一般不推荐使用。</p><p>Synchronized</p><ul><li>可见性</li><li>原子性</li><li>有序性</li></ul><h2 id="总结-1" tabindex="-1">总结 <a class="header-anchor" href="#总结-1" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>内存模型</p><ul><li>约束我们线程访问内存的规范。</li><li>屏蔽硬件和操作系统的内存访问的差异。</li></ul><p>​ JMM 对硬件和操作系统的抽象。定义了，线程之间可以通过共享空间和线程信号去通讯。</p><p>volatile 通过 LOCK 来实现锁。</p><ul><li>编译器的指令重排序</li><li>CPU 的指令重排序（内存的乱序访问）</li></ul><p>可见性问题</p><p>内存屏障去解决。</p><p>int a = 1;</p><p>int b = b ;</p><p>a = 1 ; storestore ; b = 2 ; a = 2</p><h5 id="volatile-是干嘛的" tabindex="-1">Volatile 是干嘛的？ <a class="header-anchor" href="#volatile-是干嘛的" aria-label="Permalink to &quot;Volatile 是干嘛的？&quot;">​</a></h5><ol><li>可以保证可见性、防止内存重排序</li><li><code>#LOCK</code> , - &gt; 缓存锁 （MESI）</li><li>内存屏障</li></ol><h5 id="使用场景" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景" aria-label="Permalink to &quot;使用场景&quot;">​</a></h5><p>线程的关闭。</p><p><code>java.util.concurrent.locks.AbstractQueuedSynchronizer</code></p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">volatile</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> state;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">volatile</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> state;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>成员变量 state 的定义。</p>`,140),u=[b];function F(h,m,v,A,g,C){return n(),l("div",null,u)}const B=a(d,[["render",F]]);export{f as __pageData,B as default};
