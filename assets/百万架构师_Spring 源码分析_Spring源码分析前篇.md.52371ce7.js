import{_ as a,o as n,h as s,Q as e}from"./chunks/framework.da611722.js";const E=JSON.parse('{"title":"Spring源码分析前篇 | JavaGuide","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://javaguide.net/百万架构师/Spring 源码分析/Spring源码分析前篇.html"}],["meta",{"name":"keywords","content":"Spring源码分析前篇 , JavaGuide , JavaGuide官网, Java面试指南, Java基础, 多线程, JVM, 虚拟机, 数据库, MySQL, Spring, Redis, MyBatis, 系统设计, 分布式, RPC, 高可用, 高并发"}],["meta",{"name":"og:url","content":"https://JavaGuide.net"}],["meta",{"name":"og:type","content":"website"}],["meta",{"name":"og:image","content":"https://javaguide.net/JavaGuide-og.png"}],["meta",{"name":"og:title","content":"Spring源码分析前篇 | JavaGuide | Java面试指南 | JavaGuide官网"}],["meta",{"name":"og:description","content":"Spring源码分析前篇 | JavaGuide | Java面试指南 | JavaGuide官网 | 「JavaGuide.net」一份涵盖大部分 Java 程序员所需要掌握的核心知识。准备 Java 面试，首选 JavaGuide.net ！"}],["meta",{"name":"twitter:site","content":"https://javaguide.net"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:creator","content":"nogeek.cn"}],["meta",{"name":"twitter:title","content":"Spring源码分析前篇 | JavaGuide | Java面试指南 | JavaGuide官网"}],["meta",{"name":"twitter:description","content":"Spring源码分析前篇 | JavaGuide | Java面试指南 | JavaGuide官网 | 「JavaGuide.net」一份涵盖大部分 Java 程序员所需要掌握的核心知识。准备 Java 面试，首选 JavaGuide.net ！"}],["meta",{"name":"twitter:image","content":"https://javaguide.net/JavaGuide-og.png"}],["meta",{"name":"sogou_site_verification","content":"fcAkazTXFd"}],["meta",{"name":"baidu-site-verification","content":"codeva-MXEPYsXKGk"}],["meta",{"name":"msvalidate.01","content":"9F2D57CFC59E8031212A166878638B15"}]]},"headers":[],"relativePath":"百万架构师/Spring 源码分析/Spring源码分析前篇.md","filePath":"百万架构师/Spring 源码分析/Spring源码分析前篇.md","lastUpdated":1741277271000}'),l={name:"百万架构师/Spring 源码分析/Spring源码分析前篇.md"},p=e(`<h2 id="穷举法" tabindex="-1">穷举法： <a class="header-anchor" href="#穷举法" aria-label="Permalink to &quot;穷举法：&quot;">​</a></h2><p><strong>把生活所见所闻全部归纳到我们所学的知识体系中，加以思考变成自己的东西。（举例子）</strong></p><h2 id="类比法" tabindex="-1">类比法： <a class="header-anchor" href="#类比法" aria-label="Permalink to &quot;类比法：&quot;">​</a></h2><p><strong>把自己熟悉的方法（利用自己已有的知识体系），去对比学习新的知识。</strong></p><h2 id="spring-怎么学" tabindex="-1">Spring 怎么学？ <a class="header-anchor" href="#spring-怎么学" aria-label="Permalink to &quot;Spring 怎么学？&quot;">​</a></h2><h3 id="_1-环境准备好了没有" tabindex="-1">1. 环境准备好了没有？ <a class="header-anchor" href="#_1-环境准备好了没有" aria-label="Permalink to &quot;1. 环境准备好了没有？&quot;">​</a></h3><h3 id="_2-项目里边有红叉" tabindex="-1">2. 项目里边有红叉❌ <a class="header-anchor" href="#_2-项目里边有红叉" aria-label="Permalink to &quot;2. 项目里边有红叉:x:&quot;">​</a></h3><p>学习源码，不一定要让项目跑起来，报一两个红叉其实不要紧。</p><h3 id="看-是什么-能干啥" tabindex="-1">看：是什么？能干啥 <a class="header-anchor" href="#看-是什么-能干啥" aria-label="Permalink to &quot;看：是什么？能干啥&quot;">​</a></h3><h3 id="想-为什么" tabindex="-1">想：为什么? <a class="header-anchor" href="#想-为什么" aria-label="Permalink to &quot;想：为什么?&quot;">​</a></h3><h3 id="实践-怎么做" tabindex="-1">实践：怎么做？ <a class="header-anchor" href="#实践-怎么做" aria-label="Permalink to &quot;实践：怎么做？&quot;">​</a></h3><p>调试的时候，完全可以在运行环境中，导入 <strong><code>jar</code></strong> 包就能调试（有针对性地打断点）</p><h2 id="_3-如何从-0-1-去学习" tabindex="-1">3. 如何从 0 -1 去学习 <a class="header-anchor" href="#_3-如何从-0-1-去学习" aria-label="Permalink to &quot;3. 如何从 0 -1 去学习&quot;">​</a></h2><h3 id="_1-要先看官网" tabindex="-1">1.要先看官网 <a class="header-anchor" href="#_1-要先看官网" aria-label="Permalink to &quot;1.要先看官网&quot;">​</a></h3><p>然后去网上找资料参考（有了基本的概念，产生了很多问题，很多猜想）</p><h3 id="_2-然后-看项目结构" tabindex="-1">2.然后，看项目结构 <a class="header-anchor" href="#_2-然后-看项目结构" aria-label="Permalink to &quot;2.然后，看项目结构&quot;">​</a></h3><p>（更加具体地了解，还是产生很多猜想）</p><h3 id="_3-为什么会存在-spring-这个东西" tabindex="-1">3.为什么会存在 Spring 这个东西？ <a class="header-anchor" href="#_3-为什么会存在-spring-这个东西" aria-label="Permalink to &quot;3.为什么会存在 Spring 这个东西？&quot;">​</a></h3><p>能做什么，做了什么，要我来做，我该怎么做？</p><h3 id="_4-ioc、aop、di、beanfactory-等这样一系列零碎的概念-人云亦云" tabindex="-1">4.IOC、AOP、DI、BeanFactory 等这样一系列零碎的概念（人云亦云） <a class="header-anchor" href="#_4-ioc、aop、di、beanfactory-等这样一系列零碎的概念-人云亦云" aria-label="Permalink to &quot;4.IOC、AOP、DI、BeanFactory 等这样一系列零碎的概念（人云亦云）&quot;">​</a></h3><h3 id="_5-能做什么-java-中的万能胶" tabindex="-1">5.能做什么：Java 中的万能胶 <a class="header-anchor" href="#_5-能做什么-java-中的万能胶" aria-label="Permalink to &quot;5.能做什么：Java 中的万能胶&quot;">​</a></h3><h3 id="_6-做了什么-java-bean-能够实现无缝对接" tabindex="-1">6.做了什么： JAVA Bean 能够实现无缝对接 <a class="header-anchor" href="#_6-做了什么-java-bean-能够实现无缝对接" aria-label="Permalink to &quot;6.做了什么： JAVA Bean 能够实现无缝对接&quot;">​</a></h3><h3 id="_7-要我来做-我该怎么做" tabindex="-1">7.要我来做，我该怎么做？ <a class="header-anchor" href="#_7-要我来做-我该怎么做" aria-label="Permalink to &quot;7.要我来做，我该怎么做？&quot;">​</a></h3><p>所谓一个框架而言，在编写框架代码的时候，所要对接的 Bean 是不存在的。</p><p>通过预设规则，按照一定的规则去顺序加载或识别需要对接的 Bean。（反射，通过类全名字符串可以找到，并创建一个 Bean 的实例）。</p><p>规定配置文件的默认名字。</p><h3 id="ioc-缓存起来-得把它存起来-map-容器" tabindex="-1">IOC：缓存起来，得把它存起来（Map 容器） <a class="header-anchor" href="#ioc-缓存起来-得把它存起来-map-容器" aria-label="Permalink to &quot;IOC：缓存起来，得把它存起来（Map 容器）&quot;">​</a></h3><h3 id="di-getter、setter、contructor-反射、invoker" tabindex="-1">DI: getter、setter、contructor （反射、invoker） <a class="header-anchor" href="#di-getter、setter、contructor-反射、invoker" aria-label="Permalink to &quot;DI: getter、setter、contructor （反射、invoker）&quot;">​</a></h3><h3 id="aop-为了增强原始-bean-的功能-代理技术" tabindex="-1">AOP: 为了增强原始 Bean 的功能（代理技术） <a class="header-anchor" href="#aop-为了增强原始-bean-的功能-代理技术" aria-label="Permalink to &quot;AOP: 为了增强原始 Bean 的功能（代理技术）&quot;">​</a></h3><h2 id="没有spring-将如何开发" tabindex="-1">没有Spring 将如何开发？ <a class="header-anchor" href="#没有spring-将如何开发" aria-label="Permalink to &quot;没有Spring 将如何开发？&quot;">​</a></h2><h3 id="_1-认识懒惰的-一切高端技术的发明都是源于人类的懒惰-何不重复地造轮子呢" tabindex="-1">1.认识懒惰的，一切高端技术的发明都是源于人类的懒惰，何不重复地造轮子呢？ <a class="header-anchor" href="#_1-认识懒惰的-一切高端技术的发明都是源于人类的懒惰-何不重复地造轮子呢" aria-label="Permalink to &quot;1.认识懒惰的，一切高端技术的发明都是源于人类的懒惰，何不重复地造轮子呢？&quot;">​</a></h3><h3 id="_2-没有-spring-那是到了-spring-出现以前的开发了。" tabindex="-1">2.没有 Spring ，那是到了 Spring 出现以前的开发了。 <a class="header-anchor" href="#_2-没有-spring-那是到了-spring-出现以前的开发了。" aria-label="Permalink to &quot;2.没有 Spring ，那是到了 Spring 出现以前的开发了。&quot;">​</a></h3><ol><li>很多设计模式需要自己去整合，当然，你也可以选择不用设计模式（只不过多走点弯路而已）</li><li>所有的封装、集成、多态、增强、依赖、模块管理等等工作都有自己制定统一的规则（百花齐放、百家争鸣）</li><li>所有的创建对象、配置依赖关系、资源的重复利用、拓展性的手动操作</li></ol><h3 id="spring-出现以后-java-程序员的春天真的来了-解放了双手。" tabindex="-1">Spring 出现以后，JAVA 程序员的春天真的来了，解放了双手。 <a class="header-anchor" href="#spring-出现以后-java-程序员的春天真的来了-解放了双手。" aria-label="Permalink to &quot;Spring 出现以后，JAVA 程序员的春天真的来了，解放了双手。&quot;">​</a></h3><h3 id="七分猜测-三分验证-七分靠打拼-三分天注定" tabindex="-1">七分猜测，三分验证（七分靠打拼，三分天注定） <a class="header-anchor" href="#七分猜测-三分验证-七分靠打拼-三分天注定" aria-label="Permalink to &quot;七分猜测，三分验证（七分靠打拼，三分天注定）&quot;">​</a></h3><ul><li>如果猜对了，就会有一种成就感。</li><li>看源码，第一遍是非常痛苦的。</li><li>看第二遍、看第三遍思路越来越清晰。</li><li>带着思考去找入口（主入口、隐藏的入口）</li></ul><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 要想跑起来，运行的是 run 方法里边的代码</span></span>
<span class="line"><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Thread</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 跑起来</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">go</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 要想跑起来，运行的是 run 方法里边的代码</span></span>
<span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Thread</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 跑起来</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">go</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>RMI 中</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// socket</span></span>
<span class="line"><span style="color:#E1E4E8;">socket.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 入口</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// ServerSocket</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">        server.</span><span style="color:#B392F0;">accept</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// socket</span></span>
<span class="line"><span style="color:#24292E;">socket.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 入口</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// ServerSocket</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        server.</span><span style="color:#6F42C1;">accept</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>看 Tomcat 的源码</p><ul><li><code>Main</code> 方法</li></ul><p>Spring</p><ul><li><code>ClassPathXMLApplicationContext</code> app 显示的入口 <ul><li>查找用户需要加载哪些配置文件</li><li>读取配置文件</li><li>注册</li></ul></li></ul><hr><ul><li>定位</li><li>加载</li><li>注册</li></ul><hr><h1 id="预习效果调查" tabindex="-1">预习效果调查？ <a class="header-anchor" href="#预习效果调查" aria-label="Permalink to &quot;预习效果调查？&quot;">​</a></h1><p>第二轮：预习文档老师不会带大家去课件了，自己在课前看，作为上课的补充资料（用于帮助大家去猜测资料）</p><p>：画图，梳理思路，答疑</p>`,49),o=[p];function r(t,i,c,d,h,u){return n(),s("div",null,o)}const m=a(l,[["render",r]]);export{E as __pageData,m as default};
