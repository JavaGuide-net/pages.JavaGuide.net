import{_ as s,o as n,h as a,Q as l}from"./chunks/framework.da611722.js";const p="/assets/JavaGuide-Zookeeper_实践注册中心_静群效应.0a52ecad.png",o="/assets/JavaGuide-Zookeeper_实践注册中心_有序节点顺序监听.95308921.png",e="/assets/JavaGuide-Zookeeper_实践注册中心_分布式架构现状.84e86e6c.png",r="/assets/JavaGuide-Zookeeper_实践注册中心_实现序列图.bcb3d56c.png",D=JSON.parse('{"title":"zookeeper实践之配合注册中心完成RPC手写 | JavaGuide","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://javaguide.net/百万架构师/协调服务-zookeeper/zookeeper实践之配合注册中心完成RPC手写.html"}],["meta",{"name":"keywords","content":"zookeeper实践之配合注册中心完成RPC手写 , JavaGuide , JavaGuide官网, Java面试指南, Java基础, 多线程, JVM, 虚拟机, 数据库, MySQL, Spring, Redis, MyBatis, 系统设计, 分布式, RPC, 高可用, 高并发"}],["meta",{"name":"og:url","content":"https://JavaGuide.net"}],["meta",{"name":"og:type","content":"website"}],["meta",{"name":"og:image","content":"https://javaguide.net/JavaGuide-og.png"}],["meta",{"name":"og:title","content":"zookeeper实践之配合注册中心完成RPC手写 | JavaGuide | Java面试指南 | JavaGuide官网"}],["meta",{"name":"og:description","content":"zookeeper实践之配合注册中心完成RPC手写 | JavaGuide | Java面试指南 | JavaGuide官网 | 「JavaGuide.net」一份涵盖大部分 Java 程序员所需要掌握的核心知识。准备 Java 面试，首选 JavaGuide.net ！"}],["meta",{"name":"twitter:site","content":"https://javaguide.net"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:creator","content":"nogeek.cn"}],["meta",{"name":"twitter:title","content":"zookeeper实践之配合注册中心完成RPC手写 | JavaGuide | Java面试指南 | JavaGuide官网"}],["meta",{"name":"twitter:description","content":"zookeeper实践之配合注册中心完成RPC手写 | JavaGuide | Java面试指南 | JavaGuide官网 | 「JavaGuide.net」一份涵盖大部分 Java 程序员所需要掌握的核心知识。准备 Java 面试，首选 JavaGuide.net ！"}],["meta",{"name":"twitter:image","content":"https://javaguide.net/JavaGuide-og.png"}],["meta",{"name":"sogou_site_verification","content":"fcAkazTXFd"}],["meta",{"name":"baidu-site-verification","content":"codeva-MXEPYsXKGk"}],["meta",{"name":"msvalidate.01","content":"9F2D57CFC59E8031212A166878638B15"}]]},"headers":[],"relativePath":"百万架构师/协调服务-zookeeper/zookeeper实践之配合注册中心完成RPC手写.md","filePath":"百万架构师/协调服务-zookeeper/zookeeper实践之配合注册中心完成RPC手写.md","lastUpdated":1741277271000}'),c={name:"百万架构师/协调服务-zookeeper/zookeeper实践之配合注册中心完成RPC手写.md"},t=l('<ol><li><p>使用zookeeper原生API实现分布式锁</p></li><li><p>分析Curator实现分布式锁的原理</p></li><li><p>实现带注册中心的RPC框架</p></li></ol><h1 id="使用zookeeper原生api实现分布式锁" tabindex="-1">使用zookeeper原生API实现分布式锁 <a class="header-anchor" href="#使用zookeeper原生api实现分布式锁" aria-label="Permalink to &quot;使用zookeeper原生API实现分布式锁&quot;">​</a></h1><h2 id="什么是分布式锁" tabindex="-1">什么是分布式锁？ <a class="header-anchor" href="#什么是分布式锁" aria-label="Permalink to &quot;什么是分布式锁？&quot;">​</a></h2><p>我们在选择一个方案去实现分布式锁的时候，我们得知道我们要解决的是一个什么问题，或者说我们使用zookeeper实现对应的分布式锁是要解决什么问题。</p><p>在以前的以及现在的单进程的多线程模型中，我们会利用多线程的基础数据去提高我们程序的运行效率，在现在CPU多核心的背景之下，每个CPU的每个核心能够同时去运行同一个线程，那么这个时候就会存在一个线程的并行执行，如果说多线程并行去访问某一个共享资源的话，那么就会造成共享资源、共享变量的线程安全问题，这是多线程领域中线程安全的一个问题。我们会通过 <code>Synchronized</code> 或者 <code>Lock</code> 去解决，并发带来的线程安全的问题。</p><p>​ 在分布式架构里边，我们的概念是相似的。如果我们把整个架构看作是一整个超级计算机的话，那么组成超级计算机的每一个独立的节点都是一个独立的进程、每一个进程都可以并行地去访问去执行一些操作。比如说我们在一个电商平台里的商品库存问题，我们现在要去做秒杀，库存有100个，用户可以去购买，在并行的情况下，再对库存资源进行一个处理的话，如何去避免超卖或者少卖的问题，这个时候我们需要用一些互斥的手段，防止彼此的一些干扰，这个是分布式环境下遇到的问题，我们怎么去解决？分布式环境下的Synchronized和lock不能够解决这些问题。因为他们没办法在多个跨进程的情况下实现锁的特性。</p><p>​ 所以我们需要一些机制去实现分布式锁，</p><p>​ zookeeper、redis、数据库都可以去实现分布式锁</p><p>​ 我们只需要依赖第三方的一个中间件去做一个锁的存储，锁的释放就好了。</p><p>​ 常见的锁有很多种，有排它锁（独占锁），读写锁，共享锁。在不同的情况下，我们会使用不同的锁，去对我们的资源去做一些协调。这就是我们锁这一块使用背景和使用原因。</p><p>​ Zookeeper 能够实现分布式锁的原因在于 Zookeeper 本身有一个节点的特性。首先，我们要实现分布式锁的机制，我们首先要获得锁和释放锁。</p><p>​ Zookeeper 结构是一个节点特性的、文件系统风格的对应的树形的结构。我们现在要通过zookeeper去实现分布式锁的话。</p><p>​ 我们现在有三个客户端 clientA，clientB，clientC 要访问某一个资源，我们在操作资源之前要获得锁，我们获得锁的方式有很多种。</p><h3 id="实现分布式锁" tabindex="-1">实现分布式锁 <a class="header-anchor" href="#实现分布式锁" aria-label="Permalink to &quot;实现分布式锁&quot;">​</a></h3><p>第一种：我会在 <code>/Locks</code> 节点下去创建一个 lock 节点，每一个客户端都会去创建，按照 zookeeper 本身的节点特性，在同一节点下，它的名字是唯一的，那么，我们客户端三个去创建节点的时候，能够在这里创建成功的只有一个客户端，其他的都会失败，失败的话就去监听节点的变化，如果 <code>/Locks/lock</code> 发生了一个变化，就会触发一个 watcher 的通知，剩下的客户端就会收到通知，再一次去争抢这个锁，这种实现锁的方式会有一个惊群效应！！！（惊群效应：打个比方，我们现在有 30 个节点需要同时获得这个锁。如果说其中一个节点释放了锁，那么就会触发剩下的 29 个节点一起去争抢这个锁，就是一个锁的释放，会引起所有的参与的客户端都会发起一个争抢，也叫羊群效应。这个效应会导致在短时间之内会有大量的事件变更，watcherEvent 发给想要获得锁的客户端，那么实际情况下，只会有一个客户端去获得锁，因此这种方式下，集群的规模比较大的时候，我们的节点访问情况下比较多的情况下，我们不建议这种方式去实现，）</p><p><img src="'+p+'" alt="JavaGuide-Zookeeper_实践注册中心_静群效应.png"></p><p>​</p><h3 id="我们可以利用有序节点来实现分布式锁" tabindex="-1">我们可以利用有序节点来实现分布式锁 <a class="header-anchor" href="#我们可以利用有序节点来实现分布式锁" aria-label="Permalink to &quot;我们可以利用有序节点来实现分布式锁&quot;">​</a></h3><p>​ 每一个节点注册的节点都加上seq，这时候我们保证我们的每一个节点都能够注册一个节点上去，我要获得锁的话，我就去这个大的节点下获得一个最小的节点，获得最小的节点以后，表示当前这个客户端能够获得对应的锁，那其他的没有比它小的，没有获得锁的节点，它们之间是做一个相互的监听，加入说我们的 /lock_seq1 获得了锁，那么 /lock_seq2监听/lock_seq1，/lock_seq3会对这个/lock_seq2去做一个监听，只监听比我小一个值的节点，当比它小的节点发生变化的时候，它就可以收到一个事件，再去判断当前的这个节点是不是所有节点里边最小的节点，如果说是的话，那么它就获得锁，如果不是，那就继续等待，直到比它小的节点变化了，再做一个唤醒，那么在这样的一个背景下，我们就不需要去对所有的节点去做一个惊群的一个处理，而是我只对我所关注的节点去做一个处理就好了，这就是利用有序节点来实现分布式锁的概念和原理。</p><p><img src="'+o+`" alt="JavaGuide-Zookeeper_实践注册中心_有序节点顺序监听.png"></p><p>实现分布式锁代码：</p><p>首先引入zookeeper包，</p><p>可以实现lock,watcher接口</p><h1 id="利用-zookeeper-的有序节点实现分布式锁" tabindex="-1">利用 zookeeper 的有序节点实现分布式锁 <a class="header-anchor" href="#利用-zookeeper-的有序节点实现分布式锁" aria-label="Permalink to &quot;利用 zookeeper 的有序节点实现分布式锁&quot;">​</a></h1><h2 id="代码" tabindex="-1">代码 <a class="header-anchor" href="#代码" aria-label="Permalink to &quot;代码&quot;">​</a></h2><h3 id="distributedlock-zookeeper实现分布式锁" tabindex="-1">DistributedLock zookeeper实现分布式锁 <a class="header-anchor" href="#distributedlock-zookeeper实现分布式锁" aria-label="Permalink to &quot;DistributedLock zookeeper实现分布式锁&quot;">​</a></h3><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> com.gupao.study.vip;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.apache.zookeeper.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.apache.zookeeper.data.Stat;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.io.IOException;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.List;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.SortedSet;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.TreeSet;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.concurrent.CountDownLatch;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.concurrent.TimeUnit;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.concurrent.locks.Condition;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.concurrent.locks.Lock;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">* &lt;br&gt;类说明 :</span></span>
<span class="line"><span style="color:#6A737D;">* 基于 Lock 来实现分布式锁，</span></span>
<span class="line"><span style="color:#6A737D;">*</span></span>
<span class="line"><span style="color:#6A737D;">* &lt;br&gt;属性说明：</span></span>
<span class="line"><span style="color:#6A737D;">* &lt;br&gt;作者：Darian</span></span>
<span class="line"><span style="color:#6A737D;">**/</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DistributedLock</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Lock</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">Watcher</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// 首先定义一个 zookeeper 的连接</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> ZooKeeper zooKeeper </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// 定义根节点</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String ROOT_LOCK </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;/locks&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// 等待前一个锁 ，得到监控的前一个锁的节点</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String WAIT_LOCK;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// 表示当前的锁</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String CURRENT_LOCK;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// 用来做处理</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> CountDownLatch countDownLatch;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DistributedLock</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">           zooKeeper </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ZooKeeper</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;192.168.136.128:2181&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                   </span><span style="color:#79B8FF;">4000</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#6A737D;">// 判断根节点是否存在</span></span>
<span class="line"><span style="color:#E1E4E8;">           Stat stat </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> zooKeeper.</span><span style="color:#B392F0;">exists</span><span style="color:#E1E4E8;">(ROOT_LOCK, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (stat </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">               </span><span style="color:#6A737D;">// 当前的节点是不存在的</span></span>
<span class="line"><span style="color:#E1E4E8;">               zooKeeper.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(ROOT_LOCK, </span><span style="color:#9ECBFF;">&quot;0&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getBytes</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">                       ZooDefs.Ids.OPEN_ACL_UNSAFE,</span></span>
<span class="line"><span style="color:#E1E4E8;">                       CreateMode.PERSISTENT);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">           }</span></span>
<span class="line"><span style="color:#E1E4E8;">       } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (IOException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">           e.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">       } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (InterruptedException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">           e.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">       } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (KeeperException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">           e.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">       }</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">lock</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">tryLock</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#6A737D;">// 如果获得锁成功</span></span>
<span class="line"><span style="color:#E1E4E8;">           System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(Thread.</span><span style="color:#B392F0;">currentThread</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                   </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;--&gt;&gt;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">                   </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> CURRENT_LOCK</span></span>
<span class="line"><span style="color:#E1E4E8;">                   </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;获得锁成功&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">       }</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#6A737D;">// 没有获得锁，继续等待获得锁</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#B392F0;">waitForLock</span><span style="color:#E1E4E8;">(WAIT_LOCK);</span></span>
<span class="line"><span style="color:#E1E4E8;">       } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (KeeperException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">           e.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">       } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (InterruptedException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">           e.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">       }</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">   /**</span></span>
<span class="line"><span style="color:#6A737D;">    * 这是一个持续阻塞去获得所得一个过程</span></span>
<span class="line"><span style="color:#6A737D;">    **/</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">waitForLock</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">prev</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> KeeperException, InterruptedException {</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#6A737D;">// 因为我要等待锁的话，我需要监听上一个锁的节点</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#6A737D;">// 通过 exists 去监听</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#6A737D;">// 监听当前节点的上一个节点</span></span>
<span class="line"><span style="color:#E1E4E8;">       Stat stat </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> zooKeeper.</span><span style="color:#B392F0;">exists</span><span style="color:#E1E4E8;">(prev, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (stat </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#6A737D;">// 表示上一个节点确实存在</span></span>
<span class="line"><span style="color:#E1E4E8;">           System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(Thread.</span><span style="color:#B392F0;">currentThread</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                   </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;--&gt;&gt;等待锁&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">                   </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> ROOT_LOCK</span></span>
<span class="line"><span style="color:#E1E4E8;">                   </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;/&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">                   </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> prev</span></span>
<span class="line"><span style="color:#E1E4E8;">                   </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;释放&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">           countDownLatch </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CountDownLatch</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">           countDownLatch.</span><span style="color:#B392F0;">await</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">           System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(Thread.</span><span style="color:#B392F0;">currentThread</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                   </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;--&gt;&gt;获得锁成功&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">       }</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">lockInterruptibly</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> InterruptedException {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">tryLock</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#6A737D;">// 创建临时有序节点</span></span>
<span class="line"><span style="color:#E1E4E8;">           CURRENT_LOCK </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> zooKeeper.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(ROOT_LOCK </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;0&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getBytes</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">                   ZooDefs.Ids.OPEN_ACL_UNSAFE,</span></span>
<span class="line"><span style="color:#E1E4E8;">                   CreateMode.EPHEMERAL_SEQUENTIAL);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">           System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(Thread.</span><span style="color:#B392F0;">currentThread</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                   </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;--&gt;&gt;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">                   </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> CURRENT_LOCK</span></span>
<span class="line"><span style="color:#E1E4E8;">                   </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;尝试去竞争锁&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#6A737D;">// 获取根节点下的所有子节点</span></span>
<span class="line"><span style="color:#E1E4E8;">           List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; childrens </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> zooKeeper.</span><span style="color:#B392F0;">getChildren</span><span style="color:#E1E4E8;">(ROOT_LOCK, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#6A737D;">// 定义一个集合进行排序</span></span>
<span class="line"><span style="color:#E1E4E8;">           SortedSet&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; sortedSet </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> TreeSet&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (String children </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> childrens) {</span></span>
<span class="line"><span style="color:#E1E4E8;">               sortedSet.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(ROOT_LOCK </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> children);</span></span>
<span class="line"><span style="color:#E1E4E8;">           }</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#6A737D;">// 获得所有子节点中最小的节点</span></span>
<span class="line"><span style="color:#E1E4E8;">           String firstnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sortedSet.</span><span style="color:#B392F0;">first</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">           SortedSet&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; lessThenMe </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ((TreeSet</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">) sortedSet).</span><span style="color:#B392F0;">headSet</span><span style="color:#E1E4E8;">(CURRENT_LOCK);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (CURRENT_LOCK.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(firstnode)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">               </span><span style="color:#6A737D;">// 通过当前的节点和子节点中最小的节点进行比较，如果相等，标识获得锁成功</span></span>
<span class="line"><span style="color:#E1E4E8;">               </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">           }</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">lessThenMe.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">               </span><span style="color:#6A737D;">// 如果没有比自己更小的节点</span></span>
<span class="line"><span style="color:#E1E4E8;">               </span><span style="color:#6A737D;">// 获得比当前节点更小的最后一个节点，设置给WAIT_LOCK</span></span>
<span class="line"><span style="color:#E1E4E8;">               WAIT_LOCK </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> lessThenMe.</span><span style="color:#B392F0;">last</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">           }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">       } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (KeeperException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">           e.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">       } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (InterruptedException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">           e.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">       }</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">tryLock</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">time</span><span style="color:#E1E4E8;">, TimeUnit </span><span style="color:#FFAB70;">unit</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> InterruptedException {</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">unlock</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#6A737D;">// 释放锁</span></span>
<span class="line"><span style="color:#E1E4E8;">       System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(Thread.</span><span style="color:#B392F0;">currentThread</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">               </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;--&gt;&gt;释放锁&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">               </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> CURRENT_LOCK);</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#6A737D;">// 删除掉这个节点，version = -1 表示不管三七二十一都删掉</span></span>
<span class="line"><span style="color:#E1E4E8;">           zooKeeper.</span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;">(CURRENT_LOCK, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">           CURRENT_LOCK </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">           zooKeeper.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">       } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (InterruptedException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">           e.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">       } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (KeeperException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">           e.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">       }</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Condition </span><span style="color:#B392F0;">newCondition</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">process</span><span style="color:#E1E4E8;">(WatchedEvent </span><span style="color:#FFAB70;">watchedEvent</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#6A737D;">// 在这里边去处理监听事件</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.countDownLatch </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#6A737D;">// 去释放锁</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.countDownLatch.</span><span style="color:#B392F0;">countDown</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">       }</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> com.gupao.study.vip;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.apache.zookeeper.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.apache.zookeeper.data.Stat;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.io.IOException;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.List;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.SortedSet;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.TreeSet;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.concurrent.CountDownLatch;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.concurrent.TimeUnit;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.concurrent.locks.Condition;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.concurrent.locks.Lock;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">* &lt;br&gt;类说明 :</span></span>
<span class="line"><span style="color:#6A737D;">* 基于 Lock 来实现分布式锁，</span></span>
<span class="line"><span style="color:#6A737D;">*</span></span>
<span class="line"><span style="color:#6A737D;">* &lt;br&gt;属性说明：</span></span>
<span class="line"><span style="color:#6A737D;">* &lt;br&gt;作者：Darian</span></span>
<span class="line"><span style="color:#6A737D;">**/</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DistributedLock</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Lock</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Watcher</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// 首先定义一个 zookeeper 的连接</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> ZooKeeper zooKeeper </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// 定义根节点</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String ROOT_LOCK </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/locks&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// 等待前一个锁 ，得到监控的前一个锁的节点</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String WAIT_LOCK;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// 表示当前的锁</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String CURRENT_LOCK;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// 用来做处理</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> CountDownLatch countDownLatch;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DistributedLock</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">           zooKeeper </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ZooKeeper</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;192.168.136.128:2181&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                   </span><span style="color:#005CC5;">4000</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#6A737D;">// 判断根节点是否存在</span></span>
<span class="line"><span style="color:#24292E;">           Stat stat </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> zooKeeper.</span><span style="color:#6F42C1;">exists</span><span style="color:#24292E;">(ROOT_LOCK, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (stat </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">               </span><span style="color:#6A737D;">// 当前的节点是不存在的</span></span>
<span class="line"><span style="color:#24292E;">               zooKeeper.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(ROOT_LOCK, </span><span style="color:#032F62;">&quot;0&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getBytes</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">                       ZooDefs.Ids.OPEN_ACL_UNSAFE,</span></span>
<span class="line"><span style="color:#24292E;">                       CreateMode.PERSISTENT);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">           }</span></span>
<span class="line"><span style="color:#24292E;">       } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">           e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">       } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (InterruptedException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">           e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">       } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (KeeperException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">           e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">       }</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">lock</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">tryLock</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#6A737D;">// 如果获得锁成功</span></span>
<span class="line"><span style="color:#24292E;">           System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(Thread.</span><span style="color:#6F42C1;">currentThread</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                   </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;--&gt;&gt;&quot;</span></span>
<span class="line"><span style="color:#24292E;">                   </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> CURRENT_LOCK</span></span>
<span class="line"><span style="color:#24292E;">                   </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;获得锁成功&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">       }</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">// 没有获得锁，继续等待获得锁</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#6F42C1;">waitForLock</span><span style="color:#24292E;">(WAIT_LOCK);</span></span>
<span class="line"><span style="color:#24292E;">       } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (KeeperException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">           e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">       } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (InterruptedException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">           e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">       }</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">   /**</span></span>
<span class="line"><span style="color:#6A737D;">    * 这是一个持续阻塞去获得所得一个过程</span></span>
<span class="line"><span style="color:#6A737D;">    **/</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">waitForLock</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">prev</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> KeeperException, InterruptedException {</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">// 因为我要等待锁的话，我需要监听上一个锁的节点</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">// 通过 exists 去监听</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">// 监听当前节点的上一个节点</span></span>
<span class="line"><span style="color:#24292E;">       Stat stat </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> zooKeeper.</span><span style="color:#6F42C1;">exists</span><span style="color:#24292E;">(prev, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (stat </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#6A737D;">// 表示上一个节点确实存在</span></span>
<span class="line"><span style="color:#24292E;">           System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(Thread.</span><span style="color:#6F42C1;">currentThread</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                   </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;--&gt;&gt;等待锁&quot;</span></span>
<span class="line"><span style="color:#24292E;">                   </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> ROOT_LOCK</span></span>
<span class="line"><span style="color:#24292E;">                   </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/&quot;</span></span>
<span class="line"><span style="color:#24292E;">                   </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> prev</span></span>
<span class="line"><span style="color:#24292E;">                   </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;释放&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">           countDownLatch </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CountDownLatch</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">           countDownLatch.</span><span style="color:#6F42C1;">await</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">           System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(Thread.</span><span style="color:#6F42C1;">currentThread</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                   </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;--&gt;&gt;获得锁成功&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">       }</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">lockInterruptibly</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> InterruptedException {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tryLock</span><span style="color:#24292E;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#6A737D;">// 创建临时有序节点</span></span>
<span class="line"><span style="color:#24292E;">           CURRENT_LOCK </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> zooKeeper.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(ROOT_LOCK </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;0&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getBytes</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">                   ZooDefs.Ids.OPEN_ACL_UNSAFE,</span></span>
<span class="line"><span style="color:#24292E;">                   CreateMode.EPHEMERAL_SEQUENTIAL);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">           System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(Thread.</span><span style="color:#6F42C1;">currentThread</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                   </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;--&gt;&gt;&quot;</span></span>
<span class="line"><span style="color:#24292E;">                   </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> CURRENT_LOCK</span></span>
<span class="line"><span style="color:#24292E;">                   </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;尝试去竞争锁&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#6A737D;">// 获取根节点下的所有子节点</span></span>
<span class="line"><span style="color:#24292E;">           List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; childrens </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> zooKeeper.</span><span style="color:#6F42C1;">getChildren</span><span style="color:#24292E;">(ROOT_LOCK, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#6A737D;">// 定义一个集合进行排序</span></span>
<span class="line"><span style="color:#24292E;">           SortedSet&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; sortedSet </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> TreeSet&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (String children </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> childrens) {</span></span>
<span class="line"><span style="color:#24292E;">               sortedSet.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(ROOT_LOCK </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> children);</span></span>
<span class="line"><span style="color:#24292E;">           }</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#6A737D;">// 获得所有子节点中最小的节点</span></span>
<span class="line"><span style="color:#24292E;">           String firstnode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sortedSet.</span><span style="color:#6F42C1;">first</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">           SortedSet&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; lessThenMe </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ((TreeSet</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">) sortedSet).</span><span style="color:#6F42C1;">headSet</span><span style="color:#24292E;">(CURRENT_LOCK);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (CURRENT_LOCK.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(firstnode)) {</span></span>
<span class="line"><span style="color:#24292E;">               </span><span style="color:#6A737D;">// 通过当前的节点和子节点中最小的节点进行比较，如果相等，标识获得锁成功</span></span>
<span class="line"><span style="color:#24292E;">               </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">           }</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">lessThenMe.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">               </span><span style="color:#6A737D;">// 如果没有比自己更小的节点</span></span>
<span class="line"><span style="color:#24292E;">               </span><span style="color:#6A737D;">// 获得比当前节点更小的最后一个节点，设置给WAIT_LOCK</span></span>
<span class="line"><span style="color:#24292E;">               WAIT_LOCK </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> lessThenMe.</span><span style="color:#6F42C1;">last</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">           }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">       } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (KeeperException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">           e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">       } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (InterruptedException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">           e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">       }</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tryLock</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#E36209;">time</span><span style="color:#24292E;">, TimeUnit </span><span style="color:#E36209;">unit</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> InterruptedException {</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">unlock</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">// 释放锁</span></span>
<span class="line"><span style="color:#24292E;">       System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(Thread.</span><span style="color:#6F42C1;">currentThread</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">               </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;--&gt;&gt;释放锁&quot;</span></span>
<span class="line"><span style="color:#24292E;">               </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> CURRENT_LOCK);</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#6A737D;">// 删除掉这个节点，version = -1 表示不管三七二十一都删掉</span></span>
<span class="line"><span style="color:#24292E;">           zooKeeper.</span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">(CURRENT_LOCK, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">           CURRENT_LOCK </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">           zooKeeper.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">       } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (InterruptedException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">           e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">       } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (KeeperException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">           e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">       }</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Condition </span><span style="color:#6F42C1;">newCondition</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">process</span><span style="color:#24292E;">(WatchedEvent </span><span style="color:#E36209;">watchedEvent</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">// 在这里边去处理监听事件</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.countDownLatch </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#6A737D;">// 去释放锁</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.countDownLatch.</span><span style="color:#6F42C1;">countDown</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">       }</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br><span class="line-number">139</span><br><span class="line-number">140</span><br><span class="line-number">141</span><br><span class="line-number">142</span><br><span class="line-number">143</span><br><span class="line-number">144</span><br><span class="line-number">145</span><br><span class="line-number">146</span><br><span class="line-number">147</span><br><span class="line-number">148</span><br><span class="line-number">149</span><br><span class="line-number">150</span><br><span class="line-number">151</span><br><span class="line-number">152</span><br><span class="line-number">153</span><br><span class="line-number">154</span><br><span class="line-number">155</span><br><span class="line-number">156</span><br><span class="line-number">157</span><br><span class="line-number">158</span><br><span class="line-number">159</span><br><span class="line-number">160</span><br><span class="line-number">161</span><br><span class="line-number">162</span><br><span class="line-number">163</span><br><span class="line-number">164</span><br><span class="line-number">165</span><br><span class="line-number">166</span><br><span class="line-number">167</span><br><span class="line-number">168</span><br><span class="line-number">169</span><br><span class="line-number">170</span><br><span class="line-number">171</span><br><span class="line-number">172</span><br><span class="line-number">173</span><br><span class="line-number">174</span><br><span class="line-number">175</span><br><span class="line-number">176</span><br><span class="line-number">177</span><br><span class="line-number">178</span><br><span class="line-number">179</span><br><span class="line-number">180</span><br><span class="line-number">181</span><br><span class="line-number">182</span><br><span class="line-number">183</span><br><span class="line-number">184</span><br><span class="line-number">185</span><br><span class="line-number">186</span><br><span class="line-number">187</span><br><span class="line-number">188</span><br><span class="line-number">189</span><br></div></div><h3 id="testdistrubutedlock-测试类" tabindex="-1">TestDistrubutedLock 测试类 <a class="header-anchor" href="#testdistrubutedlock-测试类" aria-label="Permalink to &quot;TestDistrubutedLock  测试类&quot;">​</a></h3><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> com.gupao.study.vip;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.io.IOException;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.concurrent.CountDownLatch;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">* &lt;br&gt;类说明 :</span></span>
<span class="line"><span style="color:#6A737D;">* &lt;br&gt;属性说明：</span></span>
<span class="line"><span style="color:#6A737D;">* &lt;br&gt;作者：Darian</span></span>
<span class="line"><span style="color:#6A737D;">**/</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestDistributedLock</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> IOException {</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> CountDownLatch countDownLatch </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CountDownLatch</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Thread</span><span style="color:#E1E4E8;">(()</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">               </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                   countDownLatch.</span><span style="color:#B392F0;">await</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                   DistributedLock distributedLock </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DistributedLock</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                   </span><span style="color:#6A737D;">// 获得锁</span></span>
<span class="line"><span style="color:#E1E4E8;">                   distributedLock.</span><span style="color:#B392F0;">lock</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">               } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (InterruptedException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                   e.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">               }</span></span>
<span class="line"><span style="color:#E1E4E8;">           }, </span><span style="color:#9ECBFF;">&quot;Thread-&quot;</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">i).</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">           countDownLatch.</span><span style="color:#B392F0;">countDown</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">       }</span></span>
<span class="line"><span style="color:#E1E4E8;">       System.in.</span><span style="color:#B392F0;">read</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> com.gupao.study.vip;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.io.IOException;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.concurrent.CountDownLatch;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">* &lt;br&gt;类说明 :</span></span>
<span class="line"><span style="color:#6A737D;">* &lt;br&gt;属性说明：</span></span>
<span class="line"><span style="color:#6A737D;">* &lt;br&gt;作者：Darian</span></span>
<span class="line"><span style="color:#6A737D;">**/</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestDistributedLock</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> IOException {</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> CountDownLatch countDownLatch </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CountDownLatch</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Thread</span><span style="color:#24292E;">(()</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">               </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                   countDownLatch.</span><span style="color:#6F42C1;">await</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                   DistributedLock distributedLock </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DistributedLock</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                   </span><span style="color:#6A737D;">// 获得锁</span></span>
<span class="line"><span style="color:#24292E;">                   distributedLock.</span><span style="color:#6F42C1;">lock</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">               } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (InterruptedException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                   e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">               }</span></span>
<span class="line"><span style="color:#24292E;">           }, </span><span style="color:#032F62;">&quot;Thread-&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">i).</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">           countDownLatch.</span><span style="color:#6F42C1;">countDown</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">       }</span></span>
<span class="line"><span style="color:#24292E;">       System.in.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><h2 id="控制台" tabindex="-1">控制台 <a class="header-anchor" href="#控制台" aria-label="Permalink to &quot;控制台&quot;">​</a></h2><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Thread</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">3</span><span style="color:#F97583;">--&gt;&gt;/</span><span style="color:#E1E4E8;">locks</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">0000000033尝试去竞争锁</span></span>
<span class="line"><span style="color:#E1E4E8;">Thread</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">9</span><span style="color:#F97583;">--&gt;&gt;/</span><span style="color:#E1E4E8;">locks</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">0000000030尝试去竞争锁</span></span>
<span class="line"><span style="color:#E1E4E8;">Thread</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">4</span><span style="color:#F97583;">--&gt;&gt;/</span><span style="color:#E1E4E8;">locks</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">0000000034尝试去竞争锁</span></span>
<span class="line"><span style="color:#E1E4E8;">Thread</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">--&gt;&gt;/</span><span style="color:#E1E4E8;">locks</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">0000000031尝试去竞争锁</span></span>
<span class="line"><span style="color:#E1E4E8;">Thread</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">8</span><span style="color:#F97583;">--&gt;&gt;/</span><span style="color:#E1E4E8;">locks</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">0000000036尝试去竞争锁</span></span>
<span class="line"><span style="color:#E1E4E8;">Thread</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">7</span><span style="color:#F97583;">--&gt;&gt;/</span><span style="color:#E1E4E8;">locks</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">0000000032尝试去竞争锁</span></span>
<span class="line"><span style="color:#E1E4E8;">Thread</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">5</span><span style="color:#F97583;">--&gt;&gt;/</span><span style="color:#E1E4E8;">locks</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">0000000035尝试去竞争锁</span></span>
<span class="line"><span style="color:#E1E4E8;">Thread</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">6</span><span style="color:#F97583;">--&gt;&gt;/</span><span style="color:#E1E4E8;">locks</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">0000000039尝试去竞争锁</span></span>
<span class="line"><span style="color:#E1E4E8;">Thread</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">2</span><span style="color:#F97583;">--&gt;&gt;/</span><span style="color:#E1E4E8;">locks</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">0000000038尝试去竞争锁</span></span>
<span class="line"><span style="color:#E1E4E8;">Thread</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">--&gt;&gt;/</span><span style="color:#E1E4E8;">locks</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">0000000037尝试去竞争锁</span></span>
<span class="line"><span style="color:#E1E4E8;">Thread</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">9</span><span style="color:#F97583;">--&gt;&gt;/</span><span style="color:#E1E4E8;">locks</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">0000000030获得锁成功</span></span>
<span class="line"><span style="color:#E1E4E8;">Thread</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">4</span><span style="color:#F97583;">--&gt;&gt;</span><span style="color:#E1E4E8;">等待锁</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">locks</span><span style="color:#6A737D;">//locks/0000000033释放</span></span>
<span class="line"><span style="color:#E1E4E8;">Thread</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">8</span><span style="color:#F97583;">--&gt;&gt;</span><span style="color:#E1E4E8;">等待锁</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">locks</span><span style="color:#6A737D;">//locks/0000000035释放</span></span>
<span class="line"><span style="color:#E1E4E8;">Thread</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">2</span><span style="color:#F97583;">--&gt;&gt;</span><span style="color:#E1E4E8;">等待锁</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">locks</span><span style="color:#6A737D;">//locks/0000000037释放</span></span>
<span class="line"><span style="color:#E1E4E8;">Thread</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">5</span><span style="color:#F97583;">--&gt;&gt;</span><span style="color:#E1E4E8;">等待锁</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">locks</span><span style="color:#6A737D;">//locks/0000000034释放</span></span>
<span class="line"><span style="color:#E1E4E8;">Thread</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">3</span><span style="color:#F97583;">--&gt;&gt;</span><span style="color:#E1E4E8;">等待锁</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">locks</span><span style="color:#6A737D;">//locks/0000000032释放</span></span>
<span class="line"><span style="color:#E1E4E8;">Thread</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">7</span><span style="color:#F97583;">--&gt;&gt;</span><span style="color:#E1E4E8;">等待锁</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">locks</span><span style="color:#6A737D;">//locks/0000000031释放</span></span>
<span class="line"><span style="color:#E1E4E8;">Thread</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">--&gt;&gt;</span><span style="color:#E1E4E8;">等待锁</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">locks</span><span style="color:#6A737D;">//locks/0000000036释放</span></span>
<span class="line"><span style="color:#E1E4E8;">Thread</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">--&gt;&gt;</span><span style="color:#E1E4E8;">等待锁</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">locks</span><span style="color:#6A737D;">//locks/0000000030释放</span></span>
<span class="line"><span style="color:#E1E4E8;">Thread</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">6</span><span style="color:#F97583;">--&gt;&gt;</span><span style="color:#E1E4E8;">等待锁</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">locks</span><span style="color:#6A737D;">//locks/0000000038释放</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Thread</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">3</span><span style="color:#D73A49;">--&gt;&gt;/</span><span style="color:#24292E;">locks</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">0000000033尝试去竞争锁</span></span>
<span class="line"><span style="color:#24292E;">Thread</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">9</span><span style="color:#D73A49;">--&gt;&gt;/</span><span style="color:#24292E;">locks</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">0000000030尝试去竞争锁</span></span>
<span class="line"><span style="color:#24292E;">Thread</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">4</span><span style="color:#D73A49;">--&gt;&gt;/</span><span style="color:#24292E;">locks</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">0000000034尝试去竞争锁</span></span>
<span class="line"><span style="color:#24292E;">Thread</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">--&gt;&gt;/</span><span style="color:#24292E;">locks</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">0000000031尝试去竞争锁</span></span>
<span class="line"><span style="color:#24292E;">Thread</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">8</span><span style="color:#D73A49;">--&gt;&gt;/</span><span style="color:#24292E;">locks</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">0000000036尝试去竞争锁</span></span>
<span class="line"><span style="color:#24292E;">Thread</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">7</span><span style="color:#D73A49;">--&gt;&gt;/</span><span style="color:#24292E;">locks</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">0000000032尝试去竞争锁</span></span>
<span class="line"><span style="color:#24292E;">Thread</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">5</span><span style="color:#D73A49;">--&gt;&gt;/</span><span style="color:#24292E;">locks</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">0000000035尝试去竞争锁</span></span>
<span class="line"><span style="color:#24292E;">Thread</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">6</span><span style="color:#D73A49;">--&gt;&gt;/</span><span style="color:#24292E;">locks</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">0000000039尝试去竞争锁</span></span>
<span class="line"><span style="color:#24292E;">Thread</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">2</span><span style="color:#D73A49;">--&gt;&gt;/</span><span style="color:#24292E;">locks</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">0000000038尝试去竞争锁</span></span>
<span class="line"><span style="color:#24292E;">Thread</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">--&gt;&gt;/</span><span style="color:#24292E;">locks</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">0000000037尝试去竞争锁</span></span>
<span class="line"><span style="color:#24292E;">Thread</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">9</span><span style="color:#D73A49;">--&gt;&gt;/</span><span style="color:#24292E;">locks</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">0000000030获得锁成功</span></span>
<span class="line"><span style="color:#24292E;">Thread</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">4</span><span style="color:#D73A49;">--&gt;&gt;</span><span style="color:#24292E;">等待锁</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">locks</span><span style="color:#6A737D;">//locks/0000000033释放</span></span>
<span class="line"><span style="color:#24292E;">Thread</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">8</span><span style="color:#D73A49;">--&gt;&gt;</span><span style="color:#24292E;">等待锁</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">locks</span><span style="color:#6A737D;">//locks/0000000035释放</span></span>
<span class="line"><span style="color:#24292E;">Thread</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">2</span><span style="color:#D73A49;">--&gt;&gt;</span><span style="color:#24292E;">等待锁</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">locks</span><span style="color:#6A737D;">//locks/0000000037释放</span></span>
<span class="line"><span style="color:#24292E;">Thread</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">5</span><span style="color:#D73A49;">--&gt;&gt;</span><span style="color:#24292E;">等待锁</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">locks</span><span style="color:#6A737D;">//locks/0000000034释放</span></span>
<span class="line"><span style="color:#24292E;">Thread</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">3</span><span style="color:#D73A49;">--&gt;&gt;</span><span style="color:#24292E;">等待锁</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">locks</span><span style="color:#6A737D;">//locks/0000000032释放</span></span>
<span class="line"><span style="color:#24292E;">Thread</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">7</span><span style="color:#D73A49;">--&gt;&gt;</span><span style="color:#24292E;">等待锁</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">locks</span><span style="color:#6A737D;">//locks/0000000031释放</span></span>
<span class="line"><span style="color:#24292E;">Thread</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">--&gt;&gt;</span><span style="color:#24292E;">等待锁</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">locks</span><span style="color:#6A737D;">//locks/0000000036释放</span></span>
<span class="line"><span style="color:#24292E;">Thread</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">--&gt;&gt;</span><span style="color:#24292E;">等待锁</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">locks</span><span style="color:#6A737D;">//locks/0000000030释放</span></span>
<span class="line"><span style="color:#24292E;">Thread</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">6</span><span style="color:#D73A49;">--&gt;&gt;</span><span style="color:#24292E;">等待锁</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">locks</span><span style="color:#6A737D;">//locks/0000000038释放</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h2 id="xshell" tabindex="-1">Xshell <a class="header-anchor" href="#xshell" aria-label="Permalink to &quot;Xshell&quot;">​</a></h2><div class="language-verilog vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">verilog</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">2181</span><span style="color:#E1E4E8;">(CONNECTED) </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] ls </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">locks</span></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">0000000034</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0000000033</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0000000036</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0000000035</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0000000038</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0000000037</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0000000039</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0000000030</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0000000032</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0000000031</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">[zk: localhost:</span><span style="color:#79B8FF;">2181</span><span style="color:#E1E4E8;">(CONNECTED) </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">] delete </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">locks</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">0000000030</span></span>
<span class="line"><span style="color:#E1E4E8;">[zk: localhost:</span><span style="color:#79B8FF;">2181</span><span style="color:#E1E4E8;">(CONNECTED) </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">] delete </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">locks</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">0000000031</span></span>
<span class="line"><span style="color:#E1E4E8;">[zk: localhost:</span><span style="color:#79B8FF;">2181</span><span style="color:#E1E4E8;">(CONNECTED) </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">] delete </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">locks</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">0000000032</span></span>
<span class="line"><span style="color:#E1E4E8;">[zk: localhost:</span><span style="color:#79B8FF;">2181</span><span style="color:#E1E4E8;">(CONNECTED) </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">:</span><span style="color:#005CC5;">2181</span><span style="color:#24292E;">(CONNECTED) </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] ls </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">locks</span></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#005CC5;">0000000034</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0000000033</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0000000036</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0000000035</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0000000038</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0000000037</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0000000039</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0000000030</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0000000032</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0000000031</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">[zk: localhost:</span><span style="color:#005CC5;">2181</span><span style="color:#24292E;">(CONNECTED) </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">] delete </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">locks</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">0000000030</span></span>
<span class="line"><span style="color:#24292E;">[zk: localhost:</span><span style="color:#005CC5;">2181</span><span style="color:#24292E;">(CONNECTED) </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">] delete </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">locks</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">0000000031</span></span>
<span class="line"><span style="color:#24292E;">[zk: localhost:</span><span style="color:#005CC5;">2181</span><span style="color:#24292E;">(CONNECTED) </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">] delete </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">locks</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">0000000032</span></span>
<span class="line"><span style="color:#24292E;">[zk: localhost:</span><span style="color:#005CC5;">2181</span><span style="color:#24292E;">(CONNECTED) </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="控制台-1" tabindex="-1">控制台 <a class="header-anchor" href="#控制台-1" aria-label="Permalink to &quot;控制台&quot;">​</a></h2><div class="language-verilog vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">verilog</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Thread</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">3</span><span style="color:#F97583;">--&gt;&gt;/</span><span style="color:#E1E4E8;">locks</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">0000000033尝试去竞争锁</span></span>
<span class="line"><span style="color:#E1E4E8;">Thread</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">9</span><span style="color:#F97583;">--&gt;&gt;/</span><span style="color:#E1E4E8;">locks</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">0000000030尝试去竞争锁</span></span>
<span class="line"><span style="color:#E1E4E8;">Thread</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">4</span><span style="color:#F97583;">--&gt;&gt;/</span><span style="color:#E1E4E8;">locks</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">0000000034尝试去竞争锁</span></span>
<span class="line"><span style="color:#E1E4E8;">Thread</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">--&gt;&gt;/</span><span style="color:#E1E4E8;">locks</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">0000000031尝试去竞争锁</span></span>
<span class="line"><span style="color:#E1E4E8;">Thread</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">8</span><span style="color:#F97583;">--&gt;&gt;/</span><span style="color:#E1E4E8;">locks</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">0000000036尝试去竞争锁</span></span>
<span class="line"><span style="color:#E1E4E8;">Thread</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">7</span><span style="color:#F97583;">--&gt;&gt;/</span><span style="color:#E1E4E8;">locks</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">0000000032尝试去竞争锁</span></span>
<span class="line"><span style="color:#E1E4E8;">Thread</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">5</span><span style="color:#F97583;">--&gt;&gt;/</span><span style="color:#E1E4E8;">locks</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">0000000035尝试去竞争锁</span></span>
<span class="line"><span style="color:#E1E4E8;">Thread</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">6</span><span style="color:#F97583;">--&gt;&gt;/</span><span style="color:#E1E4E8;">locks</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">0000000039尝试去竞争锁</span></span>
<span class="line"><span style="color:#E1E4E8;">Thread</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">2</span><span style="color:#F97583;">--&gt;&gt;/</span><span style="color:#E1E4E8;">locks</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">0000000038尝试去竞争锁</span></span>
<span class="line"><span style="color:#E1E4E8;">Thread</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">--&gt;&gt;/</span><span style="color:#E1E4E8;">locks</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">0000000037尝试去竞争锁</span></span>
<span class="line"><span style="color:#E1E4E8;">Thread</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">9</span><span style="color:#F97583;">--&gt;&gt;/</span><span style="color:#E1E4E8;">locks</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">0000000030获得锁成功</span></span>
<span class="line"><span style="color:#E1E4E8;">Thread</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">4</span><span style="color:#F97583;">--&gt;&gt;</span><span style="color:#E1E4E8;">等待锁</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">locks</span><span style="color:#6A737D;">//locks/0000000033释放</span></span>
<span class="line"><span style="color:#E1E4E8;">Thread</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">8</span><span style="color:#F97583;">--&gt;&gt;</span><span style="color:#E1E4E8;">等待锁</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">locks</span><span style="color:#6A737D;">//locks/0000000035释放</span></span>
<span class="line"><span style="color:#E1E4E8;">Thread</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">2</span><span style="color:#F97583;">--&gt;&gt;</span><span style="color:#E1E4E8;">等待锁</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">locks</span><span style="color:#6A737D;">//locks/0000000037释放</span></span>
<span class="line"><span style="color:#E1E4E8;">Thread</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">5</span><span style="color:#F97583;">--&gt;&gt;</span><span style="color:#E1E4E8;">等待锁</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">locks</span><span style="color:#6A737D;">//locks/0000000034释放</span></span>
<span class="line"><span style="color:#E1E4E8;">Thread</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">3</span><span style="color:#F97583;">--&gt;&gt;</span><span style="color:#E1E4E8;">等待锁</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">locks</span><span style="color:#6A737D;">//locks/0000000032释放</span></span>
<span class="line"><span style="color:#E1E4E8;">Thread</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">7</span><span style="color:#F97583;">--&gt;&gt;</span><span style="color:#E1E4E8;">等待锁</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">locks</span><span style="color:#6A737D;">//locks/0000000031释放</span></span>
<span class="line"><span style="color:#E1E4E8;">Thread</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">--&gt;&gt;</span><span style="color:#E1E4E8;">等待锁</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">locks</span><span style="color:#6A737D;">//locks/0000000036释放</span></span>
<span class="line"><span style="color:#E1E4E8;">Thread</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">--&gt;&gt;</span><span style="color:#E1E4E8;">等待锁</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">locks</span><span style="color:#6A737D;">//locks/0000000030释放</span></span>
<span class="line"><span style="color:#E1E4E8;">Thread</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">6</span><span style="color:#F97583;">--&gt;&gt;</span><span style="color:#E1E4E8;">等待锁</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">locks</span><span style="color:#6A737D;">//locks/0000000038释放</span></span>
<span class="line"><span style="color:#E1E4E8;">Thread</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">--&gt;&gt;</span><span style="color:#E1E4E8;">获得锁成功</span></span>
<span class="line"><span style="color:#E1E4E8;">Thread</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">7</span><span style="color:#F97583;">--&gt;&gt;</span><span style="color:#E1E4E8;">获得锁成功</span></span>
<span class="line"><span style="color:#E1E4E8;">Thread</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">3</span><span style="color:#F97583;">--&gt;&gt;</span><span style="color:#E1E4E8;">获得锁成功</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Thread</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">3</span><span style="color:#D73A49;">--&gt;&gt;/</span><span style="color:#24292E;">locks</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">0000000033尝试去竞争锁</span></span>
<span class="line"><span style="color:#24292E;">Thread</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">9</span><span style="color:#D73A49;">--&gt;&gt;/</span><span style="color:#24292E;">locks</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">0000000030尝试去竞争锁</span></span>
<span class="line"><span style="color:#24292E;">Thread</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">4</span><span style="color:#D73A49;">--&gt;&gt;/</span><span style="color:#24292E;">locks</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">0000000034尝试去竞争锁</span></span>
<span class="line"><span style="color:#24292E;">Thread</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">--&gt;&gt;/</span><span style="color:#24292E;">locks</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">0000000031尝试去竞争锁</span></span>
<span class="line"><span style="color:#24292E;">Thread</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">8</span><span style="color:#D73A49;">--&gt;&gt;/</span><span style="color:#24292E;">locks</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">0000000036尝试去竞争锁</span></span>
<span class="line"><span style="color:#24292E;">Thread</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">7</span><span style="color:#D73A49;">--&gt;&gt;/</span><span style="color:#24292E;">locks</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">0000000032尝试去竞争锁</span></span>
<span class="line"><span style="color:#24292E;">Thread</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">5</span><span style="color:#D73A49;">--&gt;&gt;/</span><span style="color:#24292E;">locks</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">0000000035尝试去竞争锁</span></span>
<span class="line"><span style="color:#24292E;">Thread</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">6</span><span style="color:#D73A49;">--&gt;&gt;/</span><span style="color:#24292E;">locks</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">0000000039尝试去竞争锁</span></span>
<span class="line"><span style="color:#24292E;">Thread</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">2</span><span style="color:#D73A49;">--&gt;&gt;/</span><span style="color:#24292E;">locks</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">0000000038尝试去竞争锁</span></span>
<span class="line"><span style="color:#24292E;">Thread</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">--&gt;&gt;/</span><span style="color:#24292E;">locks</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">0000000037尝试去竞争锁</span></span>
<span class="line"><span style="color:#24292E;">Thread</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">9</span><span style="color:#D73A49;">--&gt;&gt;/</span><span style="color:#24292E;">locks</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">0000000030获得锁成功</span></span>
<span class="line"><span style="color:#24292E;">Thread</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">4</span><span style="color:#D73A49;">--&gt;&gt;</span><span style="color:#24292E;">等待锁</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">locks</span><span style="color:#6A737D;">//locks/0000000033释放</span></span>
<span class="line"><span style="color:#24292E;">Thread</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">8</span><span style="color:#D73A49;">--&gt;&gt;</span><span style="color:#24292E;">等待锁</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">locks</span><span style="color:#6A737D;">//locks/0000000035释放</span></span>
<span class="line"><span style="color:#24292E;">Thread</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">2</span><span style="color:#D73A49;">--&gt;&gt;</span><span style="color:#24292E;">等待锁</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">locks</span><span style="color:#6A737D;">//locks/0000000037释放</span></span>
<span class="line"><span style="color:#24292E;">Thread</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">5</span><span style="color:#D73A49;">--&gt;&gt;</span><span style="color:#24292E;">等待锁</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">locks</span><span style="color:#6A737D;">//locks/0000000034释放</span></span>
<span class="line"><span style="color:#24292E;">Thread</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">3</span><span style="color:#D73A49;">--&gt;&gt;</span><span style="color:#24292E;">等待锁</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">locks</span><span style="color:#6A737D;">//locks/0000000032释放</span></span>
<span class="line"><span style="color:#24292E;">Thread</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">7</span><span style="color:#D73A49;">--&gt;&gt;</span><span style="color:#24292E;">等待锁</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">locks</span><span style="color:#6A737D;">//locks/0000000031释放</span></span>
<span class="line"><span style="color:#24292E;">Thread</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">--&gt;&gt;</span><span style="color:#24292E;">等待锁</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">locks</span><span style="color:#6A737D;">//locks/0000000036释放</span></span>
<span class="line"><span style="color:#24292E;">Thread</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">--&gt;&gt;</span><span style="color:#24292E;">等待锁</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">locks</span><span style="color:#6A737D;">//locks/0000000030释放</span></span>
<span class="line"><span style="color:#24292E;">Thread</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">6</span><span style="color:#D73A49;">--&gt;&gt;</span><span style="color:#24292E;">等待锁</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">locks</span><span style="color:#6A737D;">//locks/0000000038释放</span></span>
<span class="line"><span style="color:#24292E;">Thread</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">--&gt;&gt;</span><span style="color:#24292E;">获得锁成功</span></span>
<span class="line"><span style="color:#24292E;">Thread</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">7</span><span style="color:#D73A49;">--&gt;&gt;</span><span style="color:#24292E;">获得锁成功</span></span>
<span class="line"><span style="color:#24292E;">Thread</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">3</span><span style="color:#D73A49;">--&gt;&gt;</span><span style="color:#24292E;">获得锁成功</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>Curator 是对 zookeeper 应用场景的一个封装。</p><p><code>Maven:org.apache.curator:curator-recipes:4.0.0</code></p><p>包结构</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">|</span><span style="color:#B392F0;">org.apache.curator.framework.recipes</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">|</span><span style="color:#B392F0;">-atomic</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">|</span><span style="color:#B392F0;">-barriers</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">|</span><span style="color:#B392F0;">-cache</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">|</span><span style="color:#B392F0;">-leader</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">|</span><span style="color:#B392F0;">-locks</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">|</span><span style="color:#B392F0;">-nodes</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">|</span><span style="color:#B392F0;">-queue</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">|</span><span style="color:#B392F0;">-shared</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">org.apache.curator.framework.recipes</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">-atomic</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">-barriers</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">-cache</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">-leader</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">-locks</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">-nodes</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">-queue</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">-shared</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>这些包都是对 zookeeper 的 API 做的一个高度的封装。</p><p>我们就不需要去写很复杂的东西。</p><h1 id="利用curator实现分布式锁" tabindex="-1">利用curator实现分布式锁 <a class="header-anchor" href="#利用curator实现分布式锁" aria-label="Permalink to &quot;利用curator实现分布式锁&quot;">​</a></h1><h3 id="代码-1" tabindex="-1">代码 <a class="header-anchor" href="#代码-1" aria-label="Permalink to &quot;代码&quot;">​</a></h3><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> com.gupao.study.vip;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.apache.curator.framework.CuratorFramework;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.apache.curator.framework.CuratorFrameworkFactory;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.apache.curator.framework.recipes.locks.InterProcessMutex;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * &lt;br&gt;类说明 :</span></span>
<span class="line"><span style="color:#6A737D;"> * &lt;br&gt;属性说明：</span></span>
<span class="line"><span style="color:#6A737D;"> * &lt;br&gt;作者：Darian</span></span>
<span class="line"><span style="color:#6A737D;"> **/</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CuratorDemo</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">         * 获取分布式锁，</span></span>
<span class="line"><span style="color:#6A737D;">         * 是利用最小节点的特性去实现的</span></span>
<span class="line"><span style="color:#6A737D;">         * InterProcessMutex 是个可重入锁</span></span>
<span class="line"><span style="color:#6A737D;">         *</span></span>
<span class="line"><span style="color:#6A737D;">         **/</span></span>
<span class="line"><span style="color:#E1E4E8;">        CuratorFramework curatorFramework </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">                CuratorFrameworkFactory.</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        InterProcessMutex interProcessMutex </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InterProcessMutex</span><span style="color:#E1E4E8;">(curatorFramework,</span><span style="color:#9ECBFF;">&quot;/locks&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 去获得锁</span></span>
<span class="line"><span style="color:#E1E4E8;">            interProcessMutex.</span><span style="color:#B392F0;">acquire</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Exception </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            e.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> com.gupao.study.vip;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.apache.curator.framework.CuratorFramework;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.apache.curator.framework.CuratorFrameworkFactory;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.apache.curator.framework.recipes.locks.InterProcessMutex;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * &lt;br&gt;类说明 :</span></span>
<span class="line"><span style="color:#6A737D;"> * &lt;br&gt;属性说明：</span></span>
<span class="line"><span style="color:#6A737D;"> * &lt;br&gt;作者：Darian</span></span>
<span class="line"><span style="color:#6A737D;"> **/</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CuratorDemo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">         * 获取分布式锁，</span></span>
<span class="line"><span style="color:#6A737D;">         * 是利用最小节点的特性去实现的</span></span>
<span class="line"><span style="color:#6A737D;">         * InterProcessMutex 是个可重入锁</span></span>
<span class="line"><span style="color:#6A737D;">         *</span></span>
<span class="line"><span style="color:#6A737D;">         **/</span></span>
<span class="line"><span style="color:#24292E;">        CuratorFramework curatorFramework </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">                CuratorFrameworkFactory.</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        InterProcessMutex interProcessMutex </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InterProcessMutex</span><span style="color:#24292E;">(curatorFramework,</span><span style="color:#032F62;">&quot;/locks&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 去获得锁</span></span>
<span class="line"><span style="color:#24292E;">            interProcessMutex.</span><span style="color:#6F42C1;">acquire</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Exception </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><h4 id="curator实现分布式锁原理分析" tabindex="-1">Curator实现分布式锁原理分析 <a class="header-anchor" href="#curator实现分布式锁原理分析" aria-label="Permalink to &quot;Curator实现分布式锁原理分析&quot;">​</a></h4><h5 id="interporcessmutex-class" tabindex="-1">InterPorcessMutex.class <a class="header-anchor" href="#interporcessmutex-class" aria-label="Permalink to &quot;InterPorcessMutex.class&quot;">​</a></h5><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InterProcessMutex</span><span style="color:#E1E4E8;">(CuratorFramework client, String path) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">(client, path, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StandardLockInternalsDriver</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InterProcessMutex</span><span style="color:#24292E;">(CuratorFramework client, String path) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">(client, path, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StandardLockInternalsDriver</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h5 id="interporcessmutex-class-1" tabindex="-1">InterPorcessMutex.class <a class="header-anchor" href="#interporcessmutex-class-1" aria-label="Permalink to &quot;InterPorcessMutex.class&quot;">​</a></h5><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InterProcessMutex</span><span style="color:#E1E4E8;">(CuratorFramework client, String path, LockInternalsDriver driver) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">(client, path, </span><span style="color:#9ECBFF;">&quot;lock-&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, driver);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InterProcessMutex</span><span style="color:#24292E;">(CuratorFramework client, String path, LockInternalsDriver driver) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">(client, path, </span><span style="color:#032F62;">&quot;lock-&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, driver);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h5 id="interporcessmutex-class-2" tabindex="-1">InterPorcessMutex.class <a class="header-anchor" href="#interporcessmutex-class-2" aria-label="Permalink to &quot;InterPorcessMutex.class&quot;">​</a></h5><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">InterProcessMutex</span><span style="color:#E1E4E8;">(CuratorFramework client, String path, String lockName, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> maxLeases, LockInternalsDriver driver) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.threadData </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Maps.</span><span style="color:#B392F0;">newConcurrentMap</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.basePath </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> PathUtils.</span><span style="color:#B392F0;">validatePath</span><span style="color:#E1E4E8;">(path);</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.internals </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">LockInternals</span><span style="color:#E1E4E8;">(client, driver, path, lockName, maxLeases);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">InterProcessMutex</span><span style="color:#24292E;">(CuratorFramework client, String path, String lockName, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> maxLeases, LockInternalsDriver driver) {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.threadData </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Maps.</span><span style="color:#6F42C1;">newConcurrentMap</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.basePath </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> PathUtils.</span><span style="color:#6F42C1;">validatePath</span><span style="color:#24292E;">(path);</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.internals </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LockInternals</span><span style="color:#24292E;">(client, driver, path, lockName, maxLeases);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h5 id="获得锁" tabindex="-1">获得锁 <a class="header-anchor" href="#获得锁" aria-label="Permalink to &quot;获得锁&quot;">​</a></h5><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 去获得锁</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> interProcessMutex.</span><span style="color:#B392F0;">acquire</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 去获得锁</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> interProcessMutex.</span><span style="color:#6F42C1;">acquire</span><span style="color:#24292E;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h5 id="interprocessmutex" tabindex="-1">InterProcessMutex <a class="header-anchor" href="#interprocessmutex" aria-label="Permalink to &quot;InterProcessMutex&quot;">​</a></h5><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">acquire</span><span style="color:#E1E4E8;">() throws Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">internalLock</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1L</span><span style="color:#E1E4E8;">, (TimeUnit)</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IOException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Lost connection while trying to acquire lock: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.basePath);</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">acquire</span><span style="color:#24292E;">() throws Exception {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">internalLock</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1L</span><span style="color:#24292E;">, (TimeUnit)</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IOException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Lost connection while trying to acquire lock: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.basePath);</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h5 id="interprocessmutx" tabindex="-1">interprocessMutx <a class="header-anchor" href="#interprocessmutx" aria-label="Permalink to &quot;interprocessMutx&quot;">​</a></h5><p>获得锁的核心逻辑</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">internalLock</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> time, TimeUnit unit) throws Exception</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">      Note on concurrency: a given lockData instance</span></span>
<span class="line"><span style="color:#6A737D;">      can be only acted on by a single thread so locking isn&#39;t necessary</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   Thread currentThread </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Thread.</span><span style="color:#B392F0;">currentThread</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span></span>
<span class="line"><span style="color:#6A737D;">// 因可重入锁，所以先判断当前那线程是不是存在</span></span>
<span class="line"><span style="color:#6A737D;">// 如果是的话，表示当前这个线程已经获得锁了</span></span>
<span class="line"><span style="color:#E1E4E8;">   LockData lockData </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> threadData.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(currentThread);</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ( lockData </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> )</span></span>
<span class="line"><span style="color:#E1E4E8;">   {</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#6A737D;">// re-entering</span></span>
<span class="line"><span style="color:#6A737D;">// 它获得锁的计数做一个递增就好了</span></span>
<span class="line"><span style="color:#E1E4E8;">       lockData.lockCount.</span><span style="color:#B392F0;">incrementAndGet</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#6A737D;">//所以就不需要去再次获得锁，这是可重入锁的一个特性</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// 这是去尝试获得所得代码</span></span>
<span class="line"><span style="color:#E1E4E8;">   String lockPath </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> internals.</span><span style="color:#B392F0;">attemptLock</span><span style="color:#E1E4E8;">(time, unit, </span><span style="color:#B392F0;">getLockNodeBytes</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ( lockPath </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> )</span></span>
<span class="line"><span style="color:#E1E4E8;">   {</span></span>
<span class="line"><span style="color:#E1E4E8;">       LockData newLockData </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">LockData</span><span style="color:#E1E4E8;">(currentThread, lockPath);</span></span>
<span class="line"><span style="color:#E1E4E8;">       threadData.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(currentThread, newLockData);</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">internalLock</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> time, TimeUnit unit) throws Exception</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">      Note on concurrency: a given lockData instance</span></span>
<span class="line"><span style="color:#6A737D;">      can be only acted on by a single thread so locking isn&#39;t necessary</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   Thread currentThread </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Thread.</span><span style="color:#6F42C1;">currentThread</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">   </span></span>
<span class="line"><span style="color:#6A737D;">// 因可重入锁，所以先判断当前那线程是不是存在</span></span>
<span class="line"><span style="color:#6A737D;">// 如果是的话，表示当前这个线程已经获得锁了</span></span>
<span class="line"><span style="color:#24292E;">   LockData lockData </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> threadData.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(currentThread);</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ( lockData </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> )</span></span>
<span class="line"><span style="color:#24292E;">   {</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">// re-entering</span></span>
<span class="line"><span style="color:#6A737D;">// 它获得锁的计数做一个递增就好了</span></span>
<span class="line"><span style="color:#24292E;">       lockData.lockCount.</span><span style="color:#6F42C1;">incrementAndGet</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#6A737D;">//所以就不需要去再次获得锁，这是可重入锁的一个特性</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">// 这是去尝试获得所得代码</span></span>
<span class="line"><span style="color:#24292E;">   String lockPath </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> internals.</span><span style="color:#6F42C1;">attemptLock</span><span style="color:#24292E;">(time, unit, </span><span style="color:#6F42C1;">getLockNodeBytes</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ( lockPath </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> )</span></span>
<span class="line"><span style="color:#24292E;">   {</span></span>
<span class="line"><span style="color:#24292E;">       LockData newLockData </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LockData</span><span style="color:#24292E;">(currentThread, lockPath);</span></span>
<span class="line"><span style="color:#24292E;">       threadData.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(currentThread, newLockData);</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><h5 id="lockinternals" tabindex="-1">LockInternals <a class="header-anchor" href="#lockinternals" aria-label="Permalink to &quot;LockInternals&quot;">​</a></h5><p>这是去尝试获得锁的一个代码</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">String </span><span style="color:#B392F0;">attemptLock</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> time, TimeUnit unit, </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[] lockNodeBytes) throws Exception</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;">      startMillis </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> System.</span><span style="color:#B392F0;">currentTimeMillis</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Long      millisToWait </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (unit </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> unit.</span><span style="color:#B392F0;">toMillis</span><span style="color:#E1E4E8;">(time) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[]    localLockNodeBytes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (revocable.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> lockNodeBytes;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">             retryCount </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   String          ourPath </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;">         hasTheLock </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;">         isDone </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> ( </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">isDone )</span></span>
<span class="line"><span style="color:#E1E4E8;">   {</span></span>
<span class="line"><span style="color:#E1E4E8;">       isDone </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">try</span></span>
<span class="line"><span style="color:#E1E4E8;">       {</span></span>
<span class="line"><span style="color:#6A737D;">// 去创建一个节点</span></span>
<span class="line"><span style="color:#E1E4E8;">           ourPath </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> driver.</span><span style="color:#B392F0;">createsTheLock</span><span style="color:#E1E4E8;">(client, path, localLockNodeBytes);</span></span>
<span class="line"><span style="color:#6A737D;">// 去判断这个节点是否可以获得锁</span></span>
<span class="line"><span style="color:#E1E4E8;">           hasTheLock </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">internalLockLoop</span><span style="color:#E1E4E8;">(startMillis, millisToWait, ourPath);</span></span>
<span class="line"><span style="color:#E1E4E8;">       }</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> ( KeeperException.NoNodeException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;"> )</span></span>
<span class="line"><span style="color:#E1E4E8;">       {</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#6A737D;">// gets thrown by StandardLockInternalsDriver when it can&#39;t find the lock node</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#6A737D;">// this can happen when the session expires, etc. So, if the retry allows, just try it all again</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ( client.</span><span style="color:#B392F0;">getZookeeperClient</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getRetryPolicy</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">allowRetry</span><span style="color:#E1E4E8;">(retryCount</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">, System.</span><span style="color:#B392F0;">currentTimeMillis</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> startMillis, RetryLoop.</span><span style="color:#B392F0;">getDefaultRetrySleeper</span><span style="color:#E1E4E8;">()) )</span></span>
<span class="line"><span style="color:#E1E4E8;">           {</span></span>
<span class="line"><span style="color:#E1E4E8;">               isDone </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">           }</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#F97583;">else</span></span>
<span class="line"><span style="color:#E1E4E8;">           {</span></span>
<span class="line"><span style="color:#E1E4E8;">               </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> e;</span></span>
<span class="line"><span style="color:#E1E4E8;">           }</span></span>
<span class="line"><span style="color:#E1E4E8;">       }</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ( hasTheLock )</span></span>
<span class="line"><span style="color:#E1E4E8;">   {</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ourPath;</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">String </span><span style="color:#6F42C1;">attemptLock</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> time, TimeUnit unit, </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[] lockNodeBytes) throws Exception</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">long</span><span style="color:#24292E;">      startMillis </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> System.</span><span style="color:#6F42C1;">currentTimeMillis</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Long      millisToWait </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (unit </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> unit.</span><span style="color:#6F42C1;">toMillis</span><span style="color:#24292E;">(time) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[]    localLockNodeBytes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (revocable.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> lockNodeBytes;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">             retryCount </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   String          ourPath </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;">         hasTheLock </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;">         isDone </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> ( </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">isDone )</span></span>
<span class="line"><span style="color:#24292E;">   {</span></span>
<span class="line"><span style="color:#24292E;">       isDone </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">try</span></span>
<span class="line"><span style="color:#24292E;">       {</span></span>
<span class="line"><span style="color:#6A737D;">// 去创建一个节点</span></span>
<span class="line"><span style="color:#24292E;">           ourPath </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> driver.</span><span style="color:#6F42C1;">createsTheLock</span><span style="color:#24292E;">(client, path, localLockNodeBytes);</span></span>
<span class="line"><span style="color:#6A737D;">// 去判断这个节点是否可以获得锁</span></span>
<span class="line"><span style="color:#24292E;">           hasTheLock </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">internalLockLoop</span><span style="color:#24292E;">(startMillis, millisToWait, ourPath);</span></span>
<span class="line"><span style="color:#24292E;">       }</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> ( KeeperException.NoNodeException </span><span style="color:#E36209;">e</span><span style="color:#24292E;"> )</span></span>
<span class="line"><span style="color:#24292E;">       {</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#6A737D;">// gets thrown by StandardLockInternalsDriver when it can&#39;t find the lock node</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#6A737D;">// this can happen when the session expires, etc. So, if the retry allows, just try it all again</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ( client.</span><span style="color:#6F42C1;">getZookeeperClient</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getRetryPolicy</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">allowRetry</span><span style="color:#24292E;">(retryCount</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">, System.</span><span style="color:#6F42C1;">currentTimeMillis</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> startMillis, RetryLoop.</span><span style="color:#6F42C1;">getDefaultRetrySleeper</span><span style="color:#24292E;">()) )</span></span>
<span class="line"><span style="color:#24292E;">           {</span></span>
<span class="line"><span style="color:#24292E;">               isDone </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">           }</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#D73A49;">else</span></span>
<span class="line"><span style="color:#24292E;">           {</span></span>
<span class="line"><span style="color:#24292E;">               </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> e;</span></span>
<span class="line"><span style="color:#24292E;">           }</span></span>
<span class="line"><span style="color:#24292E;">       }</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ( hasTheLock )</span></span>
<span class="line"><span style="color:#24292E;">   {</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ourPath;</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><h5 id="standardlockinternalsdriver" tabindex="-1">StandardLockInternalsDriver <a class="header-anchor" href="#standardlockinternalsdriver" aria-label="Permalink to &quot;StandardLockInternalsDriver&quot;">​</a></h5><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">createsTheLock</span><span style="color:#E1E4E8;">(CuratorFramework client, String path, </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[] lockNodeBytes) throws Exception</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">   String ourPath;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ( lockNodeBytes </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> )</span></span>
<span class="line"><span style="color:#E1E4E8;">   {</span></span>
<span class="line"><span style="color:#6A737D;">// 创建的是临时有序节点</span></span>
<span class="line"><span style="color:#E1E4E8;">       ourPath </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> client.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">creatingParentContainersIfNeeded</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">withProtection</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">withMode</span><span style="color:#E1E4E8;">(CreateMode.EPHEMERAL_SEQUENTIAL).</span><span style="color:#B392F0;">forPath</span><span style="color:#E1E4E8;">(path, lockNodeBytes);</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">else</span></span>
<span class="line"><span style="color:#E1E4E8;">   {</span></span>
<span class="line"><span style="color:#E1E4E8;">       ourPath </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> client.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">creatingParentContainersIfNeeded</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">withProtection</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">withMode</span><span style="color:#E1E4E8;">(CreateMode.EPHEMERAL_SEQUENTIAL).</span><span style="color:#B392F0;">forPath</span><span style="color:#E1E4E8;">(path);</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ourPath;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">createsTheLock</span><span style="color:#24292E;">(CuratorFramework client, String path, </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[] lockNodeBytes) throws Exception</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">   String ourPath;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ( lockNodeBytes </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> )</span></span>
<span class="line"><span style="color:#24292E;">   {</span></span>
<span class="line"><span style="color:#6A737D;">// 创建的是临时有序节点</span></span>
<span class="line"><span style="color:#24292E;">       ourPath </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> client.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">creatingParentContainersIfNeeded</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">withProtection</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">withMode</span><span style="color:#24292E;">(CreateMode.EPHEMERAL_SEQUENTIAL).</span><span style="color:#6F42C1;">forPath</span><span style="color:#24292E;">(path, lockNodeBytes);</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">else</span></span>
<span class="line"><span style="color:#24292E;">   {</span></span>
<span class="line"><span style="color:#24292E;">       ourPath </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> client.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">creatingParentContainersIfNeeded</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">withProtection</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">withMode</span><span style="color:#24292E;">(CreateMode.EPHEMERAL_SEQUENTIAL).</span><span style="color:#6F42C1;">forPath</span><span style="color:#24292E;">(path);</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ourPath;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h5 id="interprocessmutex-1" tabindex="-1">InterProcessMutex <a class="header-anchor" href="#interprocessmutex-1" aria-label="Permalink to &quot;InterProcessMutex&quot;">​</a></h5><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">internalLockLoop</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> startMillis, Long millisToWait, String ourPath) throws Exception</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#6A737D;">// 它去做了一个循环处理，还设置了过期时间。</span></span>
<span class="line"><span style="color:#6A737D;">// 获得锁的一个机制，等待锁的一个时间，它都有一个处理</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;">     haveTheLock </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;">     doDelete </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">try</span></span>
<span class="line"><span style="color:#E1E4E8;">   {</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ( revocable.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> )</span></span>
<span class="line"><span style="color:#E1E4E8;">       {</span></span>
<span class="line"><span style="color:#E1E4E8;">           client.</span><span style="color:#B392F0;">getData</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">usingWatcher</span><span style="color:#E1E4E8;">(revocableWatcher).</span><span style="color:#B392F0;">forPath</span><span style="color:#E1E4E8;">(ourPath);</span></span>
<span class="line"><span style="color:#E1E4E8;">       }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> ( (client.</span><span style="color:#B392F0;">getState</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> CuratorFrameworkState.STARTED) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">haveTheLock )</span></span>
<span class="line"><span style="color:#6A737D;">// 判断当前的这个CuuatorFramework 是不是一个启动状态，是的话，死循化</span></span>
<span class="line"><span style="color:#6A737D;">// 去做一个处理，并且已经获得锁的话，就不会再做这个</span></span>
<span class="line"><span style="color:#E1E4E8;">       {</span></span>
<span class="line"><span style="color:#6A737D;">// 得到排序过后的子节点</span></span>
<span class="line"><span style="color:#E1E4E8;">           List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt;        children </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getSortedChildren</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">           String              sequenceNodeName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ourPath.</span><span style="color:#B392F0;">substring</span><span style="color:#E1E4E8;">(basePath.</span><span style="color:#B392F0;">length</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// +1 to include the slash</span></span>
<span class="line"><span style="color:#6A737D;">// 去判断节点是不是在这个节点里边最小的。</span></span>
<span class="line"><span style="color:#E1E4E8;">           PredicateResults    predicateResults </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> driver.</span><span style="color:#B392F0;">getsTheLock</span><span style="color:#E1E4E8;">(client, children, sequenceNodeName, maxLeases);</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ( predicateResults.</span><span style="color:#B392F0;">getsTheLock</span><span style="color:#E1E4E8;">() )</span></span>
<span class="line"><span style="color:#E1E4E8;">           {</span></span>
<span class="line"><span style="color:#6A737D;">// 获得了锁</span></span>
<span class="line"><span style="color:#E1E4E8;">               haveTheLock </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">           }</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#F97583;">else</span></span>
<span class="line"><span style="color:#E1E4E8;">           {</span></span>
<span class="line"><span style="color:#6A737D;">// 没有获得锁</span></span>
<span class="line"><span style="color:#E1E4E8;">               String  previousSequencePath </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> basePath </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> predicateResults.</span><span style="color:#B392F0;">getPathToWatch</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">               </span><span style="color:#F97583;">synchronized</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">               {</span></span>
<span class="line"><span style="color:#E1E4E8;">                   </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">                   {</span></span>
<span class="line"><span style="color:#E1E4E8;">                       </span><span style="color:#6A737D;">// use getData() instead of exists() to avoid leaving unneeded watchers which is a type of resource leak</span></span>
<span class="line"><span style="color:#E1E4E8;">                       client.</span><span style="color:#B392F0;">getData</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">usingWatcher</span><span style="color:#E1E4E8;">(watcher).</span><span style="color:#B392F0;">forPath</span><span style="color:#E1E4E8;">(previousSequencePath);</span></span>
<span class="line"><span style="color:#E1E4E8;">                       </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ( millisToWait </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> )</span></span>
<span class="line"><span style="color:#E1E4E8;">                       {</span></span>
<span class="line"><span style="color:#E1E4E8;">                           millisToWait </span><span style="color:#F97583;">-=</span><span style="color:#E1E4E8;"> (System.</span><span style="color:#B392F0;">currentTimeMillis</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> startMillis);</span></span>
<span class="line"><span style="color:#E1E4E8;">                           startMillis </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> System.</span><span style="color:#B392F0;">currentTimeMillis</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                           </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ( millisToWait </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> )</span></span>
<span class="line"><span style="color:#E1E4E8;">                           {</span></span>
<span class="line"><span style="color:#E1E4E8;">                               doDelete </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;    </span><span style="color:#6A737D;">// timed out - delete our node</span></span>
<span class="line"><span style="color:#E1E4E8;">                               </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                           }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">                           </span><span style="color:#B392F0;">wait</span><span style="color:#E1E4E8;">(millisToWait);</span></span>
<span class="line"><span style="color:#E1E4E8;">                       }</span></span>
<span class="line"><span style="color:#E1E4E8;">                       </span><span style="color:#F97583;">else</span></span>
<span class="line"><span style="color:#E1E4E8;">                       {</span></span>
<span class="line"><span style="color:#E1E4E8;">                           </span><span style="color:#B392F0;">wait</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                       }</span></span>
<span class="line"><span style="color:#E1E4E8;">                   }</span></span>
<span class="line"><span style="color:#E1E4E8;">                   </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> ( KeeperException.NoNodeException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;"> ) </span></span>
<span class="line"><span style="color:#E1E4E8;">                   {</span></span>
<span class="line"><span style="color:#E1E4E8;">                       </span><span style="color:#6A737D;">// it has been deleted (i.e. lock released). Try to acquire again</span></span>
<span class="line"><span style="color:#E1E4E8;">                   }</span></span>
<span class="line"><span style="color:#E1E4E8;">               }</span></span>
<span class="line"><span style="color:#E1E4E8;">           }</span></span>
<span class="line"><span style="color:#E1E4E8;">       }</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> ( Exception </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;"> )</span></span>
<span class="line"><span style="color:#E1E4E8;">   {</span></span>
<span class="line"><span style="color:#E1E4E8;">       ThreadUtils.</span><span style="color:#B392F0;">checkInterrupted</span><span style="color:#E1E4E8;">(e);</span></span>
<span class="line"><span style="color:#E1E4E8;">       doDelete </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> e;</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">finally</span></span>
<span class="line"><span style="color:#E1E4E8;">   {</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ( doDelete )</span></span>
<span class="line"><span style="color:#E1E4E8;">       {</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#B392F0;">deleteOurPath</span><span style="color:#E1E4E8;">(ourPath);</span></span>
<span class="line"><span style="color:#E1E4E8;">       }</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> haveTheLock;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">internalLockLoop</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> startMillis, Long millisToWait, String ourPath) throws Exception</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#6A737D;">// 它去做了一个循环处理，还设置了过期时间。</span></span>
<span class="line"><span style="color:#6A737D;">// 获得锁的一个机制，等待锁的一个时间，它都有一个处理</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;">     haveTheLock </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;">     doDelete </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">try</span></span>
<span class="line"><span style="color:#24292E;">   {</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ( revocable.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> )</span></span>
<span class="line"><span style="color:#24292E;">       {</span></span>
<span class="line"><span style="color:#24292E;">           client.</span><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">usingWatcher</span><span style="color:#24292E;">(revocableWatcher).</span><span style="color:#6F42C1;">forPath</span><span style="color:#24292E;">(ourPath);</span></span>
<span class="line"><span style="color:#24292E;">       }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> ( (client.</span><span style="color:#6F42C1;">getState</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> CuratorFrameworkState.STARTED) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">haveTheLock )</span></span>
<span class="line"><span style="color:#6A737D;">// 判断当前的这个CuuatorFramework 是不是一个启动状态，是的话，死循化</span></span>
<span class="line"><span style="color:#6A737D;">// 去做一个处理，并且已经获得锁的话，就不会再做这个</span></span>
<span class="line"><span style="color:#24292E;">       {</span></span>
<span class="line"><span style="color:#6A737D;">// 得到排序过后的子节点</span></span>
<span class="line"><span style="color:#24292E;">           List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt;        children </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getSortedChildren</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">           String              sequenceNodeName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ourPath.</span><span style="color:#6F42C1;">substring</span><span style="color:#24292E;">(basePath.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// +1 to include the slash</span></span>
<span class="line"><span style="color:#6A737D;">// 去判断节点是不是在这个节点里边最小的。</span></span>
<span class="line"><span style="color:#24292E;">           PredicateResults    predicateResults </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> driver.</span><span style="color:#6F42C1;">getsTheLock</span><span style="color:#24292E;">(client, children, sequenceNodeName, maxLeases);</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ( predicateResults.</span><span style="color:#6F42C1;">getsTheLock</span><span style="color:#24292E;">() )</span></span>
<span class="line"><span style="color:#24292E;">           {</span></span>
<span class="line"><span style="color:#6A737D;">// 获得了锁</span></span>
<span class="line"><span style="color:#24292E;">               haveTheLock </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">           }</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#D73A49;">else</span></span>
<span class="line"><span style="color:#24292E;">           {</span></span>
<span class="line"><span style="color:#6A737D;">// 没有获得锁</span></span>
<span class="line"><span style="color:#24292E;">               String  previousSequencePath </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> basePath </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> predicateResults.</span><span style="color:#6F42C1;">getPathToWatch</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">               </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">               {</span></span>
<span class="line"><span style="color:#24292E;">                   </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">                   {</span></span>
<span class="line"><span style="color:#24292E;">                       </span><span style="color:#6A737D;">// use getData() instead of exists() to avoid leaving unneeded watchers which is a type of resource leak</span></span>
<span class="line"><span style="color:#24292E;">                       client.</span><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">usingWatcher</span><span style="color:#24292E;">(watcher).</span><span style="color:#6F42C1;">forPath</span><span style="color:#24292E;">(previousSequencePath);</span></span>
<span class="line"><span style="color:#24292E;">                       </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ( millisToWait </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> )</span></span>
<span class="line"><span style="color:#24292E;">                       {</span></span>
<span class="line"><span style="color:#24292E;">                           millisToWait </span><span style="color:#D73A49;">-=</span><span style="color:#24292E;"> (System.</span><span style="color:#6F42C1;">currentTimeMillis</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> startMillis);</span></span>
<span class="line"><span style="color:#24292E;">                           startMillis </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> System.</span><span style="color:#6F42C1;">currentTimeMillis</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                           </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ( millisToWait </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> )</span></span>
<span class="line"><span style="color:#24292E;">                           {</span></span>
<span class="line"><span style="color:#24292E;">                               doDelete </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;    </span><span style="color:#6A737D;">// timed out - delete our node</span></span>
<span class="line"><span style="color:#24292E;">                               </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                           }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">                           </span><span style="color:#6F42C1;">wait</span><span style="color:#24292E;">(millisToWait);</span></span>
<span class="line"><span style="color:#24292E;">                       }</span></span>
<span class="line"><span style="color:#24292E;">                       </span><span style="color:#D73A49;">else</span></span>
<span class="line"><span style="color:#24292E;">                       {</span></span>
<span class="line"><span style="color:#24292E;">                           </span><span style="color:#6F42C1;">wait</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                       }</span></span>
<span class="line"><span style="color:#24292E;">                   }</span></span>
<span class="line"><span style="color:#24292E;">                   </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> ( KeeperException.NoNodeException </span><span style="color:#E36209;">e</span><span style="color:#24292E;"> ) </span></span>
<span class="line"><span style="color:#24292E;">                   {</span></span>
<span class="line"><span style="color:#24292E;">                       </span><span style="color:#6A737D;">// it has been deleted (i.e. lock released). Try to acquire again</span></span>
<span class="line"><span style="color:#24292E;">                   }</span></span>
<span class="line"><span style="color:#24292E;">               }</span></span>
<span class="line"><span style="color:#24292E;">           }</span></span>
<span class="line"><span style="color:#24292E;">       }</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> ( Exception </span><span style="color:#E36209;">e</span><span style="color:#24292E;"> )</span></span>
<span class="line"><span style="color:#24292E;">   {</span></span>
<span class="line"><span style="color:#24292E;">       ThreadUtils.</span><span style="color:#6F42C1;">checkInterrupted</span><span style="color:#24292E;">(e);</span></span>
<span class="line"><span style="color:#24292E;">       doDelete </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> e;</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">finally</span></span>
<span class="line"><span style="color:#24292E;">   {</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ( doDelete )</span></span>
<span class="line"><span style="color:#24292E;">       {</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#6F42C1;">deleteOurPath</span><span style="color:#24292E;">(ourPath);</span></span>
<span class="line"><span style="color:#24292E;">       }</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> haveTheLock;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br></div></div><h5 id="lockinternals-1" tabindex="-1">LockInternals <a class="header-anchor" href="#lockinternals-1" aria-label="Permalink to &quot;LockInternals&quot;">​</a></h5><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getSortedChildren</span><span style="color:#E1E4E8;">(CuratorFramework client, String basePath, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String lockName, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> LockInternalsSorter sorter) throws Exception</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#6A737D;">// 得到子节点</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; children </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> client.</span><span style="color:#B392F0;">getChildren</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">forPath</span><span style="color:#E1E4E8;">(basePath);</span></span>
<span class="line"><span style="color:#6A737D;">// 去做一个排序</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; sortedList </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Lists.</span><span style="color:#B392F0;">newArrayList</span><span style="color:#E1E4E8;">(children);</span></span>
<span class="line"><span style="color:#E1E4E8;">    Collections.sort</span></span>
<span class="line"><span style="color:#E1E4E8;">    (</span></span>
<span class="line"><span style="color:#E1E4E8;">        sortedList,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Comparator&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="color:#E1E4E8;">        {</span></span>
<span class="line"><span style="color:#E1E4E8;">            @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">compare</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">lhs</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">rhs</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> sorter.</span><span style="color:#B392F0;">fixForSorting</span><span style="color:#E1E4E8;">(lhs, lockName).</span><span style="color:#B392F0;">compareTo</span><span style="color:#E1E4E8;">(sorter.</span><span style="color:#B392F0;">fixForSorting</span><span style="color:#E1E4E8;">(rhs, lockName));</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    );</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> sortedList;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getSortedChildren</span><span style="color:#24292E;">(CuratorFramework client, String basePath, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String lockName, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> LockInternalsSorter sorter) throws Exception</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#6A737D;">// 得到子节点</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; children </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> client.</span><span style="color:#6F42C1;">getChildren</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">forPath</span><span style="color:#24292E;">(basePath);</span></span>
<span class="line"><span style="color:#6A737D;">// 去做一个排序</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; sortedList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Lists.</span><span style="color:#6F42C1;">newArrayList</span><span style="color:#24292E;">(children);</span></span>
<span class="line"><span style="color:#24292E;">    Collections.sort</span></span>
<span class="line"><span style="color:#24292E;">    (</span></span>
<span class="line"><span style="color:#24292E;">        sortedList,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Comparator&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt;()</span></span>
<span class="line"><span style="color:#24292E;">        {</span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">compare</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">lhs</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">rhs</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> sorter.</span><span style="color:#6F42C1;">fixForSorting</span><span style="color:#24292E;">(lhs, lockName).</span><span style="color:#6F42C1;">compareTo</span><span style="color:#24292E;">(sorter.</span><span style="color:#6F42C1;">fixForSorting</span><span style="color:#24292E;">(rhs, lockName));</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    );</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> sortedList;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>Curator 在监听上一个节点，手写的是根据路径去比较</p><h5 id="standardlockinternalsdriver-1" tabindex="-1">StandardLockInternalsDriver <a class="header-anchor" href="#standardlockinternalsdriver-1" aria-label="Permalink to &quot;StandardLockInternalsDriver&quot;">​</a></h5><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> PredicateResults </span><span style="color:#B392F0;">getsTheLock</span><span style="color:#E1E4E8;">(CuratorFramework client, List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> children, String sequenceNodeName, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> maxLeases) throws Exception</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#6A737D;">// 创建好的编号在 children 中的一个索引</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">             ourIndex </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> children.</span><span style="color:#B392F0;">indexOf</span><span style="color:#E1E4E8;">(sequenceNodeName);</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">validateOurIndex</span><span style="color:#E1E4E8;">(sequenceNodeName, ourIndex);</span></span>
<span class="line"><span style="color:#6A737D;">// 如果当前的节点的索引值是所有节点里边的最小的，</span></span>
<span class="line"><span style="color:#6A737D;">// 那么就意味着获得锁成功，否则的话，得到一个需要去监控的节点。</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;">         getsTheLock </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ourIndex </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> maxLeases;</span></span>
<span class="line"><span style="color:#E1E4E8;">   String          pathToWatch </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> getsTheLock </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> children.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(ourIndex </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> maxLeases);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PredicateResults</span><span style="color:#E1E4E8;">(pathToWatch, getsTheLock);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> PredicateResults </span><span style="color:#6F42C1;">getsTheLock</span><span style="color:#24292E;">(CuratorFramework client, List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> children, String sequenceNodeName, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> maxLeases) throws Exception</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#6A737D;">// 创建好的编号在 children 中的一个索引</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">             ourIndex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> children.</span><span style="color:#6F42C1;">indexOf</span><span style="color:#24292E;">(sequenceNodeName);</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">validateOurIndex</span><span style="color:#24292E;">(sequenceNodeName, ourIndex);</span></span>
<span class="line"><span style="color:#6A737D;">// 如果当前的节点的索引值是所有节点里边的最小的，</span></span>
<span class="line"><span style="color:#6A737D;">// 那么就意味着获得锁成功，否则的话，得到一个需要去监控的节点。</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;">         getsTheLock </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ourIndex </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> maxLeases;</span></span>
<span class="line"><span style="color:#24292E;">   String          pathToWatch </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> getsTheLock </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> children.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(ourIndex </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> maxLeases);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PredicateResults</span><span style="color:#24292E;">(pathToWatch, getsTheLock);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>Curator也是利用最小节点的特性实现分布式锁</p><h1 id="实现带注册中心的rpc框架" tabindex="-1">实现带注册中心的RPC框架 <a class="header-anchor" href="#实现带注册中心的rpc框架" aria-label="Permalink to &quot;实现带注册中心的RPC框架&quot;">​</a></h1><h2 id="分布式架构现状" tabindex="-1">分布式架构现状： <a class="header-anchor" href="#分布式架构现状" aria-label="Permalink to &quot;分布式架构现状：&quot;">​</a></h2><p><img src="`+e+`" alt="JavaGuide-Zookeeper_实践注册中心_分布式架构现状.png"></p><h3 id="注册中心引入" tabindex="-1">注册中心引入 <a class="header-anchor" href="#注册中心引入" aria-label="Permalink to &quot;注册中心引入&quot;">​</a></h3><p>​ 我们需要引入注册中心，来管理服务集群各个节点地址的维护。注册中心，能够管理地址，还能够动态地感知节点的上下线，感知宕机的变化。</p><h2 id="分布式锁的实用性" tabindex="-1">分布式锁的实用性 <a class="header-anchor" href="#分布式锁的实用性" aria-label="Permalink to &quot;分布式锁的实用性&quot;">​</a></h2><p>实现了socket + 反射 实现 简单的 RPC</p><h2 id="服务端控制台输出" tabindex="-1">服务端控制台输出 <a class="header-anchor" href="#服务端控制台输出" aria-label="Permalink to &quot;服务端控制台输出&quot;">​</a></h2><div class="language-verilog vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">verilog</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">log4j:WARN No appenders could be found </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> logger (org.apache.curator.utils.Compatibility).</span></span>
<span class="line"><span style="color:#E1E4E8;">log4j:WARN Please initialize the log4j system properly.</span></span>
<span class="line"><span style="color:#E1E4E8;">log4j:WARN See http:</span><span style="color:#6A737D;">//logging.apache.org/log4j/1.2/faq.html#noconfig for more info.</span></span>
<span class="line"><span style="color:#E1E4E8;">服务注册成功：</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">registrys</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">com.gupao.study.vip.RPC.IGPHello</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">127</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">8080</span></span>
<span class="line"><span style="color:#E1E4E8;">服务注册成功com.gupao.study.vip.RPC.IGPHello</span><span style="color:#F97583;">--&gt;&gt;</span><span style="color:#79B8FF;">127</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">8080</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">log4j:WARN No appenders could be found </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> logger (org.apache.curator.utils.Compatibility).</span></span>
<span class="line"><span style="color:#24292E;">log4j:WARN Please initialize the log4j system properly.</span></span>
<span class="line"><span style="color:#24292E;">log4j:WARN See http:</span><span style="color:#6A737D;">//logging.apache.org/log4j/1.2/faq.html#noconfig for more info.</span></span>
<span class="line"><span style="color:#24292E;">服务注册成功：</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">registrys</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">com.gupao.study.vip.RPC.IGPHello</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">127</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">8080</span></span>
<span class="line"><span style="color:#24292E;">服务注册成功com.gupao.study.vip.RPC.IGPHello</span><span style="color:#D73A49;">--&gt;&gt;</span><span style="color:#005CC5;">127</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">8080</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="客户端控制台输出" tabindex="-1">客户端控制台输出 <a class="header-anchor" href="#客户端控制台输出" aria-label="Permalink to &quot;客户端控制台输出&quot;">​</a></h2><div class="language-verilog vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">verilog</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">log4j:WARN No appenders could be found </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> logger (org.apache.curator.utils.Compatibility).</span></span>
<span class="line"><span style="color:#E1E4E8;">log4j:WARN Please initialize the log4j system properly.</span></span>
<span class="line"><span style="color:#E1E4E8;">log4j:WARN See http:</span><span style="color:#6A737D;">//logging.apache.org/log4j/1.2/faq.html#noconfig for more info.</span></span>
<span class="line"><span style="color:#E1E4E8;">interface com.gupao.study.vip.RPC.IGPHello</span></span>
<span class="line"><span style="color:#E1E4E8;">sun.misc.Launcher$AppClassLoader@18b4aac2</span></span>
<span class="line"><span style="color:#E1E4E8;">调用的方法的名字：public abstract java.lang.String com.gupao.study.vip.RPC.IGPHello.sayHello(java.lang.String)</span></span>
<span class="line"><span style="color:#E1E4E8;">要调用的接口的名字：com.gupao.study.vip.RPC.IGPHello</span></span>
<span class="line"><span style="color:#E1E4E8;">服务在zookeeper上的地址：</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">registrys</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">com.gupao.study.vip.RPC.IGPHello</span></span>
<span class="line"><span style="color:#E1E4E8;">创建一个新的连接</span></span>
<span class="line"><span style="color:#E1E4E8;">服务的IP: </span><span style="color:#79B8FF;">127</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">8080</span></span>
<span class="line"><span style="color:#E1E4E8;">hello, Darian</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">log4j:WARN No appenders could be found </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> logger (org.apache.curator.utils.Compatibility).</span></span>
<span class="line"><span style="color:#24292E;">log4j:WARN Please initialize the log4j system properly.</span></span>
<span class="line"><span style="color:#24292E;">log4j:WARN See http:</span><span style="color:#6A737D;">//logging.apache.org/log4j/1.2/faq.html#noconfig for more info.</span></span>
<span class="line"><span style="color:#24292E;">interface com.gupao.study.vip.RPC.IGPHello</span></span>
<span class="line"><span style="color:#24292E;">sun.misc.Launcher$AppClassLoader@18b4aac2</span></span>
<span class="line"><span style="color:#24292E;">调用的方法的名字：public abstract java.lang.String com.gupao.study.vip.RPC.IGPHello.sayHello(java.lang.String)</span></span>
<span class="line"><span style="color:#24292E;">要调用的接口的名字：com.gupao.study.vip.RPC.IGPHello</span></span>
<span class="line"><span style="color:#24292E;">服务在zookeeper上的地址：</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">registrys</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">com.gupao.study.vip.RPC.IGPHello</span></span>
<span class="line"><span style="color:#24292E;">创建一个新的连接</span></span>
<span class="line"><span style="color:#24292E;">服务的IP: </span><span style="color:#005CC5;">127</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">8080</span></span>
<span class="line"><span style="color:#24292E;">hello, Darian</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h4 id="服务有多个版本怎么办" tabindex="-1">服务有多个版本怎么办？ <a class="header-anchor" href="#服务有多个版本怎么办" aria-label="Permalink to &quot;服务有多个版本怎么办？&quot;">​</a></h4><h2 id="控制台输出" tabindex="-1">控制台输出 <a class="header-anchor" href="#控制台输出" aria-label="Permalink to &quot;控制台输出&quot;">​</a></h2><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">com</span><span style="color:#E1E4E8;">.gupao.study.vip.RPC.IGPHello</span></span>
<span class="line"><span style="color:#E1E4E8;">sun.misc.Launcher$AppClassLoader@18b4aac2</span></span>
<span class="line"><span style="color:#E1E4E8;">调用的方法的名字：</span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">abstract</span><span style="color:#E1E4E8;"> java.lang.String com.gupao.study.vip.RPC.IGPHello.sayHello(java.lang.String)</span></span>
<span class="line"><span style="color:#E1E4E8;">要调用的接口的名字：com.gupao.study.vip.RPC.IGPHello</span></span>
<span class="line"><span style="color:#E1E4E8;">服务在zookeeper上的地址：/registrys/com.gupao.study.vip.RPC.IGPHello</span></span>
<span class="line"><span style="color:#E1E4E8;">创建一个新的连接</span></span>
<span class="line"><span style="color:#E1E4E8;">服务的IP: 127.0.0.1:8080</span></span>
<span class="line"><span style="color:#E1E4E8;">hello, Darian</span></span>
<span class="line"><span style="color:#E1E4E8;">=-----=版本二</span></span>
<span class="line"><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">com</span><span style="color:#E1E4E8;">.gupao.study.vip.RPC.IGPHello</span></span>
<span class="line"><span style="color:#E1E4E8;">sun.misc.Launcher$AppClassLoader@18b4aac2</span></span>
<span class="line"><span style="color:#E1E4E8;">调用的方法的名字：</span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">abstract</span><span style="color:#E1E4E8;"> java.lang.String com.gupao.study.vip.RPC.IGPHello.sayHello(java.lang.String)</span></span>
<span class="line"><span style="color:#E1E4E8;">要调用的接口的名字：com.gupao.study.vip.RPC.IGPHello</span></span>
<span class="line"><span style="color:#E1E4E8;">服务在zookeeper上的地址：/registrys/com.gupao.study.vip.RPC.IGPHello</span></span>
<span class="line"><span style="color:#E1E4E8;">创建一个新的连接</span></span>
<span class="line"><span style="color:#E1E4E8;">服务的IP: 127.0.0.1:8080</span></span>
<span class="line"><span style="color:#E1E4E8;">I&#39;m version 2.0 ,hello, darian2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">com</span><span style="color:#24292E;">.gupao.study.vip.RPC.IGPHello</span></span>
<span class="line"><span style="color:#24292E;">sun.misc.Launcher$AppClassLoader@18b4aac2</span></span>
<span class="line"><span style="color:#24292E;">调用的方法的名字：</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">abstract</span><span style="color:#24292E;"> java.lang.String com.gupao.study.vip.RPC.IGPHello.sayHello(java.lang.String)</span></span>
<span class="line"><span style="color:#24292E;">要调用的接口的名字：com.gupao.study.vip.RPC.IGPHello</span></span>
<span class="line"><span style="color:#24292E;">服务在zookeeper上的地址：/registrys/com.gupao.study.vip.RPC.IGPHello</span></span>
<span class="line"><span style="color:#24292E;">创建一个新的连接</span></span>
<span class="line"><span style="color:#24292E;">服务的IP: 127.0.0.1:8080</span></span>
<span class="line"><span style="color:#24292E;">hello, Darian</span></span>
<span class="line"><span style="color:#24292E;">=-----=版本二</span></span>
<span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">com</span><span style="color:#24292E;">.gupao.study.vip.RPC.IGPHello</span></span>
<span class="line"><span style="color:#24292E;">sun.misc.Launcher$AppClassLoader@18b4aac2</span></span>
<span class="line"><span style="color:#24292E;">调用的方法的名字：</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">abstract</span><span style="color:#24292E;"> java.lang.String com.gupao.study.vip.RPC.IGPHello.sayHello(java.lang.String)</span></span>
<span class="line"><span style="color:#24292E;">要调用的接口的名字：com.gupao.study.vip.RPC.IGPHello</span></span>
<span class="line"><span style="color:#24292E;">服务在zookeeper上的地址：/registrys/com.gupao.study.vip.RPC.IGPHello</span></span>
<span class="line"><span style="color:#24292E;">创建一个新的连接</span></span>
<span class="line"><span style="color:#24292E;">服务的IP: 127.0.0.1:8080</span></span>
<span class="line"><span style="color:#24292E;">I&#39;m version 2.0 ,hello, darian2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="实现的时序图" tabindex="-1">实现的时序图： <a class="header-anchor" href="#实现的时序图" aria-label="Permalink to &quot;实现的时序图：&quot;">​</a></h2><p><img src="`+r+'" alt="JavaGuide-Zookeeper_实践注册中心_实现序列图.png"></p><h1 id="zookeeper的扩容升级" tabindex="-1">zookeeper的扩容升级 <a class="header-anchor" href="#zookeeper的扩容升级" aria-label="Permalink to &quot;zookeeper的扩容升级&quot;">​</a></h1><p>​ zookeeper集群的扩容，比较麻烦，麻烦在于说，zookeeper有一个leader选举的机制。所以我们在一个本身的扩容的时候，会存在一个问题，我们需要去配置 <code>zoo.cfg</code>。而且在zookeeper集群动态扩容的时候我们要了解它选举的过程，很多时候都是停机扩容，就是去对所有的位置做一个变更，再做一个停机，重启。</p><p>​ 还有一个就是逐台重启，一个更改以后，去重启，就相当于挂掉，再重启的过程。</p>',90),E=[t];function y(i,u,b,F,d,m){return n(),a("div",null,E)}const A=s(c,[["render",y]]);export{D as __pageData,A as default};
