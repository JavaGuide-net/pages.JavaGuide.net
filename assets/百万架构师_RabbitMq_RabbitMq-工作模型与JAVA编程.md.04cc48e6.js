import{_ as s,o as a,h as n,Q as l}from"./chunks/framework.da611722.js";const p="/assets/RabbitMQ_工作模型与Java编程_工作模型.f30b0723.png",o="/assets/RabbitMQ_工作模型与Java编程_队列模型.b8cf8da2.png",e="/assets/RabbitMQ_工作模型与Java编程_队列模型_2.1178995a.png",t="/assets/RabbitMQ_工作模型与Java编程_队列收到消息.a7fae3a1.png",r="/assets/RabbitMQ_工作模型与Java编程_死信队列.9c3e4a78.png",c="/assets/RabbitMQ_工作模型与Java编程_RabbitMq_RPC队列.f19ff7f6.png",E="/assets/RabbitMQ_工作模型与Java编程_Spring集成方式.e6690a32.png",v=JSON.parse('{"title":"RabbitMq-工作模型与JAVA编程 | JavaGuide","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://javaguide.net/百万架构师/RabbitMq/RabbitMq-工作模型与JAVA编程.html"}],["meta",{"name":"keywords","content":"RabbitMq-工作模型与JAVA编程 , JavaGuide , JavaGuide官网, Java面试指南, Java基础, 多线程, JVM, 虚拟机, 数据库, MySQL, Spring, Redis, MyBatis, 系统设计, 分布式, RPC, 高可用, 高并发"}],["meta",{"name":"og:url","content":"https://JavaGuide.net"}],["meta",{"name":"og:type","content":"website"}],["meta",{"name":"og:image","content":"https://javaguide.net/JavaGuide-og.png"}],["meta",{"name":"og:title","content":"RabbitMq-工作模型与JAVA编程 | JavaGuide | Java面试指南 | JavaGuide官网"}],["meta",{"name":"og:description","content":"RabbitMq-工作模型与JAVA编程 | JavaGuide | Java面试指南 | JavaGuide官网 | 「JavaGuide.net」一份涵盖大部分 Java 程序员所需要掌握的核心知识。准备 Java 面试，首选 JavaGuide.net ！"}],["meta",{"name":"twitter:site","content":"https://javaguide.net"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:creator","content":"nogeek.cn"}],["meta",{"name":"twitter:title","content":"RabbitMq-工作模型与JAVA编程 | JavaGuide | Java面试指南 | JavaGuide官网"}],["meta",{"name":"twitter:description","content":"RabbitMq-工作模型与JAVA编程 | JavaGuide | Java面试指南 | JavaGuide官网 | 「JavaGuide.net」一份涵盖大部分 Java 程序员所需要掌握的核心知识。准备 Java 面试，首选 JavaGuide.net ！"}],["meta",{"name":"twitter:image","content":"https://javaguide.net/JavaGuide-og.png"}],["meta",{"name":"sogou_site_verification","content":"fcAkazTXFd"}],["meta",{"name":"baidu-site-verification","content":"codeva-MXEPYsXKGk"}],["meta",{"name":"msvalidate.01","content":"9F2D57CFC59E8031212A166878638B15"}]]},"headers":[],"relativePath":"百万架构师/RabbitMq/RabbitMq-工作模型与JAVA编程.md","filePath":"百万架构师/RabbitMq/RabbitMq-工作模型与JAVA编程.md","lastUpdated":1741277271000}'),y={name:"百万架构师/RabbitMq/RabbitMq-工作模型与JAVA编程.md"},i=l('<h1 id="rabbitmq-1-工作模型与java编程" tabindex="-1">RabbitMQ 1-工作模型与Java编程 <a class="header-anchor" href="#rabbitmq-1-工作模型与java编程" aria-label="Permalink to &quot;RabbitMQ 1-工作模型与Java编程&quot;">​</a></h1><h1 id="课前准备" tabindex="-1">课前准备 <a class="header-anchor" href="#课前准备" aria-label="Permalink to &quot;课前准备&quot;">​</a></h1><h2 id="预习资料" tabindex="-1">预习资料 <a class="header-anchor" href="#预习资料" aria-label="Permalink to &quot;预习资料&quot;">​</a></h2><p><a href="https://blog.csdn.net/qq_31634461/article/details/79377256" target="_blank" rel="noreferrer">Windows安装步骤</a></p><p><a href="http://blog.51cto.com/zengestudy/1870247" target="_blank" rel="noreferrer">Linux安装步骤</a></p><p><a href="https://www.jianshu.com/p/a6460b4b155f" target="_blank" rel="noreferrer">官网文章中文翻译系列</a></p><h2 id="环境说明" tabindex="-1">环境说明 <a class="header-anchor" href="#环境说明" aria-label="Permalink to &quot;环境说明&quot;">​</a></h2><p>操作系统：CentOS 7 JDK：1.8</p><p>Erlang：19.0.4或<a href="http://www.rabbitmq.com/releases/erlang/" target="_blank" rel="noreferrer">最新版</a></p><p>RabbitMQ：3.6.12或<a href="http://www.rabbitmq.com/releases/rabbitmq-server/" target="_blank" rel="noreferrer">最新版</a> <a href="http://www.rabbitmq.com/which-erlang.html" target="_blank" rel="noreferrer">版本对应关系</a></p><h1 id="典型应用场景" tabindex="-1">典型应用场景 <a class="header-anchor" href="#典型应用场景" aria-label="Permalink to &quot;典型应用场景&quot;">​</a></h1><ol><li>跨系统的异步通信。人民银行二代支付系统，使用重量级消息队列 IBM MQ，异步，解耦，削峰都有体现。</li><li>应用内的同步变成异步。秒杀：自己发送给自己</li><li>基于Pub/Sub模型实现的事件驱动。放款失败通知、提货通知、购买碎屏保、系统间同步数据、摒弃ELT（比如全量同步商户数据）； 摒弃API（比如定时增量获取用户、获取产品，变成增量广播）。</li><li>利用RabbitMQ实现事务的最终一致性</li></ol><h1 id="基本介绍" tabindex="-1">基本介绍 <a class="header-anchor" href="#基本介绍" aria-label="Permalink to &quot;基本介绍&quot;">​</a></h1><h2 id="amqp协议" tabindex="-1">AMQP协议 <a class="header-anchor" href="#amqp协议" aria-label="Permalink to &quot;AMQP协议&quot;">​</a></h2><p>​ AMQP，即Advanced Message Queuing Protocol，一个提供统一消息服务的应用层标准高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。基于此协议的客户端与消息中间件可传递消息，并不受客户端/中间件不同产品、不同的开发语言等条件的限制。</p><p>​ AMQP的实现有：RabbitMQ、OpenAMQ、Apache Qpid、Redhat Enterprise MRG、AMQP Infrastructure、MQ、Zyre等。</p><h2 id="rabbitmq的特性" tabindex="-1">RabbitMQ的特性 <a class="header-anchor" href="#rabbitmq的特性" aria-label="Permalink to &quot;RabbitMQ的特性&quot;">​</a></h2><p>RabbitMQ使用Erlang语言编写，使用Mnesia数据库存储消息。</p><p>（1）可靠性（Reliability） RabbitMQ 使用一些机制来保证可靠性，如持久化、传输确认、发布确认。</p><p>（2）灵活的路由（Flexible Routing） 在消息进入队列之前，通过 Exchange 来路由消息的。对于典型的路由功能，RabbitMQ 已经提供了一些内置的 Exchange 来实现。针对更复杂的路由功能，可以将多个 Exchange 绑定在一起，也通过插件机制实现自己的 Exchange 。</p><p>（3）消息集群（Clustering） 多个 RabbitMQ 服务器可以组成一个集群，形成一个逻辑 Broker 。</p><p>（4）高可用（Highly Available Queues） 队列可以在集群中的机器上进行镜像，使得在部分节点出问题的情况下队列仍然可用。</p><p>（5）多种协议（Multi-protocol） RabbitMQ 支持多种消息队列协议，比如 AMQP、STOMP、MQTT 等等。</p><p>（6）多语言客户端（Many Clients） RabbitMQ 几乎支持所有常用语言，比如 Java、.NET、Ruby、PHP、C#、JavaScript 等等。</p><p>（7）管理界面（Management UI） RabbitMQ 提供了一个易用的用户界面，使得用户可以监控和管理消息、集群中的节点。</p><p>（8）插件机制（Plugin System）</p><p>RabbitMQ提供了许多插件，以实现从多方面扩展，当然也可以编写自己的插件。</p><p><img src="'+p+`" alt="RabbitMQ_工作模型与Java编程_工作模型.png"></p><h2 id="工作模型" tabindex="-1">工作模型 <a class="header-anchor" href="#工作模型" aria-label="Permalink to &quot;工作模型&quot;">​</a></h2><table><thead><tr><th><strong>概念</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td>Broker</td><td>即RabbitMQ的实体服务器。提供一种传输服务，维护一条从生产者到消费者的传输线路， 保证消息数据能按照指定的方式传输。</td></tr><tr><td>Exchange</td><td>消息交换机。指定消息按照什么规则路由到哪个队列Queue。</td></tr><tr><td>Queue</td><td>消息队列。消息的载体，每条消息都会被投送到一个或多个队列中。</td></tr><tr><td>Binding</td><td>绑定。作用就是将Exchange和Queue按照某种路由规则绑定起来。</td></tr><tr><td>Routing Key</td><td>路由关键字。Exchange根据Routing Key进行消息投递。定义绑定时指定的关键字称为Binding Key。</td></tr><tr><td>Vhost</td><td>虚拟主机。一个Broker可以有多个虚拟主机，用作不同用户的权限分离。一个虚拟主机持有一组Exchange、Queue和Binding。</td></tr><tr><td>Producer</td><td>消息生产者。主要将消息投递到对应的Exchange上面。一般是独立的程序。</td></tr><tr><td>Consumer</td><td>消息消费者。消息的接收者，一般是独立的程序。</td></tr><tr><td>Connection</td><td>Producer 和 Consumer 与Broker之间的TCP长连接。</td></tr><tr><td>Channel</td><td>消息通道，也称信道。在客户端的每个连接里可以建立多个Channel，每个Channel代表一 个会话任务。在RabbitMQ Java Client API中，channel上定义了大量的编程接口。</td></tr></tbody></table><p><strong>三种主要的交换机</strong></p><h3 id="direct-exchange-直连交换机" tabindex="-1">Direct Exchange 直连交换机 <a class="header-anchor" href="#direct-exchange-直连交换机" aria-label="Permalink to &quot;Direct Exchange 直连交换机&quot;">​</a></h3><p>定义：直连类型的交换机与一个队列绑定时，需要指定一个明确的binding key。</p><p>路由规则：发送消息到直连类型的交换机时，只有routing key跟binding key完全匹配时，绑定的队列才能收到消息。</p><p>例如：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 只有队列1能收到消息</span></span>
<span class="line"><span style="color:#E1E4E8;">channel.</span><span style="color:#B392F0;">basicPublish</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;MY_DIRECT_EXCHANGE&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;key1&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, msg.</span><span style="color:#B392F0;">getBytes</span><span style="color:#E1E4E8;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 只有队列1能收到消息</span></span>
<span class="line"><span style="color:#24292E;">channel.</span><span style="color:#6F42C1;">basicPublish</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;MY_DIRECT_EXCHANGE&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;key1&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, msg.</span><span style="color:#6F42C1;">getBytes</span><span style="color:#24292E;">());</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="`+o+`" alt="RabbitMQ_工作模型与Java编程_队列模型.png"></p><h3 id="topic-exchange-主题交换机" tabindex="-1">Topic Exchange 主题交换机 <a class="header-anchor" href="#topic-exchange-主题交换机" aria-label="Permalink to &quot;Topic Exchange 主题交换机&quot;">​</a></h3><p>定义：主题类型的交换机与一个队列绑定时，可以指定按模式匹配的routing key。</p><p>通配符有两个，*代表匹配一个单词。#代表匹配零个或者多个单词。单词与单词之间用 . 隔开。</p><p>路由规则：发送消息到主题类型的交换机时，routing key符合binding key的模式时，绑定的队列才能收到消息。</p><p>例如：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 只有队列1能收到消息</span></span>
<span class="line"><span style="color:#E1E4E8;">channel.</span><span style="color:#B392F0;">basicPublish</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;MY_TOPIC_EXCHANGE&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;sh.abc&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, msg.</span><span style="color:#B392F0;">getBytes</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#6A737D;">// 队列2和队列3能收到消息</span></span>
<span class="line"><span style="color:#E1E4E8;">channel.</span><span style="color:#B392F0;">basicPublish</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;MY_TOPIC_EXCHANGE&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;bj.book&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, msg.</span><span style="color:#B392F0;">getBytes</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#6A737D;">// 只有队列4能收到消息</span></span>
<span class="line"><span style="color:#E1E4E8;">channel.</span><span style="color:#B392F0;">basicPublish</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;MY_TOPIC_EXCHANGE&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;abc.def.food&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, msg.</span><span style="color:#B392F0;">getBytes</span><span style="color:#E1E4E8;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 只有队列1能收到消息</span></span>
<span class="line"><span style="color:#24292E;">channel.</span><span style="color:#6F42C1;">basicPublish</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;MY_TOPIC_EXCHANGE&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;sh.abc&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, msg.</span><span style="color:#6F42C1;">getBytes</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#6A737D;">// 队列2和队列3能收到消息</span></span>
<span class="line"><span style="color:#24292E;">channel.</span><span style="color:#6F42C1;">basicPublish</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;MY_TOPIC_EXCHANGE&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;bj.book&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, msg.</span><span style="color:#6F42C1;">getBytes</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#6A737D;">// 只有队列4能收到消息</span></span>
<span class="line"><span style="color:#24292E;">channel.</span><span style="color:#6F42C1;">basicPublish</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;MY_TOPIC_EXCHANGE&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;abc.def.food&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, msg.</span><span style="color:#6F42C1;">getBytes</span><span style="color:#24292E;">());</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><img src="`+e+`" alt="RabbitMQ_工作模型与Java编程_队列模型_2.png"></p><h3 id="fanout-exchange-广播交换机" tabindex="-1">Fanout Exchange 广播交换机 <a class="header-anchor" href="#fanout-exchange-广播交换机" aria-label="Permalink to &quot;Fanout Exchange 广播交换机&quot;">​</a></h3><p>定义：广播类型的交换机与一个队列绑定时，不需要指定binding key。</p><p>路由规则：当消息发送到广播类型的交换机时，不需要指定routing key，所有与之绑定的队列都能收到消息。</p><p>例如：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 3个队列都会收到消息</span></span>
<span class="line"><span style="color:#E1E4E8;">channel.</span><span style="color:#B392F0;">basicPublish</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;MY_FANOUT_EXCHANGE&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, msg.</span><span style="color:#B392F0;">getBytes</span><span style="color:#E1E4E8;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 3个队列都会收到消息</span></span>
<span class="line"><span style="color:#24292E;">channel.</span><span style="color:#6F42C1;">basicPublish</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;MY_FANOUT_EXCHANGE&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, msg.</span><span style="color:#6F42C1;">getBytes</span><span style="color:#24292E;">());</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="`+t+`" alt="RabbitMQ_工作模型与Java编程_队列收到消息.png"></p><h1 id="java-api-编程" tabindex="-1">Java API 编程 <a class="header-anchor" href="#java-api-编程" aria-label="Permalink to &quot;Java API 编程&quot;">​</a></h1><h3 id="创建maven工程-pom-xml引入依赖" tabindex="-1">创建Maven工程，pom.xml引入依赖 <a class="header-anchor" href="#创建maven工程-pom-xml引入依赖" aria-label="Permalink to &quot;创建Maven工程，pom.xml引入依赖&quot;">​</a></h3><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;com.rabbitmq&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;amqp-client&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;4.1.0&lt;/</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;com.rabbitmq&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;amqp-client&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;4.1.0&lt;/</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><strong>生产者</strong></p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> com.rabbitmq.client.Channel;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> com.rabbitmq.client.Connection;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> com.rabbitmq.client.ConnectionFactory;</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyProducer</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> String QUEUE_NAME </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;ORIGIN_QUEUE&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">       ConnectionFactory factory </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ConnectionFactory</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#6A737D;">// 连接IP</span></span>
<span class="line"><span style="color:#E1E4E8;">       factory.</span><span style="color:#B392F0;">setHost</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;127.0.0.1&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#6A737D;">// 连接端口</span></span>
<span class="line"><span style="color:#E1E4E8;">       factory.</span><span style="color:#B392F0;">setPort</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5672</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#6A737D;">// 虚拟机</span></span>
<span class="line"><span style="color:#E1E4E8;">       factory.</span><span style="color:#B392F0;">setVirtualHost</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#6A737D;">// 用户</span></span>
<span class="line"><span style="color:#E1E4E8;">       factory.</span><span style="color:#B392F0;">setUsername</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;guest&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">       factory.</span><span style="color:#B392F0;">setPassword</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;guest&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#6A737D;">// 建立连接</span></span>
<span class="line"><span style="color:#E1E4E8;">       Connection conn </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> factory.</span><span style="color:#B392F0;">newConnection</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#6A737D;">// 创建消息通道</span></span>
<span class="line"><span style="color:#E1E4E8;">       Channel channel </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> conn.</span><span style="color:#B392F0;">createChannel</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">       String msg </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Hello world, Rabbit MQ&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#6A737D;">// 声明队列</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#6A737D;">// String queue, boolean durable, boolean exclusive, boolean autoDelete,</span></span>
<span class="line"><span style="color:#E1E4E8;">       Map</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String, Object</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> arguments</span></span>
<span class="line"><span style="color:#E1E4E8;">           channel.</span><span style="color:#B392F0;">queueDeclare</span><span style="color:#E1E4E8;">(QUEUE_NAME, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#6A737D;">// 发送消息（发送到默认交换机AMQP Default，Direct）</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#6A737D;">// 如果有一个队列名称跟Routing Key相等，那么消息会路由到这个队列</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#6A737D;">// String exchange, String routingKey, BasicProperties props, byte[] body</span></span>
<span class="line"><span style="color:#E1E4E8;">       channel.</span><span style="color:#B392F0;">basicPublish</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">, QUEUE_NAME, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, msg.</span><span style="color:#B392F0;">getBytes</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">       channel.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">       conn.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> com.rabbitmq.client.Channel;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> com.rabbitmq.client.Connection;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> com.rabbitmq.client.ConnectionFactory;</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyProducer</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> String QUEUE_NAME </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;ORIGIN_QUEUE&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">       ConnectionFactory factory </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ConnectionFactory</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">// 连接IP</span></span>
<span class="line"><span style="color:#24292E;">       factory.</span><span style="color:#6F42C1;">setHost</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;127.0.0.1&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">// 连接端口</span></span>
<span class="line"><span style="color:#24292E;">       factory.</span><span style="color:#6F42C1;">setPort</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5672</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">// 虚拟机</span></span>
<span class="line"><span style="color:#24292E;">       factory.</span><span style="color:#6F42C1;">setVirtualHost</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">// 用户</span></span>
<span class="line"><span style="color:#24292E;">       factory.</span><span style="color:#6F42C1;">setUsername</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;guest&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">       factory.</span><span style="color:#6F42C1;">setPassword</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;guest&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">// 建立连接</span></span>
<span class="line"><span style="color:#24292E;">       Connection conn </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> factory.</span><span style="color:#6F42C1;">newConnection</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">// 创建消息通道</span></span>
<span class="line"><span style="color:#24292E;">       Channel channel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> conn.</span><span style="color:#6F42C1;">createChannel</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">       String msg </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Hello world, Rabbit MQ&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">// 声明队列</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">// String queue, boolean durable, boolean exclusive, boolean autoDelete,</span></span>
<span class="line"><span style="color:#24292E;">       Map</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String, Object</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> arguments</span></span>
<span class="line"><span style="color:#24292E;">           channel.</span><span style="color:#6F42C1;">queueDeclare</span><span style="color:#24292E;">(QUEUE_NAME, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">// 发送消息（发送到默认交换机AMQP Default，Direct）</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">// 如果有一个队列名称跟Routing Key相等，那么消息会路由到这个队列</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">// String exchange, String routingKey, BasicProperties props, byte[] body</span></span>
<span class="line"><span style="color:#24292E;">       channel.</span><span style="color:#6F42C1;">basicPublish</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">, QUEUE_NAME, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, msg.</span><span style="color:#6F42C1;">getBytes</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">       channel.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">       conn.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><h3 id="消费者" tabindex="-1">消费者 <a class="header-anchor" href="#消费者" aria-label="Permalink to &quot;消费者&quot;">​</a></h3><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> com.rabbitmq.client.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.io.IOException;</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyConsumer</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> String QUEUE_NAME </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;ORIGIN_QUEUE&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">       ConnectionFactory factory </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ConnectionFactory</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#6A737D;">// 连接IP</span></span>
<span class="line"><span style="color:#E1E4E8;">       factory.</span><span style="color:#B392F0;">setHost</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;127.0.0.1&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#6A737D;">// 默认监听端口</span></span>
<span class="line"><span style="color:#E1E4E8;">       factory.</span><span style="color:#B392F0;">setPort</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5672</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#6A737D;">// 虚拟机</span></span>
<span class="line"><span style="color:#E1E4E8;">       factory.</span><span style="color:#B392F0;">setVirtualHost</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#6A737D;">// 设置访问的用户</span></span>
<span class="line"><span style="color:#E1E4E8;">       factory.</span><span style="color:#B392F0;">setUsername</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;guest&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">       factory.</span><span style="color:#B392F0;">setPassword</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;guest&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#6A737D;">// 建立连接</span></span>
<span class="line"><span style="color:#E1E4E8;">       Connection conn </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> factory.</span><span style="color:#B392F0;">newConnection</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#6A737D;">// 创建消息通道</span></span>
<span class="line"><span style="color:#E1E4E8;">       Channel channel </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> conn.</span><span style="color:#B392F0;">createChannel</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#6A737D;">// 声明队列</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#6A737D;">// String queue, boolean durable, boolean exclusive, boolean autoDelete,</span></span>
<span class="line"><span style="color:#E1E4E8;">       Map</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String, Object</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> arguments</span></span>
<span class="line"><span style="color:#E1E4E8;">           channel.</span><span style="color:#B392F0;">queueDeclare</span><span style="color:#E1E4E8;">(QUEUE_NAME, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">       System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot; Waiting for message....&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#6A737D;">// 创建消费者</span></span>
<span class="line"><span style="color:#E1E4E8;">       Consumer consumer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DefaultConsumer</span><span style="color:#E1E4E8;">(channel) {</span></span>
<span class="line"><span style="color:#E1E4E8;">           @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">handleDelivery</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">consumerTag</span><span style="color:#E1E4E8;">, Envelope </span><span style="color:#FFAB70;">envelope</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                                      AMQP.BasicProperties </span><span style="color:#FFAB70;">properties</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">body</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> IOException {</span></span>
<span class="line"><span style="color:#E1E4E8;">               String msg </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(body, </span><span style="color:#9ECBFF;">&quot;UTF-8&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">               System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Received message : &#39;&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> msg </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&#39;&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">           }</span></span>
<span class="line"><span style="color:#E1E4E8;">       };</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#6A737D;">// 开始获取消息</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#6A737D;">// String queue, boolean autoAck, Consumer callback</span></span>
<span class="line"><span style="color:#E1E4E8;">       channel.</span><span style="color:#B392F0;">basicConsume</span><span style="color:#E1E4E8;">(QUEUE_NAME, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, consumer);</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> com.rabbitmq.client.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.io.IOException;</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyConsumer</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> String QUEUE_NAME </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;ORIGIN_QUEUE&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">       ConnectionFactory factory </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ConnectionFactory</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">// 连接IP</span></span>
<span class="line"><span style="color:#24292E;">       factory.</span><span style="color:#6F42C1;">setHost</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;127.0.0.1&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">// 默认监听端口</span></span>
<span class="line"><span style="color:#24292E;">       factory.</span><span style="color:#6F42C1;">setPort</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5672</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">// 虚拟机</span></span>
<span class="line"><span style="color:#24292E;">       factory.</span><span style="color:#6F42C1;">setVirtualHost</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">// 设置访问的用户</span></span>
<span class="line"><span style="color:#24292E;">       factory.</span><span style="color:#6F42C1;">setUsername</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;guest&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">       factory.</span><span style="color:#6F42C1;">setPassword</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;guest&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">// 建立连接</span></span>
<span class="line"><span style="color:#24292E;">       Connection conn </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> factory.</span><span style="color:#6F42C1;">newConnection</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">// 创建消息通道</span></span>
<span class="line"><span style="color:#24292E;">       Channel channel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> conn.</span><span style="color:#6F42C1;">createChannel</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">// 声明队列</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">// String queue, boolean durable, boolean exclusive, boolean autoDelete,</span></span>
<span class="line"><span style="color:#24292E;">       Map</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String, Object</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> arguments</span></span>
<span class="line"><span style="color:#24292E;">           channel.</span><span style="color:#6F42C1;">queueDeclare</span><span style="color:#24292E;">(QUEUE_NAME, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">       System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot; Waiting for message....&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">// 创建消费者</span></span>
<span class="line"><span style="color:#24292E;">       Consumer consumer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DefaultConsumer</span><span style="color:#24292E;">(channel) {</span></span>
<span class="line"><span style="color:#24292E;">           @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handleDelivery</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">consumerTag</span><span style="color:#24292E;">, Envelope </span><span style="color:#E36209;">envelope</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                                      AMQP.BasicProperties </span><span style="color:#E36209;">properties</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">body</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> IOException {</span></span>
<span class="line"><span style="color:#24292E;">               String msg </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(body, </span><span style="color:#032F62;">&quot;UTF-8&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">               System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Received message : &#39;&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> msg </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&#39;&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">           }</span></span>
<span class="line"><span style="color:#24292E;">       };</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">// 开始获取消息</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">// String queue, boolean autoAck, Consumer callback</span></span>
<span class="line"><span style="color:#24292E;">       channel.</span><span style="color:#6F42C1;">basicConsume</span><span style="color:#24292E;">(QUEUE_NAME, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, consumer);</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><h3 id="参数说明" tabindex="-1">参数说明 <a class="header-anchor" href="#参数说明" aria-label="Permalink to &quot;参数说明&quot;">​</a></h3><h4 id="声明交换机的参数" tabindex="-1">声明交换机的参数 <a class="header-anchor" href="#声明交换机的参数" aria-label="Permalink to &quot;声明交换机的参数&quot;">​</a></h4><ul><li>String type：交换机的类型，direct, topic, fanout中的一种。</li><li>boolean durable：是否持久化，代表交换机在服务器重启后是否还存在。</li></ul><h4 id="声明队列的参数" tabindex="-1">声明队列的参数 <a class="header-anchor" href="#声明队列的参数" aria-label="Permalink to &quot;声明队列的参数&quot;">​</a></h4><ul><li>boolean durable：是否持久化，代表队列在服务器重启后是否还存在。</li><li>boolean exclusive：是否排他性队列。排他性队列只能在声明它的Connection中使用，连接断开时自动删除。</li><li>boolean autoDelete：是否自动删除。如果为true，至少有一个消费者连接到这个队列，之后所有与这个队列连接的消费者都断开时，队列会自动删除。</li><li>Map&lt;String, Object&gt; arguments：队列的其他属性，例如 <ul><li>x-message-ttl、x-expires、x-max-length、x-max- length-bytes、x-dead-letter-exchange、x-dead-letter-routing-key、x-max-priority。</li></ul></li></ul><h4 id="消息属性basicproperties" tabindex="-1">消息属性BasicProperties <a class="header-anchor" href="#消息属性basicproperties" aria-label="Permalink to &quot;消息属性BasicProperties&quot;">​</a></h4><p>消息的全部属性有14个，以下列举了一些主要的参数：</p><table><thead><tr><th><strong>参数</strong></th><th><strong>释义</strong></th></tr></thead><tbody><tr><td>Map&lt;String,Object&gt; headers</td><td>消息的其他自定义参数</td></tr><tr><td>Integer deliveryMode</td><td>2持久化，其他：瞬态</td></tr><tr><td>Integer priority</td><td>消息的优先级</td></tr><tr><td>String correlationId</td><td>关联ID，方便RPC响应与请求关联</td></tr><tr><td>String replyTo</td><td>回调队列</td></tr><tr><td>String expiration</td><td>TTL，消息过期时间，单位毫秒</td></tr></tbody></table><h1 id="进阶知识" tabindex="-1">进阶知识 <a class="header-anchor" href="#进阶知识" aria-label="Permalink to &quot;进阶知识&quot;">​</a></h1><h2 id="_1、ttl-time-to-live" tabindex="-1">1、TTL（Time To Live） <a class="header-anchor" href="#_1、ttl-time-to-live" aria-label="Permalink to &quot;1、TTL（Time To Live）&quot;">​</a></h2><h3 id="a、消息的过期时间" tabindex="-1">a、消息的过期时间 <a class="header-anchor" href="#a、消息的过期时间" aria-label="Permalink to &quot;a、消息的过期时间&quot;">​</a></h3><p>有两种设置方式：</p><p>通过队列属性设置消息过期时间：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; argss </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">argss.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;x-message-ttl&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">6000</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">channel.</span><span style="color:#B392F0;">queueDeclare</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;TEST_TTL_QUEUE&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, argss);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; argss </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt;();</span></span>
<span class="line"><span style="color:#24292E;">argss.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;x-message-ttl&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">6000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">channel.</span><span style="color:#6F42C1;">queueDeclare</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;TEST_TTL_QUEUE&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, argss);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>设置单条消息的过期时间：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">AMQP.BasicProperties properties </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> AMQP.BasicProperties.</span><span style="color:#B392F0;">Builder</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">deliveryMode</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 持久化消息</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">contentEncoding</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;UTF-8&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">expiration</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;10000&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// TTL</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">channel.</span><span style="color:#B392F0;">basicPublish</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;TEST_TTL_QUEUE&quot;</span><span style="color:#E1E4E8;">, properties, msg.</span><span style="color:#B392F0;">getBytes</span><span style="color:#E1E4E8;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">AMQP.BasicProperties properties </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> AMQP.BasicProperties.</span><span style="color:#6F42C1;">Builder</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">deliveryMode</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 持久化消息</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">contentEncoding</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;UTF-8&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">expiration</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;10000&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// TTL</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">channel.</span><span style="color:#6F42C1;">basicPublish</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;TEST_TTL_QUEUE&quot;</span><span style="color:#24292E;">, properties, msg.</span><span style="color:#6F42C1;">getBytes</span><span style="color:#24292E;">());</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="b、队列的过期时间" tabindex="-1">b、队列的过期时间 <a class="header-anchor" href="#b、队列的过期时间" aria-label="Permalink to &quot;b、队列的过期时间&quot;">​</a></h3><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; argss </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">argss.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;x-message-ttl&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">6000</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">channel.</span><span style="color:#B392F0;">queueDeclare</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;TEST_TTL_QUEUE&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, argss);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; argss </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt;();</span></span>
<span class="line"><span style="color:#24292E;">argss.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;x-message-ttl&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">6000</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">channel.</span><span style="color:#6F42C1;">queueDeclare</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;TEST_TTL_QUEUE&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, argss);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>队列的过期时间决定了在没有任何消费者以后，队列可以存活多久。</p><p>参考：</p><p>com.gupaoedu.ttl</p><h2 id="_2、死信队列" tabindex="-1">2、死信队列 <a class="header-anchor" href="#_2、死信队列" aria-label="Permalink to &quot;2、死信队列&quot;">​</a></h2><p>有三种情况消息会进入DLX（Dead Letter Exchange）死信交换机。</p><ol><li>(NACK || Reject ) &amp;&amp; requeue == false</li><li>消息过期</li><li>队列达到最大长度（先入队的消息会被发送到DLX）</li></ol><p><img src="`+r+`" alt="RabbitMQ_工作模型与Java编程_死信队列.png"></p><p>可以设置一个死信队列（Dead Letter Queue）与DLX绑定，即可以存储Dead Letter，消费者可以监听这个队列取走消息。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; arguments </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">arguments.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;x-dead-letter-exchange&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;DLX_EXCHANGE&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 指定了这个队列的死信交换机</span></span>
<span class="line"><span style="color:#E1E4E8;">channel.</span><span style="color:#B392F0;">queueDeclare</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;TEST_DLX_QUEUE&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, arguments);</span></span>
<span class="line"><span style="color:#6A737D;">// 声明死信交换机</span></span>
<span class="line"><span style="color:#E1E4E8;">channel.</span><span style="color:#B392F0;">exchangeDeclare</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;DLX_EXCHANGE&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;topic&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 声明死信队列</span></span>
<span class="line"><span style="color:#E1E4E8;">channel.</span><span style="color:#B392F0;">queueDeclare</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;DLX_QUEUE&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 绑定</span></span>
<span class="line"><span style="color:#E1E4E8;">channel.</span><span style="color:#B392F0;">queueBind</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;DLX_QUEUE&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;DLX_EXCHANGE&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;#&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; arguments </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt;();</span></span>
<span class="line"><span style="color:#24292E;">arguments.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;x-dead-letter-exchange&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;DLX_EXCHANGE&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 指定了这个队列的死信交换机</span></span>
<span class="line"><span style="color:#24292E;">channel.</span><span style="color:#6F42C1;">queueDeclare</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;TEST_DLX_QUEUE&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, arguments);</span></span>
<span class="line"><span style="color:#6A737D;">// 声明死信交换机</span></span>
<span class="line"><span style="color:#24292E;">channel.</span><span style="color:#6F42C1;">exchangeDeclare</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;DLX_EXCHANGE&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;topic&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 声明死信队列</span></span>
<span class="line"><span style="color:#24292E;">channel.</span><span style="color:#6F42C1;">queueDeclare</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;DLX_QUEUE&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 绑定</span></span>
<span class="line"><span style="color:#24292E;">channel.</span><span style="color:#6F42C1;">queueBind</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;DLX_QUEUE&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;DLX_EXCHANGE&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;#&quot;</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>参考：</p><p>com.gupaoedu.dlx</p><h2 id="_3、优先级队列" tabindex="-1">3、优先级队列 <a class="header-anchor" href="#_3、优先级队列" aria-label="Permalink to &quot;3、优先级队列&quot;">​</a></h2><p>设置一个队列的最大优先级：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; argss </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">argss.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;x-max-priority&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 队列最大优先级</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">channel.</span><span style="color:#B392F0;">queueDeclare</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;ORIGIN_QUEUE&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, argss);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; argss </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt;();</span></span>
<span class="line"><span style="color:#24292E;">argss.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;x-max-priority&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 队列最大优先级</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">channel.</span><span style="color:#6F42C1;">queueDeclare</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ORIGIN_QUEUE&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, argss);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>发送消息时指定消息当前的优先级：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">AMQP.BasicProperties properties </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> AMQP.BasicProperties.</span><span style="color:#B392F0;">Builder</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">priority</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 消息优先级</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">channel.</span><span style="color:#B392F0;">basicPublish</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;ORIGIN_QUEUE&quot;</span><span style="color:#E1E4E8;">, properties, msg.</span><span style="color:#B392F0;">getBytes</span><span style="color:#E1E4E8;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">AMQP.BasicProperties properties </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> AMQP.BasicProperties.</span><span style="color:#6F42C1;">Builder</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">priority</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 消息优先级</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">channel.</span><span style="color:#6F42C1;">basicPublish</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;ORIGIN_QUEUE&quot;</span><span style="color:#24292E;">, properties, msg.</span><span style="color:#6F42C1;">getBytes</span><span style="color:#24292E;">());</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>优先级高的消息可以优先被消费。但是：只有消息堆积（消息的发送速度大于消费者的消费速度）的情况下优先级才有意义。</p><p>参考：</p><p>com.gupaoedu.message</p><h2 id="_4、延迟队列" tabindex="-1">4、延迟队列 <a class="header-anchor" href="#_4、延迟队列" aria-label="Permalink to &quot;4、延迟队列&quot;">​</a></h2><p>RabbitMQ本身不支持延迟队列。可以使用TTL结合DLX的方式来实现消息的延迟投递，即把DLX跟某个队列绑定， 到了指定时间，消息过期后，就会从DLX路由到这个队列，消费者可以从这个队列取走消息。</p><p>另一种方式是使用rabbitmq-delayed-message-exchange插件。</p><p>当然，将需要发送的信息保存在数据库，使用任务调度系统扫描然后发送也是可以实现的。</p><p>参考：</p><p>com.gupaoedu.dlx</p><h2 id="_5、rpc" tabindex="-1">5、RPC <a class="header-anchor" href="#_5、rpc" aria-label="Permalink to &quot;5、RPC&quot;">​</a></h2><p>RabbitMQ实现RPC的原理：服务端处理消息后，把响应消息发送到一个响应队列，客户端再从响应队列获取到结果。</p><p>其中的问题：Client收到消息后，怎么知道应答消息是回复哪一条消息的？所以必须有一个唯一ID来关联，就是 correlationId。</p><p><img src="`+c+`" alt="RabbitMQ_工作模型与Java编程_RabbitMq_RPC队列.png"></p><p>参考：</p><p>com.gupaoedu.rpc</p><h2 id="_6、服务端流控-flow-control" tabindex="-1">6、服务端流控（Flow Control） <a class="header-anchor" href="#_6、服务端流控-flow-control" aria-label="Permalink to &quot;6、服务端流控（Flow Control）&quot;">​</a></h2><p>RabbitMQ 会在启动时检测机器的物理内存数值。默认当 MQ 占用 40% 以上内存时，MQ 会主动抛出一个内存警告并阻塞所有连接（Connections）。可以通过修改 <code>rabbitmq.conﬁg</code> 文件来调整内存阈值，默认值是 0.4，如下所示： [{rabbit, [{vm_memory_high_watermark, 0.4}]}].</p><p>默认情况，如果剩余磁盘空间在 1GB 以下，RabbitMQ 主动阻塞所有的生产者。这个阈值也是可调的。注意队列长度只在消息堆积的情况下有意义，而且会删除先入队的消息，不能实现服务端限流。</p><h2 id="_7、消费端限流" tabindex="-1">7、消费端限流 <a class="header-anchor" href="#_7、消费端限流" aria-label="Permalink to &quot;7、消费端限流&quot;">​</a></h2><p>在AutoACK为false的情况下，如果一定数目的消息（通过基于consumer或者channel设置Qos的值）未被确认前，不进行消费新的消息。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">channel.</span><span style="color:#B392F0;">basicQos</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 如果超过2条消息没有发送ACK，当前消费者不再接收队列消息</span></span>
<span class="line"><span style="color:#E1E4E8;">channel.</span><span style="color:#B392F0;">basicConsume</span><span style="color:#E1E4E8;">(QUEUE_NAME, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, consumer);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">channel.</span><span style="color:#6F42C1;">basicQos</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 如果超过2条消息没有发送ACK，当前消费者不再接收队列消息</span></span>
<span class="line"><span style="color:#24292E;">channel.</span><span style="color:#6F42C1;">basicConsume</span><span style="color:#24292E;">(QUEUE_NAME, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, consumer);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>参考：com.gupaoedu.limit</p><h1 id="ui管理界面的使用" tabindex="-1">UI管理界面的使用 <a class="header-anchor" href="#ui管理界面的使用" aria-label="Permalink to &quot;UI管理界面的使用&quot;">​</a></h1><p>管理插件提供了更简单的管理方式。</p><h3 id="启-用-管-理-插-件" tabindex="-1">启 用 管 理 插 件 <a class="header-anchor" href="#启-用-管-理-插-件" aria-label="Permalink to &quot;启 用 管 理 插 件&quot;">​</a></h3><h4 id="windows启用管理插件" tabindex="-1">Windows启用管理插件 <a class="header-anchor" href="#windows启用管理插件" aria-label="Permalink to &quot;Windows启用管理插件&quot;">​</a></h4><div class="language-powershell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">powershell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">cd C:\\Program Files\\RabbitMQ Server\\rabbitmq_server</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">3.6</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">\\sbin</span></span>
<span class="line"><span style="color:#79B8FF;">rabbitmq-plugins.bat</span><span style="color:#E1E4E8;"> enable rabbitmq_management</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">cd C:\\Program Files\\RabbitMQ Server\\rabbitmq_server</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">3.6</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">\\sbin</span></span>
<span class="line"><span style="color:#005CC5;">rabbitmq-plugins.bat</span><span style="color:#24292E;"> enable rabbitmq_management</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="linux启用管理插件" tabindex="-1">Linux启用管理插件 <a class="header-anchor" href="#linux启用管理插件" aria-label="Permalink to &quot;Linux启用管理插件&quot;">​</a></h4><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">cd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/usr/lib/rabbitmq/bin</span></span>
<span class="line"><span style="color:#B392F0;">./rabbitmq-plugins</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">enable</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">rabbitmq_management</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">cd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/usr/lib/rabbitmq/bin</span></span>
<span class="line"><span style="color:#6F42C1;">./rabbitmq-plugins</span><span style="color:#24292E;"> </span><span style="color:#032F62;">enable</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rabbitmq_management</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="管理界面访问端口" tabindex="-1">管理界面访问端口 <a class="header-anchor" href="#管理界面访问端口" aria-label="Permalink to &quot;管理界面访问端口&quot;">​</a></h3><p>默认端口是15672，默认用户guest，密码guest。guest用户默认只能在本机访问。</p><h3 id="linux-创建-rabbitmq-用户" tabindex="-1">Linux 创建 RabbitMQ 用户 <a class="header-anchor" href="#linux-创建-rabbitmq-用户" aria-label="Permalink to &quot;Linux 创建 RabbitMQ 用户&quot;">​</a></h3><p>例如：创建用户admin，密码admin，授权访问所有的Vhost</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">firewall-cmd</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--permanent</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--add-port=15672/tcp</span></span>
<span class="line"><span style="color:#B392F0;">firewall-cmd</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--reload</span></span>
<span class="line"><span style="color:#B392F0;">rabbitmqctl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">add_user</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">admin</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">admin</span></span>
<span class="line"><span style="color:#B392F0;">rabbitmqctl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">set_user_tags</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">admin</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">administrator</span></span>
<span class="line"><span style="color:#B392F0;">rabbitmqctl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">set_permissions</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-p</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">admin</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;.*&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;.*&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;.*&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">firewall-cmd</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--permanent</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--add-port=15672/tcp</span></span>
<span class="line"><span style="color:#6F42C1;">firewall-cmd</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--reload</span></span>
<span class="line"><span style="color:#6F42C1;">rabbitmqctl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">add_user</span><span style="color:#24292E;"> </span><span style="color:#032F62;">admin</span><span style="color:#24292E;"> </span><span style="color:#032F62;">admin</span></span>
<span class="line"><span style="color:#6F42C1;">rabbitmqctl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">set_user_tags</span><span style="color:#24292E;"> </span><span style="color:#032F62;">admin</span><span style="color:#24292E;"> </span><span style="color:#032F62;">administrator</span></span>
<span class="line"><span style="color:#6F42C1;">rabbitmqctl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">set_permissions</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-p</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/</span><span style="color:#24292E;"> </span><span style="color:#032F62;">admin</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;.*&quot;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;.*&quot;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;.*&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h1 id="spring配置方式集成rabbitmq" tabindex="-1">Spring配置方式集成RabbitMQ <a class="header-anchor" href="#spring配置方式集成rabbitmq" aria-label="Permalink to &quot;Spring配置方式集成RabbitMQ&quot;">​</a></h1><p><img src="`+E+'" alt="RabbitMQ_工作模型与Java编程_Spring集成方式.png"></p><p>参考gitlab工程步骤：</p><p>1、创建Maven工程，pom.xml引入依赖</p><p>2、src/main/resouces目录，创建rabbitMQ.xml</p><p>3、配置applicationContext.xml</p><p>4、src/main/resouces目录，log4j.properties</p><p>5、编写生产者</p><p>6、编写4个消费者</p><p>7、编写单元测试类</p><h1 id="spring-boot集成rabbitmq" tabindex="-1">Spring Boot集成RabbitMQ <a class="header-anchor" href="#spring-boot集成rabbitmq" aria-label="Permalink to &quot;Spring Boot集成RabbitMQ&quot;">​</a></h1><p>参考gitlab工程</p>',137),u=[i];function b(d,F,m,h,g,C){return a(),n("div",null,u)}const A=s(y,[["render",b]]);export{v as __pageData,A as default};
