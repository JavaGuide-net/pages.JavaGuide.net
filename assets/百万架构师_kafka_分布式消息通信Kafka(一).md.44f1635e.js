import{_ as s,o as a,h as n,Q as l}from"./chunks/framework.da611722.js";const p="/assets/JavaGuide_Kafka_通信1_ELK图解.c6bb9e45.png",o="/assets/JavaGuide_Kafka_通信1_Kafka通信分区.dba1ae77.png",e="/assets/JavaGuide_Kafka_通信1_Kafka备注截图.4d40fd5d.png",r="/assets/JavaGuide_Kafka_通信1_不同的组可以消费同一条消息.cf6ef74d.png",c="/assets/JavaGuide_Kafka_通信1_同一个组只能有一个消费者消费消息.d977a018.png",t="/assets/JavaGuide_Kafka_通信1_Kafka_Client连接工具.8b7f0028.png",E="/assets/JavaGuide_Kafka_通信1_Kafka消息发送截图.84b4abe7.png",i="/assets/JavaGuide_Kafka_通信1_Kafka发送消息Topic不存在.c7deac9c.png",A=JSON.parse('{"title":"分布式消息通信Kafka(一) | JavaGuide","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://JavaGuide.net/百万架构师/kafka/分布式消息通信Kafka(一).html"}],["meta",{"name":"keywords","content":"分布式消息通信Kafka(一) , JavaGuide , JavaGuide官网, Java面试指南, Java基础, 多线程, JVM, 虚拟机, 数据库, MySQL, Spring, Redis, MyBatis, 系统设计, 分布式, RPC, 高可用, 高并发"}],["meta",{"name":"og:url","content":"https://JavaGuide.net"}],["meta",{"name":"og:type","content":"website"}],["meta",{"name":"og:image","content":"https://JavaGuide.net/og.png"}],["meta",{"name":"og:title","content":"分布式消息通信Kafka(一) | JavaGuide | Java面试指南 | JavaGuide官网"}],["meta",{"name":"og:description","content":"分布式消息通信Kafka(一) | JavaGuide | Java面试指南 | JavaGuide官网 | 「JavaGuide.net」一份涵盖大部分 Java 程序员所需要掌握的核心知识。准备 Java 面试，首选 JavaGuide.net ！"}],["meta",{"name":"twitter:site","content":"https://JavaGuide.net"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:creator","content":"nogeek.cn"}],["meta",{"name":"twitter:title","content":"分布式消息通信Kafka(一) | JavaGuide | Java面试指南 | JavaGuide官网"}],["meta",{"name":"twitter:description","content":"分布式消息通信Kafka(一) | JavaGuide | Java面试指南 | JavaGuide官网 | 「JavaGuide.net」一份涵盖大部分 Java 程序员所需要掌握的核心知识。准备 Java 面试，首选 JavaGuide.net ！"}],["meta",{"name":"twitter:image","content":"https://JavaGuide.net/og.png"}],["meta",{"name":"sogou_site_verification","content":"fcAkazTXFd"}],["meta",{"name":"baidu-site-verification","content":"codeva-MXEPYsXKGk"}],["meta",{"name":"msvalidate.01","content":"9F2D57CFC59E8031212A166878638B15"}]]},"headers":[],"relativePath":"百万架构师/kafka/分布式消息通信Kafka(一).md","filePath":"百万架构师/kafka/分布式消息通信Kafka(一).md","lastUpdated":1741277271000}'),y={name:"百万架构师/kafka/分布式消息通信Kafka(一).md"},u=l('<h3 id="课程目标" tabindex="-1">课程目标 <a class="header-anchor" href="#课程目标" aria-label="Permalink to &quot;课程目标&quot;">​</a></h3><ul><li>Kafka 产生的背景</li><li>Kafka 的架构</li><li>Kafka 的安装部署和集群部署</li><li>Kafka 的基本操作</li><li>Kafka 的应用</li></ul><h1 id="kafka-的简介" tabindex="-1">Kafka 的简介 <a class="header-anchor" href="#kafka-的简介" aria-label="Permalink to &quot;Kafka 的简介&quot;">​</a></h1><ul><li>高性能</li><li>高吞吐量</li></ul><h2 id="什么是-kafka" tabindex="-1">什么是 Kafka <a class="header-anchor" href="#什么是-kafka" aria-label="Permalink to &quot;什么是 Kafka&quot;">​</a></h2><p>​ Kafka 是一款分布式消息发布和订阅系统，具有高性能、高吞吐量的特点而被广泛应用于大数据传输场景。它是由 LinkedIn公 司开发，使用 Scala 语言编写，之后成为 Apache 基金会的一个顶级项目。 kafka 提供了类似 JMS 的特性，但是在设计和实现上是完全不同的，而且他也不是 JMS 规范的实现。</p><h2 id="kafka-产生的背景" tabindex="-1">Kafka 产生的背景 <a class="header-anchor" href="#kafka-产生的背景" aria-label="Permalink to &quot;Kafka 产生的背景&quot;">​</a></h2><p>​ kafka作为一个消息系统，早期设计的目的是用作 LinkedIn 的活动流（Activity Stream）和运营数据处理管道（Pipeline）。活动流数据是所有的网站对用户的使用情况做分析的时候要用到的最常规的部分，活动数据包括页面的访问量（PV）、被查看内容方面的信息以及搜索内容。这种数据通常的处理方式是先把各种活动以日志的形式写入某种文件，然后周期性地对这些文件进行统计分析。运营数据指的是服务器的性能数据（CPU、IO使用率、请求时间、服务日志等）。</p><h2 id="kafka-的应用场景" tabindex="-1">Kafka 的应用场景 <a class="header-anchor" href="#kafka-的应用场景" aria-label="Permalink to &quot;Kafka 的应用场景&quot;">​</a></h2><ul><li>内置分区</li><li>实现集群</li></ul><p>​ <code>spring cloud stream</code> 也有 Kafka 的实现。</p><p>​ 由于 kafka 具有更好的吞吐量、内置分区、冗余及容错性的优点 ( kafka 每秒可以处理几十万消息 ) ，让 kafka 成为了一个很好的大规模消息处理应用的解决方案。所以在企业级应用中，主要会应用于如下几个方面：</p><ul><li>行为跟踪：kafka可以用于跟踪用户浏览页面、搜索及其他行为。通过发布-订阅模式实时记录到对应的topic中，通过后端大数据平台接入处理分析，并做更进一步的实时处理和监控。</li><li>日志收集：在日志收集方面，有很多比较优秀的产品，比如 Apache Flume，很多公司使用kafka 代理日志聚合。日志聚合表示从服务器上收集日志文件，然后放到一个集中的平台（文件服务器）进行处理。在实际应用开发中，我们应用程序的 log 都会输出到本地的磁盘上， 排查问题的话通过 linux 命令来搞定，如果应用程序组成了负载均衡集群，并且集群的机器有几十台以上，那么想通过日志快速定位到问题，就是很麻烦的事情了。所以一般都会做一个日志统一收集平台管理 log 日志用来快速查询重要应用的问题。所以很多公司的套路都是把应用日志集中到 kafka 上，然后分别导入到 es 和 hdfs 上，用来做实时检索分析和离线统计数据备份等。而另一方面，kafka 本身又提供了很好的 api 来集成日志并且做日志收集。</li></ul><p><img src="'+p+'" alt="JavaGuide_Kafka_通信1_ELK图解.png"></p><h2 id="kafka-本身的架构" tabindex="-1">Kafka 本身的架构 <a class="header-anchor" href="#kafka-本身的架构" aria-label="Permalink to &quot;Kafka 本身的架构&quot;">​</a></h2><p>​ 一个典型的 kafka 集群包含若干 Producer（可以是应用节点产生的消息，也可以是通过Flume 收集日志产生的事件），若干个 Broker（kafka 支持水平扩展）、若干个 Consumer 、Group，以及一个 zookeeper 集群。kafka 通过 zookeeper 管理集群配置及服务协同。</p><ul><li><p>Producer 使用 push 模式将消息发布到 broker，consumer 通过监听使用 pull 模式从broker 订阅并消费消息。</p></li><li><p>多个 broker 协同工作， producer 和 consumer 部署在各个业务逻辑中。三者通过zookeeper 管理协调请求和转发。这样就组成了一个高性能的分布式消息发布和订阅系统。图上有一个细节是和其他 mq 中间件不同的点。producer 发送消息到 broker 的过程是 push，而 consumer 从 broker 消费消息的过程是 pull，主动去拉数据。而不是 broker 把数据主动发送给 consumer 。</p></li><li><p>Topic 主题</p></li><li><p>partion 数据分区</p></li><li><p>group</p></li></ul><p><img src="'+o+`" alt="JavaGuide_Kafka_通信1_Kafka通信分区.png"></p><h1 id="kafka-的安装部署" tabindex="-1">kafka 的安装部署 <a class="header-anchor" href="#kafka-的安装部署" aria-label="Permalink to &quot;kafka 的安装部署&quot;">​</a></h1><h2 id="下载安装包" tabindex="-1">下载安装包 <a class="header-anchor" href="#下载安装包" aria-label="Permalink to &quot;下载安装包&quot;">​</a></h2><p><a href="https://www.apache.org/dyn/closer.cgi?path=/kafka/1.1.0/kafka_2.11-1.1.0.tgz" target="_blank" rel="noreferrer">https://www.apache.org/dyn/closer.cgi?path=/kafka/1.1.0/kafka_2.11-1.1.0.tgz</a></p><p>kafka_2.11-1.1.0.tgx: <a href="http://mirrors.hust.edu.cn/apache/kafka/2.0.0/kafka_2.11-2.0.0.tgz" target="_blank" rel="noreferrer">http://mirrors.hust.edu.cn/apache/kafka/2.0.0/kafka_2.11-2.0.0.tgz</a></p><h2 id="安装过程" tabindex="-1">安装过程 <a class="header-anchor" href="#安装过程" aria-label="Permalink to &quot;安装过程&quot;">​</a></h2><ol><li>tar -zxvf 解压安装包</li></ol><blockquote><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@Darian1 software]# tar </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">zxvf kafka_2.</span><span style="color:#79B8FF;">11</span><span style="color:#F97583;">-</span><span style="color:#FDAEB7;font-style:italic;">2.0.0.tgz</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@Darian1 software]# tar </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">zxvf kafka_2.</span><span style="color:#005CC5;">11</span><span style="color:#D73A49;">-</span><span style="color:#B31D28;font-style:italic;">2.0.0.tgz</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></blockquote><h3 id="kafka-目录介绍" tabindex="-1">kafka 目录介绍 <a class="header-anchor" href="#kafka-目录介绍" aria-label="Permalink to &quot;kafka 目录介绍&quot;">​</a></h3><ol><li><code>/bin</code> 操作 kafka 的可执行脚本</li><li><code>/config</code> 配置文件</li><li><code>/libs</code> 依赖库目录</li><li><code>/logs</code> 日志数据目录</li></ol><h2 id="启动-停止-kafka" tabindex="-1">启动 /停止 kafka <a class="header-anchor" href="#启动-停止-kafka" aria-label="Permalink to &quot;启动 /停止 kafka&quot;">​</a></h2><ol><li>需要先启动 zookeeper ，如果没有搭建 zookeeper 环境，可以直接运行kafka内嵌的zookeeper 启动命令： bin/zookeeper-server-start.sh config/zookeeper.properties &amp;</li><li>进入kafka目录，运行 bin/kafka-server-start.sh ｛-daemon 后台启动｝ config/server.properties &amp;</li><li>进入kafka目录，运行bin/kafka-server-stop.sh config/server.properties</li></ol><h3 id="运行的外部的-zookeeper-集群的-kafka" tabindex="-1">运行的外部的 Zookeeper 集群的 Kafka <a class="header-anchor" href="#运行的外部的-zookeeper-集群的-kafka" aria-label="Permalink to &quot;运行的外部的 Zookeeper 集群的 Kafka&quot;">​</a></h3><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@Darian1 bin]# vim ..</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">config</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">server.properties </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">zookeeper.connect</span><span style="color:#F97583;">=</span><span style="color:#FDAEB7;font-style:italic;">168.40.128</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">2181</span><span style="color:#E1E4E8;">,</span><span style="color:#FDAEB7;font-style:italic;">192.168.40.129</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">2181</span><span style="color:#E1E4E8;">,</span><span style="color:#FDAEB7;font-style:italic;">192.168.40.131</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">2181</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">[root@Darian1 bin]# sh kafka</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">server</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">start.sh ..</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">config</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">server.properties</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@Darian1 bin]# vim ..</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">config</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">server.properties </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">zookeeper.connect</span><span style="color:#D73A49;">=</span><span style="color:#B31D28;font-style:italic;">168.40.128</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">2181</span><span style="color:#24292E;">,</span><span style="color:#B31D28;font-style:italic;">192.168.40.129</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">2181</span><span style="color:#24292E;">,</span><span style="color:#B31D28;font-style:italic;">192.168.40.131</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">2181</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">[root@Darian1 bin]# sh kafka</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">server</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">start.sh ..</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">config</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">server.properties</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><blockquote><p>如果超时时间连接较长可以延长时间。</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@Darian1 bin]# vim ..</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">config</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">server.properties </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">zookeeper.connect</span><span style="color:#F97583;">=</span><span style="color:#FDAEB7;font-style:italic;">192.168.40.128</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">2181</span><span style="color:#E1E4E8;">,</span><span style="color:#FDAEB7;font-style:italic;">192.168.40.129</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">2181</span><span style="color:#E1E4E8;">,</span><span style="color:#FDAEB7;font-style:italic;">192.168.40.131</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">2181</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"># Timeout in ms </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> connecting to zookeeper</span></span>
<span class="line"><span style="color:#E1E4E8;">zookeeper.connection.timeout.ms</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">30000</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@Darian1 bin]# vim ..</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">config</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">server.properties </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">zookeeper.connect</span><span style="color:#D73A49;">=</span><span style="color:#B31D28;font-style:italic;">192.168.40.128</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">2181</span><span style="color:#24292E;">,</span><span style="color:#B31D28;font-style:italic;">192.168.40.129</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">2181</span><span style="color:#24292E;">,</span><span style="color:#B31D28;font-style:italic;">192.168.40.131</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">2181</span><span style="color:#24292E;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"># Timeout in ms </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> connecting to zookeeper</span></span>
<span class="line"><span style="color:#24292E;">zookeeper.connection.timeout.ms</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">30000</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></blockquote><h1 id="kafka-的基本操作" tabindex="-1">Kafka 的基本操作 <a class="header-anchor" href="#kafka-的基本操作" aria-label="Permalink to &quot;Kafka 的基本操作&quot;">​</a></h1><h4 id="前提" tabindex="-1">前提： <a class="header-anchor" href="#前提" aria-label="Permalink to &quot;前提：&quot;">​</a></h4><blockquote><p>首先需要启动 zookeeper</p></blockquote><h4 id="启动-kafka" tabindex="-1">启动 <strong>kafka</strong> <a class="header-anchor" href="#启动-kafka" aria-label="Permalink to &quot;启动 **kafka**&quot;">​</a></h4><div class="language-verilog vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">verilog</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@Darian1 bin]# sh kafka</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">server</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">start.sh ..</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">config</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">server.properties</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@Darian1 bin]# sh kafka</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">server</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">start.sh ..</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">config</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">server.properties</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="后台启动kafka" tabindex="-1">后台启动kafka <a class="header-anchor" href="#后台启动kafka" aria-label="Permalink to &quot;后台启动kafka&quot;">​</a></h4><div class="language-verilog vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">verilog</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@Darian1 bin]# sh kafka</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">server</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">start.sh </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">daemon ..</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">config</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">server.properties</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@Darian1 bin]# sh kafka</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">server</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">start.sh </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">daemon ..</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">config</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">server.properties</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="创建一个-topic" tabindex="-1">创建一个 Topic <a class="header-anchor" href="#创建一个-topic" aria-label="Permalink to &quot;创建一个 Topic&quot;">​</a></h4><div class="language-verilog vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">verilog</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@Darian1 bin]# sh kafka</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">topics.sh </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">create </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">zookeeper </span><span style="color:#79B8FF;">192</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">168</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">40</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">128</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">2181</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">192</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">168</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">40</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">129</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">2181</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">192</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">168</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">40</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">131</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">2181</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">replication</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">factor </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">partitions </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">topic darianTest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">Created topic </span><span style="color:#9ECBFF;">&quot;darianTest&quot;</span><span style="color:#E1E4E8;">.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@Darian1 bin]# sh kafka</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">topics.sh </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">create </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">zookeeper </span><span style="color:#005CC5;">192</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">168</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">40</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">128</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">2181</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">192</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">168</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">40</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">129</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">2181</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">192</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">168</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">40</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">131</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">2181</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">replication</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">factor </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">partitions </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">topic darianTest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">Created topic </span><span style="color:#032F62;">&quot;darianTest&quot;</span><span style="color:#24292E;">.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Replication-factor 表示该topic需要在不同的broker中保存几份，这里设置成1，表示在两个broker中保存两份</p><p>Partitions 分区数</p><h4 id="查看所有的-topic" tabindex="-1">查看所有的 Topic <a class="header-anchor" href="#查看所有的-topic" aria-label="Permalink to &quot;查看所有的 Topic&quot;">​</a></h4><div class="language-verilog vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">verilog</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@Darian1 bin]# sh kafka</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">topics.sh </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">list </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">zookeeper </span><span style="color:#79B8FF;">192</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">168</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">40</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">128</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">2181</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">192</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">168</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">40</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">129</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">2181</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">192</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">168</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">40</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">131</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">2181</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@Darian1 bin]# sh kafka</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">topics.sh </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">list </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">zookeeper </span><span style="color:#005CC5;">192</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">168</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">40</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">128</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">2181</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">192</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">168</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">40</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">129</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">2181</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">192</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">168</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">40</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">131</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">2181</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-verilog vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">verilog</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@Darian1 bin]# sh kafka</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">topics.sh </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">list </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">zookeeper localhost:</span><span style="color:#79B8FF;">2181</span></span>
<span class="line"><span style="color:#E1E4E8;">darianTest</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@Darian1 bin]# sh kafka</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">topics.sh </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">list </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">zookeeper localhost:</span><span style="color:#005CC5;">2181</span></span>
<span class="line"><span style="color:#24292E;">darianTest</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="查看-topic-属性" tabindex="-1">查看 topic 属性 <a class="header-anchor" href="#查看-topic-属性" aria-label="Permalink to &quot;查看 topic 属性&quot;">​</a></h4><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@Darian1 bin]# .</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">kafka</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">topics.sh </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">describe </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">zookeeper </span><span style="color:#FDAEB7;font-style:italic;">192.168.40.128</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">2181</span><span style="color:#E1E4E8;">,</span><span style="color:#FDAEB7;font-style:italic;">192.168.40.129</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">2181</span><span style="color:#E1E4E8;">,</span><span style="color:#FDAEB7;font-style:italic;">192.168.40.131</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">2181</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">topic darianTest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">Topic:darianTest	PartitionCount:</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">	ReplicationFactor:</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">	Configs:</span></span>
<span class="line"><span style="color:#E1E4E8;">	Topic: darianTest	Partition: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">	Leader: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">	Replicas: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">	Isr: </span><span style="color:#79B8FF;">1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@Darian1 bin]# .</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">kafka</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">topics.sh </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">describe </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">zookeeper </span><span style="color:#B31D28;font-style:italic;">192.168.40.128</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">2181</span><span style="color:#24292E;">,</span><span style="color:#B31D28;font-style:italic;">192.168.40.129</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">2181</span><span style="color:#24292E;">,</span><span style="color:#B31D28;font-style:italic;">192.168.40.131</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">2181</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">topic darianTest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">Topic:darianTest	PartitionCount:</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">	ReplicationFactor:</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">	Configs:</span></span>
<span class="line"><span style="color:#24292E;">	Topic: darianTest	Partition: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">	Leader: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">	Replicas: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">	Isr: </span><span style="color:#005CC5;">1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="创建一个控制台发送端" tabindex="-1">创建一个控制台发送端 <a class="header-anchor" href="#创建一个控制台发送端" aria-label="Permalink to &quot;创建一个控制台发送端&quot;">​</a></h4><p>Broker-list 不是 zookeeper</p><div class="language-verilog vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">verilog</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@Darian1 bin]# sh kafka</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">console</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">producer.sh </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">broker</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">list localhost:</span><span style="color:#79B8FF;">9092</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">topic darianTest</span></span>
<span class="line"><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">hello</span></span>
<span class="line"><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">helloworld</span></span>
<span class="line"><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">dsfsdf</span></span>
<span class="line"><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">sdfsd</span></span>
<span class="line"><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@Darian1 bin]# sh kafka</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">console</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">producer.sh </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">broker</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">list localhost:</span><span style="color:#005CC5;">9092</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">topic darianTest</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">hello</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">helloworld</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">dsfsdf</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">sdfsd</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="创建一个控制台接收端" tabindex="-1">创建一个控制台接收端 <a class="header-anchor" href="#创建一个控制台接收端" aria-label="Permalink to &quot;创建一个控制台接收端&quot;">​</a></h4><div class="language-verilog vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">verilog</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@Darian1 bin]# sh kafka</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">console</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">consumer.sh </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">bootstrap</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">server localhost:</span><span style="color:#79B8FF;">9092</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">topic darianTest </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">from</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">beginning</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">hello</span></span>
<span class="line"><span style="color:#E1E4E8;">helloworld</span></span>
<span class="line"><span style="color:#E1E4E8;">dsfsdf</span></span>
<span class="line"><span style="color:#E1E4E8;">sdfsd</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@Darian1 bin]# sh kafka</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">console</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">consumer.sh </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">bootstrap</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">server localhost:</span><span style="color:#005CC5;">9092</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">topic darianTest </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">from</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">beginning</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">hello</span></span>
<span class="line"><span style="color:#24292E;">helloworld</span></span>
<span class="line"><span style="color:#24292E;">dsfsdf</span></span>
<span class="line"><span style="color:#24292E;">sdfsd</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h1 id="安装集群环境" tabindex="-1">安装集群环境 <a class="header-anchor" href="#安装集群环境" aria-label="Permalink to &quot;安装集群环境&quot;">​</a></h1><p>zookeeper 能够完成 kafka 的集群</p><p>修改 <code>server.properties</code> 配置</p><ol><li><p>修改server.properties. broker.id=0 / 1</p></li><li><p>修改server.properties 修改成本机IP</p></li></ol><p>advertised.listeners=PLAINTEXT://192.168.11.153:9092</p><p>当 Kafka broker 启动时，它会在ZK上注册自己的IP和端口号，客户端就通过这个IP和端口号来连接。Kafka 的 listeners 如果需要配置集群的话，需要把自己机器的 IP 配置上去。</p><h6 id="_192-168-40-128" tabindex="-1">192.168.40.128 <a class="header-anchor" href="#_192-168-40-128" aria-label="Permalink to &quot;192.168.40.128&quot;">​</a></h6><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@Darian1 bin]# vim ../config/server.properties </span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 在集群里边必须是唯一的，默认情况下 broker.id 都是 0 ，需要标识它的唯一性</span></span>
<span class="line"><span style="color:#B392F0;">broker.id</span><span style="color:#E1E4E8;">=1 </span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">zookeeper.connect</span><span style="color:#E1E4E8;">=192.168.40.128:2181</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">listeners</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">PLAINTEXT://192.168.40.128:9092</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@Darian1 bin]# vim ../config/server.properties </span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 在集群里边必须是唯一的，默认情况下 broker.id 都是 0 ，需要标识它的唯一性</span></span>
<span class="line"><span style="color:#6F42C1;">broker.id</span><span style="color:#24292E;">=1 </span><span style="color:#032F62;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">zookeeper.connect</span><span style="color:#24292E;">=192.168.40.128:2181</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">listeners</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">PLAINTEXT://192.168.40.128:9092</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h6 id="_192-168-40-129" tabindex="-1">192.168.40.129 <a class="header-anchor" href="#_192-168-40-129" aria-label="Permalink to &quot;192.168.40.129&quot;">​</a></h6><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 在集群里边必须是唯一的，默认情况下 broker.id 都是 0 ，需要标识它的唯一性</span></span>
<span class="line"><span style="color:#B392F0;">broker.id</span><span style="color:#E1E4E8;">= </span><span style="color:#79B8FF;">2</span></span>
<span class="line"><span style="color:#B392F0;">zookeeper.connect</span><span style="color:#E1E4E8;">=192.168.40.128:2181</span></span>
<span class="line"><span style="color:#E1E4E8;">listeners</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">PLAINTEXT://192.168.40.129:9092</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 在集群里边必须是唯一的，默认情况下 broker.id 都是 0 ，需要标识它的唯一性</span></span>
<span class="line"><span style="color:#6F42C1;">broker.id</span><span style="color:#24292E;">= </span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#6F42C1;">zookeeper.connect</span><span style="color:#24292E;">=192.168.40.128:2181</span></span>
<span class="line"><span style="color:#24292E;">listeners</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">PLAINTEXT://192.168.40.129:9092</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h6 id="_192-168-40-131" tabindex="-1">192.168.40.131 <a class="header-anchor" href="#_192-168-40-131" aria-label="Permalink to &quot;192.168.40.131&quot;">​</a></h6><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 在集群里边必须是唯一的，默认情况下 broker.id 都是 0 ，需要标识它的唯一性</span></span>
<span class="line"><span style="color:#B392F0;">broker.id</span><span style="color:#E1E4E8;">= </span><span style="color:#79B8FF;">3</span></span>
<span class="line"><span style="color:#B392F0;">zookeeper.connect</span><span style="color:#E1E4E8;">=192.168.40.128:2181</span></span>
<span class="line"><span style="color:#E1E4E8;">listeners</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">PLAINTEXT://192.168.40.131:9092</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 在集群里边必须是唯一的，默认情况下 broker.id 都是 0 ，需要标识它的唯一性</span></span>
<span class="line"><span style="color:#6F42C1;">broker.id</span><span style="color:#24292E;">= </span><span style="color:#005CC5;">3</span></span>
<span class="line"><span style="color:#6F42C1;">zookeeper.connect</span><span style="color:#24292E;">=192.168.40.128:2181</span></span>
<span class="line"><span style="color:#24292E;">listeners</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">PLAINTEXT://192.168.40.131:9092</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@Darian1 bin]# sh kafka-server-start.sh -daemon ../config/server.properties</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@Darian1 bin]# sh kafka-server-start.sh -daemon ../config/server.properties</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p>Kafka 启动不好的话，多启动两次。</p></blockquote><p>启动成功以后，看 zookeeper 节点的变化：</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@Darian1 bin]# sh zkCli.sh </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">[zk: localhost:</span><span style="color:#79B8FF;">2181</span><span style="color:#E1E4E8;">(CONNECTED) </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] ls </span><span style="color:#F97583;">/</span></span>
<span class="line"><span style="color:#E1E4E8;">[cluster, controller_epoch, brokers, zookeeper, admin, isr_change_notification, consumers, log_dir_event_notification, latest_producer_id_block, config]</span></span>
<span class="line"><span style="color:#E1E4E8;">[zk: localhost:</span><span style="color:#79B8FF;">2181</span><span style="color:#E1E4E8;">(CONNECTED) </span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;">] ls </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">brokers</span></span>
<span class="line"><span style="color:#E1E4E8;">[ids, topics, seqid]</span></span>
<span class="line"><span style="color:#E1E4E8;">[zk: localhost:</span><span style="color:#79B8FF;">2181</span><span style="color:#E1E4E8;">(CONNECTED) </span><span style="color:#79B8FF;">11</span><span style="color:#E1E4E8;">] ls </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">brokers</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">ids</span></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">[zk: localhost:</span><span style="color:#79B8FF;">2181</span><span style="color:#E1E4E8;">(CONNECTED) </span><span style="color:#79B8FF;">15</span><span style="color:#E1E4E8;">] get </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">controller</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&quot;version&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;brokerid&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;timestamp&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&quot;1548340180496&quot;</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">cZxid </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">100000147</span></span>
<span class="line"><span style="color:#E1E4E8;">ctime </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Thu Jan </span><span style="color:#79B8FF;">24</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">22</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">29</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">40</span><span style="color:#E1E4E8;"> CST </span><span style="color:#79B8FF;">2019</span></span>
<span class="line"><span style="color:#E1E4E8;">mZxid </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">100000147</span></span>
<span class="line"><span style="color:#E1E4E8;">mtime </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Thu Jan </span><span style="color:#79B8FF;">24</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">22</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">29</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">40</span><span style="color:#E1E4E8;"> CST </span><span style="color:#79B8FF;">2019</span></span>
<span class="line"><span style="color:#E1E4E8;">pZxid </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">100000147</span></span>
<span class="line"><span style="color:#E1E4E8;">cversion </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">dataVersion </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">aclVersion </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">ephemeralOwner </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">1687fbe81fe000a</span></span>
<span class="line"><span style="color:#E1E4E8;">dataLength </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">54</span></span>
<span class="line"><span style="color:#E1E4E8;">numChildren </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@Darian1 bin]# sh zkCli.sh </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">[zk: localhost:</span><span style="color:#005CC5;">2181</span><span style="color:#24292E;">(CONNECTED) </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] ls </span><span style="color:#D73A49;">/</span></span>
<span class="line"><span style="color:#24292E;">[cluster, controller_epoch, brokers, zookeeper, admin, isr_change_notification, consumers, log_dir_event_notification, latest_producer_id_block, config]</span></span>
<span class="line"><span style="color:#24292E;">[zk: localhost:</span><span style="color:#005CC5;">2181</span><span style="color:#24292E;">(CONNECTED) </span><span style="color:#005CC5;">12</span><span style="color:#24292E;">] ls </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">brokers</span></span>
<span class="line"><span style="color:#24292E;">[ids, topics, seqid]</span></span>
<span class="line"><span style="color:#24292E;">[zk: localhost:</span><span style="color:#005CC5;">2181</span><span style="color:#24292E;">(CONNECTED) </span><span style="color:#005CC5;">11</span><span style="color:#24292E;">] ls </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">brokers</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">ids</span></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">[zk: localhost:</span><span style="color:#005CC5;">2181</span><span style="color:#24292E;">(CONNECTED) </span><span style="color:#005CC5;">15</span><span style="color:#24292E;">] get </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">controller</span></span>
<span class="line"><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;version&quot;</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;brokerid&quot;</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;timestamp&quot;</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&quot;1548340180496&quot;</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">cZxid </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">100000147</span></span>
<span class="line"><span style="color:#24292E;">ctime </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Thu Jan </span><span style="color:#005CC5;">24</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">22</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">29</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">40</span><span style="color:#24292E;"> CST </span><span style="color:#005CC5;">2019</span></span>
<span class="line"><span style="color:#24292E;">mZxid </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">100000147</span></span>
<span class="line"><span style="color:#24292E;">mtime </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Thu Jan </span><span style="color:#005CC5;">24</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">22</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">29</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">40</span><span style="color:#24292E;"> CST </span><span style="color:#005CC5;">2019</span></span>
<span class="line"><span style="color:#24292E;">pZxid </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">100000147</span></span>
<span class="line"><span style="color:#24292E;">cversion </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">dataVersion </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">aclVersion </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">ephemeralOwner </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">1687fbe81fe000a</span></span>
<span class="line"><span style="color:#24292E;">dataLength </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">54</span></span>
<span class="line"><span style="color:#24292E;">numChildren </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>​ 每一个节点都有它相应的含义。我们的写请求会落到 <code>Master</code> 节点上，读请求可以走其他节点去读。他们都是热备可以工作的。他的选举规则是最小的节点也就是最早注册的节点。</p><p>​ 中间件都是成熟的商业化的东西。</p><h1 id="java-api-的使用" tabindex="-1">JAVA API 的使用 <a class="header-anchor" href="#java-api-的使用" aria-label="Permalink to &quot;JAVA API 的使用&quot;">​</a></h1><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.apache.kafka&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;kafka-clients&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;1.1.0&lt;/</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.apache.kafka&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;kafka-clients&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;1.1.0&lt;/</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="kafkaconsumer" tabindex="-1">KafKaConsumer <a class="header-anchor" href="#kafkaconsumer" aria-label="Permalink to &quot;KafKaConsumer&quot;">​</a></h2><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">KafkaConsumerDemo</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Thread</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> KafkaConsumer kafkaConsumer;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">KafkaConsumerDemo</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">topic</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 设置属性</span></span>
<span class="line"><span style="color:#E1E4E8;">        Properties properties </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Properties</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        properties.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG,</span></span>
<span class="line"><span style="color:#E1E4E8;">                       </span><span style="color:#9ECBFF;">&quot;192.168.40.128:9092,192.168.40.129:9092,192.168.40.131:9092&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 消费组</span></span>
<span class="line"><span style="color:#E1E4E8;">        properties.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(ConsumerConfig.GROUP_ID_CONFIG, </span><span style="color:#9ECBFF;">&quot;KafkaConsumerDemo&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        properties.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, </span><span style="color:#9ECBFF;">&quot;false&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 间隔时间</span></span>
<span class="line"><span style="color:#E1E4E8;">        properties.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(ConsumerConfig.AUTO_COMMIT_INTERVAL_MS_CONFIG, </span><span style="color:#9ECBFF;">&quot;1000&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        properties.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG,</span></span>
<span class="line"><span style="color:#E1E4E8;">                       </span><span style="color:#9ECBFF;">&quot;org.apache.kafka.common.serialization.IntegerDeserializer&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        properties.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG,</span></span>
<span class="line"><span style="color:#E1E4E8;">                       </span><span style="color:#9ECBFF;">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 从最早的开始</span></span>
<span class="line"><span style="color:#E1E4E8;">        properties.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, </span><span style="color:#9ECBFF;">&quot;earliest&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        kafkaConsumer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">KafkaConsumer</span><span style="color:#E1E4E8;">(properties);</span></span>
<span class="line"><span style="color:#E1E4E8;">        kafkaConsumer.</span><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">(Collections.</span><span style="color:#B392F0;">singletonList</span><span style="color:#E1E4E8;">(topic));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            ConsumerRecords&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; consumerRecords </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> kafkaConsumer.</span><span style="color:#B392F0;">poll</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 超时时间</span></span>
<span class="line"><span style="color:#E1E4E8;">            consumerRecords.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(consumerRecord </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                System.err.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;[message receive]:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> consumerRecord.</span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">                kafkaConsumer.</span><span style="color:#B392F0;">commitSync</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            });</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">KafkaConsumerDemo</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;test&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">KafkaConsumerDemo</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Thread</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> KafkaConsumer kafkaConsumer;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">KafkaConsumerDemo</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">topic</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 设置属性</span></span>
<span class="line"><span style="color:#24292E;">        Properties properties </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Properties</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        properties.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG,</span></span>
<span class="line"><span style="color:#24292E;">                       </span><span style="color:#032F62;">&quot;192.168.40.128:9092,192.168.40.129:9092,192.168.40.131:9092&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 消费组</span></span>
<span class="line"><span style="color:#24292E;">        properties.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(ConsumerConfig.GROUP_ID_CONFIG, </span><span style="color:#032F62;">&quot;KafkaConsumerDemo&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        properties.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, </span><span style="color:#032F62;">&quot;false&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 间隔时间</span></span>
<span class="line"><span style="color:#24292E;">        properties.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(ConsumerConfig.AUTO_COMMIT_INTERVAL_MS_CONFIG, </span><span style="color:#032F62;">&quot;1000&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        properties.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG,</span></span>
<span class="line"><span style="color:#24292E;">                       </span><span style="color:#032F62;">&quot;org.apache.kafka.common.serialization.IntegerDeserializer&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        properties.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG,</span></span>
<span class="line"><span style="color:#24292E;">                       </span><span style="color:#032F62;">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 从最早的开始</span></span>
<span class="line"><span style="color:#24292E;">        properties.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, </span><span style="color:#032F62;">&quot;earliest&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        kafkaConsumer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">KafkaConsumer</span><span style="color:#24292E;">(properties);</span></span>
<span class="line"><span style="color:#24292E;">        kafkaConsumer.</span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(Collections.</span><span style="color:#6F42C1;">singletonList</span><span style="color:#24292E;">(topic));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            ConsumerRecords&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; consumerRecords </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> kafkaConsumer.</span><span style="color:#6F42C1;">poll</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 超时时间</span></span>
<span class="line"><span style="color:#24292E;">            consumerRecords.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(consumerRecord </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                System.err.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;[message receive]:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> consumerRecord.</span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                kafkaConsumer.</span><span style="color:#6F42C1;">commitSync</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            });</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">KafkaConsumerDemo</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;test&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><h2 id="kafkaproducer" tabindex="-1">KafkaProducer <a class="header-anchor" href="#kafkaproducer" aria-label="Permalink to &quot;KafkaProducer&quot;">​</a></h2><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">KafkaProducerDemo</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Thread</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> KafkaProducer&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; producer;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String topic;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> isAsync;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">KafkaProducerDemo</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">topic</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">isAsync</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 设置属性</span></span>
<span class="line"><span style="color:#E1E4E8;">        Properties properties </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Properties</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        properties.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,</span></span>
<span class="line"><span style="color:#E1E4E8;">                       </span><span style="color:#9ECBFF;">&quot;192.168.40.128:9092,192.168.40.129:9092,192.168.40.131:9092&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        properties.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(ProducerConfig.CLIENT_ID_CONFIG, </span><span style="color:#9ECBFF;">&quot;KafkaProducerDemo&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        properties.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(ProducerConfig.ACKS_CONFIG, </span><span style="color:#9ECBFF;">&quot;-1&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        properties.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,</span></span>
<span class="line"><span style="color:#E1E4E8;">                       </span><span style="color:#9ECBFF;">&quot;org.apache.kafka.common.serialization.IntegerSerializer&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        properties.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,</span></span>
<span class="line"><span style="color:#E1E4E8;">                       </span><span style="color:#9ECBFF;">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        producer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> KafkaProducer&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt;(properties);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.topic </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> topic;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.isAsync </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> isAsync;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> num </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (num </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            String message </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;message_&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> num;</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.err.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;[producer message]:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> message);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (isAsync) { </span><span style="color:#6A737D;">// 异步发送</span></span>
<span class="line"><span style="color:#E1E4E8;">                producer.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ProducerRecord&lt;&gt;(topic, message), (recordMetadata, e) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (recordMetadata </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                        System.err.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;[async-offset]:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> recordMetadata.</span><span style="color:#B392F0;">offset</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">                                           </span><span style="color:#9ECBFF;">&quot;-&gt;[partition]:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> recordMetadata.</span><span style="color:#B392F0;">partition</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#E1E4E8;">                });</span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {  </span><span style="color:#6A737D;">// 同步发送 future / callable</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    RecordMetadata recordMetadata </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> producer.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ProducerRecord&lt;&gt;(topic, message)).</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                    System.err.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;[sync-offset]:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> recordMetadata.</span><span style="color:#B392F0;">offset</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">                                       </span><span style="color:#9ECBFF;">&quot;-&gt;[partition]:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> recordMetadata.</span><span style="color:#B392F0;">partition</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">                } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Exception </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    e.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            num</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                Thread.</span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (InterruptedException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                e.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">KafkaProducerDemo</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;test&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">KafkaProducerDemo</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Thread</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> KafkaProducer&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; producer;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String topic;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> isAsync;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">KafkaProducerDemo</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">topic</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#E36209;">isAsync</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 设置属性</span></span>
<span class="line"><span style="color:#24292E;">        Properties properties </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Properties</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        properties.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,</span></span>
<span class="line"><span style="color:#24292E;">                       </span><span style="color:#032F62;">&quot;192.168.40.128:9092,192.168.40.129:9092,192.168.40.131:9092&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        properties.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(ProducerConfig.CLIENT_ID_CONFIG, </span><span style="color:#032F62;">&quot;KafkaProducerDemo&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        properties.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(ProducerConfig.ACKS_CONFIG, </span><span style="color:#032F62;">&quot;-1&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        properties.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,</span></span>
<span class="line"><span style="color:#24292E;">                       </span><span style="color:#032F62;">&quot;org.apache.kafka.common.serialization.IntegerSerializer&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        properties.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,</span></span>
<span class="line"><span style="color:#24292E;">                       </span><span style="color:#032F62;">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        producer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> KafkaProducer&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt;(properties);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.topic </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> topic;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.isAsync </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> isAsync;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> num </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (num </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">50</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            String message </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;message_&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> num;</span></span>
<span class="line"><span style="color:#24292E;">            System.err.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;[producer message]:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> message);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (isAsync) { </span><span style="color:#6A737D;">// 异步发送</span></span>
<span class="line"><span style="color:#24292E;">                producer.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ProducerRecord&lt;&gt;(topic, message), (recordMetadata, e) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (recordMetadata </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                        System.err.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;[async-offset]:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> recordMetadata.</span><span style="color:#6F42C1;">offset</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                                           </span><span style="color:#032F62;">&quot;-&gt;[partition]:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> recordMetadata.</span><span style="color:#6F42C1;">partition</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">                });</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {  </span><span style="color:#6A737D;">// 同步发送 future / callable</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                    RecordMetadata recordMetadata </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> producer.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ProducerRecord&lt;&gt;(topic, message)).</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                    System.err.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;[sync-offset]:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> recordMetadata.</span><span style="color:#6F42C1;">offset</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                                       </span><span style="color:#032F62;">&quot;-&gt;[partition]:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> recordMetadata.</span><span style="color:#6F42C1;">partition</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Exception </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                    e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            num</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                Thread.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (InterruptedException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">KafkaProducerDemo</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;test&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br></div></div><ul><li><p>Kafka 有两种 API</p><ul><li>封装得比较好的</li><li>非常灵活的</li></ul></li><li><p>Kafka 的配置信息非常地详细</p></li></ul><p><img src="`+e+'" alt="JavaGuide_Kafka_通信1_Kafka备注截图.png"></p><h2 id="配置信息分析" tabindex="-1">配置信息分析 <a class="header-anchor" href="#配置信息分析" aria-label="Permalink to &quot;配置信息分析&quot;">​</a></h2><h3 id="发送端的可选配置信息分析" tabindex="-1">发送端的可选配置信息分析 <a class="header-anchor" href="#发送端的可选配置信息分析" aria-label="Permalink to &quot;发送端的可选配置信息分析&quot;">​</a></h3><h5 id="ackacks" tabindex="-1"><code>ackacks</code> <a class="header-anchor" href="#ackacks" aria-label="Permalink to &quot;`ackacks`&quot;">​</a></h5><p>acks 配置表示 producer 发送消息到 broker 上以后的确认值。有三个可选项</p><ul><li>0：表示 producer 不需要等待 broker 的消息确认。这个选项时延最小但同时风险最大（因为当 server 宕机时，数据将会丢失）。</li><li>1：表示 producer 只需要获得 kafka 集群中的 leader 节点确认即可，这个选择时延较小同时确保了 leader 节点确认接收成功。</li><li>all(-1)：需要 ISR 中所有的 Replica 给予接收确认（需要集群中的所有节点确认），速度最慢，安全性最高，但是由于 ISR 可能会缩小到仅包含一个 Replica ，所以设置参数为 all 并不能一定避免数据丢失。</li></ul><h5 id="batch-size" tabindex="-1"><code>batch.size</code> <a class="header-anchor" href="#batch-size" aria-label="Permalink to &quot;`batch.size`&quot;">​</a></h5><p>​ 生产者发送多个消息到 <code>broker</code> 上的同一个 <strong>分区</strong> 时，为了减少网络请求带来的性能开销，通过批量的方式来提交消息，可以通过这个参数来控制批量提交的字节数大小，默认大小是 16384byte , 也就是 16kb ，意味着当一批消息大小达到指定的 <code>batch.size</code> 的时候会统一发送。</p><h5 id="linger-ms" tabindex="-1"><code>linger.ms</code> <a class="header-anchor" href="#linger-ms" aria-label="Permalink to &quot;`linger.ms`&quot;">​</a></h5><p>​ <strong>Producer</strong> 默认会把两次发送时间间隔内收集到的所有 Requests 进行一次聚合然后再发送，以此提高吞吐量，而 <code>linger.ms</code> 就是为每次发送到 broker 的请求增加一些 delay，以此来聚合更多的 Message 请求。 这个有点像TCP里面的 Nagle 算法，在 TCP 协议的传输中，为了减少大量小数据包的发送，采用了 Nagle 算法，也就是基于小包的等-停协议。</p><ul><li><code>batch.size</code> 和 <code>linger.ms </code> 这两个参数是kafka性能优化的关键参数，很多同学会发现 batch.size 和 linger.ms 这两者的作用是一样的，如果两个都配置了，那么怎么工作的呢？实际上，当二者都配置的时候，只要满足其中一个要求，就会发送请求到 broker 上。</li></ul><h5 id="max-request-size" tabindex="-1"><code>max.request.size</code> <a class="header-anchor" href="#max-request-size" aria-label="Permalink to &quot;`max.request.size`&quot;">​</a></h5><p>​ 设置请求的数据的最大字节数，为了防止发生较大的数据包影响到吞吐量，默认值为1MB。</p><p>还有重试次数等</p><h4 id="消息的同步发送和异步发送" tabindex="-1">消息的同步发送和异步发送： <a class="header-anchor" href="#消息的同步发送和异步发送" aria-label="Permalink to &quot;消息的同步发送和异步发送：&quot;">​</a></h4><p>​ Kafka 1.0 以后，默认的发送方式都是异步发送消息。</p><p>​ 我们的消息通过 <strong>Kafka producer</strong> 去 <code>send</code> 以后，这个消息实际上是放到一个后台的发送队列里边，然后通过一个后台的线程，通过不断地从后代的发送队列中不断地取出消息进行发送。发送以后，进行调用回调方法。就是 <code>Callback</code> 方法进行执行。</p><p>​ 同步发送就是用的 future 的时候去阻塞。获得发送信息是进行阻塞。</p><h3 id="消费端的可选配置分析" tabindex="-1">消费端的可选配置分析 <a class="header-anchor" href="#消费端的可选配置分析" aria-label="Permalink to &quot;消费端的可选配置分析&quot;">​</a></h3><h4 id="group-id" tabindex="-1"><code>group.id</code> <a class="header-anchor" href="#group-id" aria-label="Permalink to &quot;`group.id`&quot;">​</a></h4><p>​ <code>consumer group</code> 是 kafka 提供的可扩展且具有容错性的消费者机制。既然是一个组，那么组内必然可以有多个消费者或消费者实例 ( consumer instance ) ，它们共享一个公共的 ID ，即 group ID 。组内的所有消费者协调在一起来消费订阅主题 ( subscribed topics ) 的所有分区 ( partition ) 。当然，每个分区只能由同一个消费组内的一个 consumer 来消费。如下图所示，分别有三个消费者，属于两个不同的 group ，那么对于 firstTopic 这个 topic 来说，这两个组的消费者都能同时消费这个 topic 中的消息，对于此时的架构来说，这个 firstTopic 就类似于 ActiveMQ 中的 topic 概念。如右图所示，如果3个消费者都属于同一个 group ，那么此时 firstTopic 就是一个 Queue 的概念。</p><ul><li>不同的组可以同时消费同一条消息。</li></ul><p><img src="'+r+'" alt="JavaGuide_Kafka_通信1_不同的组可以消费同一条消息.png"></p><ul><li>同一个组只能有一个 Consumer 能够拿到消息</li></ul><p><img src="'+c+`" alt="JavaGuide_Kafka_通信1_同一个组只能有一个消费者消费消息.png"></p><h4 id="enable-auto-commit" tabindex="-1"><code>enable.auto.commit</code> <a class="header-anchor" href="#enable-auto-commit" aria-label="Permalink to &quot;\`enable.auto.commit\`&quot;">​</a></h4><p><code>ENABLE_AUTO_COMMIT_CONFIG</code> 可以设置成 <code>false</code> 。</p><p>​ 消费者消费消息以后自动提交，只有当消息提交以后，该消息才不会被再次接收到，还可以配合 <code>auto.commit.interval.ms</code> 控制自动提交的频率。 每一段时间内的消息批量地确认提交。</p><p>​ 当然，我们也可以通过 <code>consumer.commitSync()</code> 的方式实现手动提交</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 异步 Commit</span></span>
<span class="line"><span style="color:#E1E4E8;">    kafkaConsumer.</span><span style="color:#B392F0;">commitAsync</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 同步 commit</span></span>
<span class="line"><span style="color:#E1E4E8;">    kafkaConsumer.</span><span style="color:#B392F0;">commitSync</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 可以选择不同的 Topic </span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">commitOffsetsSync</span><span style="color:#E1E4E8;">(Map</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">TopicPartition, OffsetAndMetadata</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> offsets, </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> timeoutMs) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 可以选择不同的回调接口 callback 接口</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">commitOffsetsAsync</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Map</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">TopicPartition, OffsetAndMetadata</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> offsets, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> OffsetCommitCallback callback) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 异步 Commit</span></span>
<span class="line"><span style="color:#24292E;">    kafkaConsumer.</span><span style="color:#6F42C1;">commitAsync</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 同步 commit</span></span>
<span class="line"><span style="color:#24292E;">    kafkaConsumer.</span><span style="color:#6F42C1;">commitSync</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// </span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 可以选择不同的 Topic </span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">commitOffsetsSync</span><span style="color:#24292E;">(Map</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">TopicPartition, OffsetAndMetadata</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> offsets, </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> timeoutMs) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 可以选择不同的回调接口 callback 接口</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">commitOffsetsAsync</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Map</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">TopicPartition, OffsetAndMetadata</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> offsets, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> OffsetCommitCallback callback) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h4 id="auto-offset-reset" tabindex="-1"><code>auto.offset.reset</code> <a class="header-anchor" href="#auto-offset-reset" aria-label="Permalink to &quot;\`auto.offset.reset\`&quot;">​</a></h4><p>​ 这个参数是针对新的 <code>groupid</code> 中的消费者而言的，当有新 <code>groupid</code> 的消费者来消费指定的 <code>topic</code> 时，对于该参数的配置，会有不同的语义</p><ul><li><code>auto.offset.reset=latest</code> 情况下，新的消费者将会从其他消费者最后消费的 offset 处开始消费 Topic 下的消息。</li><li><code>auto.offset.reset= earliest</code> 情况下，新的消费者会从该 topic 最早的消息开始消费，（对于新的 groupId 来说，重置 offset ）。</li><li><code>auto.offset.reset=none</code> 情况下，新的消费者加入以后，由于之前不存在offset，则会直接抛出异常。</li></ul><p>没有消费组，就会抛出异常。</p><h4 id="max-poll-records" tabindex="-1"><code>max.poll.records</code> <a class="header-anchor" href="#max-poll-records" aria-label="Permalink to &quot;\`max.poll.records\`&quot;">​</a></h4><p>​ 此设置限制每次调用 poll 返回的消息数，这样可以更容易地预测每次 poll 间隔要处理的最大值。通过调整此值，可以减少 poll 间隔。</p><p>Kafka 工具：</p><p><img src="`+t+`" alt="JavaGuide_Kafka_通信1_Kafka_Client连接工具.png"></p><p>​ 消息都会写到磁盘上，只要磁盘上这条消息可以存在，那么我换不同的 <code>GroupId</code> ，那么就可以一直去消费这条消息。</p><h1 id="spring-kafka-集成" tabindex="-1">Spring -kafka 集成 <a class="header-anchor" href="#spring-kafka-集成" aria-label="Permalink to &quot;Spring -kafka 集成&quot;">​</a></h1><p>​ Spring 整合 Kafka 实现注册成功以后去设置抽奖名额（赠送一个抽奖机会）。</p><p>​</p><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.springframework.kafka&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;spring-kafka&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.springframework.boot&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;spring-boot-starter-web&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.springframework.boot&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;spring-boot-starter&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.springframework.kafka&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;spring-kafka&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.springframework.boot&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;spring-boot-starter-web&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.springframework.boot&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;spring-boot-starter&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><div class="language-properties vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">properties</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 定义应用的名称</span></span>
<span class="line"><span style="color:#F97583;">spring.application.name</span><span style="color:#E1E4E8;">=spring-cloud-stream-kafka</span></span>
<span class="line"><span style="color:#6A737D;"># 配置 Web 服务端口</span></span>
<span class="line"><span style="color:#F97583;">server.port</span><span style="color:#E1E4E8;">=8080</span></span>
<span class="line"><span style="color:#6A737D;"># 失效管理安全</span></span>
<span class="line"><span style="color:#F97583;">management.security.enabled</span><span style="color:#E1E4E8;">=false</span></span>
<span class="line"><span style="color:#6A737D;"># 配置需要的 kafka 主题</span></span>
<span class="line"><span style="color:#F97583;">kafka.topic.test</span><span style="color:#E1E4E8;">=test</span></span>
<span class="line"><span style="color:#F97583;">kafka.topic.darian</span><span style="color:#E1E4E8;">=darian</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 配置 kafka 的 zookeeper 的节点</span></span>
<span class="line"><span style="color:#6A737D;">#spring.cloud.stream.kafka.binder.zk-nodes=192.168.136.128:2181</span></span>
<span class="line"><span style="color:#F97583;">spring.cloud.stream.kafka.streams.binder.configuration.zk-nodes</span><span style="color:#E1E4E8;">=192.168.40.128:2181</span></span>
<span class="line"><span style="color:#6A737D;"># 配置 Spring Kafka 配置信息</span></span>
<span class="line"><span style="color:#F97583;">spring.kafka.bootstrap-servers</span><span style="color:#E1E4E8;">=192.168.40.128:9092,192.168.40.129:9092,192.168.40.131:9092</span></span>
<span class="line"><span style="color:#6A737D;"># Kafka 生产者配置</span></span>
<span class="line"><span style="color:#F97583;">spring.kafka.producer.bootstrap-servers</span><span style="color:#E1E4E8;">=192.168.40.128:9092</span></span>
<span class="line"><span style="color:#F97583;">spring.kafka.producer.key-deserializer</span><span style="color:#E1E4E8;">=org.apache.kafka.common.serialization.StringSerializer</span></span>
<span class="line"><span style="color:#F97583;">spring.kafka.producer.value-serializer</span><span style="color:#E1E4E8;">=org.apache.kafka.common.serialization.StringSerializer</span></span>
<span class="line"><span style="color:#6A737D;"># kafka 消费者配置</span></span>
<span class="line"><span style="color:#F97583;">spring.kafka.consumer.group-id</span><span style="color:#E1E4E8;">=darian-1</span></span>
<span class="line"><span style="color:#F97583;">spring.kafka.consumer.key-deserializer</span><span style="color:#E1E4E8;">=org.apache.kafka.common.serialization.StringDeserializer</span></span>
<span class="line"><span style="color:#F97583;">spring.kafka.consumer.value-deserializer</span><span style="color:#E1E4E8;">=org.apache.kafka.common.serialization.StringDeserializer</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 定义应用的名称</span></span>
<span class="line"><span style="color:#D73A49;">spring.application.name</span><span style="color:#24292E;">=spring-cloud-stream-kafka</span></span>
<span class="line"><span style="color:#6A737D;"># 配置 Web 服务端口</span></span>
<span class="line"><span style="color:#D73A49;">server.port</span><span style="color:#24292E;">=8080</span></span>
<span class="line"><span style="color:#6A737D;"># 失效管理安全</span></span>
<span class="line"><span style="color:#D73A49;">management.security.enabled</span><span style="color:#24292E;">=false</span></span>
<span class="line"><span style="color:#6A737D;"># 配置需要的 kafka 主题</span></span>
<span class="line"><span style="color:#D73A49;">kafka.topic.test</span><span style="color:#24292E;">=test</span></span>
<span class="line"><span style="color:#D73A49;">kafka.topic.darian</span><span style="color:#24292E;">=darian</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 配置 kafka 的 zookeeper 的节点</span></span>
<span class="line"><span style="color:#6A737D;">#spring.cloud.stream.kafka.binder.zk-nodes=192.168.136.128:2181</span></span>
<span class="line"><span style="color:#D73A49;">spring.cloud.stream.kafka.streams.binder.configuration.zk-nodes</span><span style="color:#24292E;">=192.168.40.128:2181</span></span>
<span class="line"><span style="color:#6A737D;"># 配置 Spring Kafka 配置信息</span></span>
<span class="line"><span style="color:#D73A49;">spring.kafka.bootstrap-servers</span><span style="color:#24292E;">=192.168.40.128:9092,192.168.40.129:9092,192.168.40.131:9092</span></span>
<span class="line"><span style="color:#6A737D;"># Kafka 生产者配置</span></span>
<span class="line"><span style="color:#D73A49;">spring.kafka.producer.bootstrap-servers</span><span style="color:#24292E;">=192.168.40.128:9092</span></span>
<span class="line"><span style="color:#D73A49;">spring.kafka.producer.key-deserializer</span><span style="color:#24292E;">=org.apache.kafka.common.serialization.StringSerializer</span></span>
<span class="line"><span style="color:#D73A49;">spring.kafka.producer.value-serializer</span><span style="color:#24292E;">=org.apache.kafka.common.serialization.StringSerializer</span></span>
<span class="line"><span style="color:#6A737D;"># kafka 消费者配置</span></span>
<span class="line"><span style="color:#D73A49;">spring.kafka.consumer.group-id</span><span style="color:#24292E;">=darian-1</span></span>
<span class="line"><span style="color:#D73A49;">spring.kafka.consumer.key-deserializer</span><span style="color:#24292E;">=org.apache.kafka.common.serialization.StringDeserializer</span></span>
<span class="line"><span style="color:#D73A49;">spring.kafka.consumer.value-deserializer</span><span style="color:#24292E;">=org.apache.kafka.common.serialization.StringDeserializer</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h5 id="kafkaconsumerlistener" tabindex="-1">KafkaConsumerListener <a class="header-anchor" href="#kafkaconsumerlistener" aria-label="Permalink to &quot;KafkaConsumerListener&quot;">​</a></h5><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Component</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">KafkaConsumerListener</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">KafkaListener</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">topics</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;\${kafka.topic.test}&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onMessageTest</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">message</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Kafka test 消费者监听器，接收到消息：&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> message);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">KafkaListener</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">topics</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;\${kafka.topic.darian}&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onMessageDarian</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">message</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Kafka darian消费者监听器，接收到消息：&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> message);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Component</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">KafkaConsumerListener</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">KafkaListener</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">topics</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;\${kafka.topic.test}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onMessageTest</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">message</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Kafka test 消费者监听器，接收到消息：&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> message);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">KafkaListener</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">topics</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;\${kafka.topic.darian}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onMessageDarian</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">message</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Kafka darian消费者监听器，接收到消息：&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> message);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h5 id="kafkaproducercontroller" tabindex="-1">KafkaProducerController <a class="header-anchor" href="#kafkaproducercontroller" aria-label="Permalink to &quot;KafkaProducerController&quot;">​</a></h5><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RequiredArgsConstructor</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RestController</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">KafkaProducerController</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> KafkaTemplate&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; kafkaTemplate;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">GetMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/message/send/{topic}&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> TopicMessage </span><span style="color:#B392F0;">sendMessage</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            @</span><span style="color:#F97583;">PathVariable</span><span style="color:#E1E4E8;"> String </span><span style="color:#FFAB70;">topic</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            @</span><span style="color:#F97583;">RequestParam</span><span style="color:#E1E4E8;"> String </span><span style="color:#FFAB70;">message</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ((</span><span style="color:#F97583;">!</span><span style="color:#9ECBFF;">&quot;darian&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(topic)) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#9ECBFF;">&quot;test&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(topic))) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TopicMessage</span><span style="color:#E1E4E8;">(topic, message, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;topic【&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> topic </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;】 不存在&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        ListenableFuture&lt;SendResult&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt;&gt; send </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> kafkaTemplate.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(topic, message);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TopicMessage</span><span style="color:#E1E4E8;">(topic, message, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;success&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Data</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TopicMessage</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String topic;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String message;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> send;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String errorMessage;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RequiredArgsConstructor</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RestController</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">KafkaProducerController</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> KafkaTemplate&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; kafkaTemplate;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">GetMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/message/send/{topic}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> TopicMessage </span><span style="color:#6F42C1;">sendMessage</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">PathVariable</span><span style="color:#24292E;"> String </span><span style="color:#E36209;">topic</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">RequestParam</span><span style="color:#24292E;"> String </span><span style="color:#E36209;">message</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((</span><span style="color:#D73A49;">!</span><span style="color:#032F62;">&quot;darian&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(topic)) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#032F62;">&quot;test&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(topic))) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TopicMessage</span><span style="color:#24292E;">(topic, message, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;topic【&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> topic </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;】 不存在&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        ListenableFuture&lt;SendResult&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt;&gt; send </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> kafkaTemplate.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(topic, message);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TopicMessage</span><span style="color:#24292E;">(topic, message, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;success&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Data</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TopicMessage</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String topic;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String message;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> send;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String errorMessage;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><p><img src="`+E+'" alt="JavaGuide_Kafka_通信1_Kafka消息发送截图.png"></p><p><img src="'+i+'" alt="JavaGuide_Kafka_通信1_Kafka发送消息Topic不存在.png"></p>',128),d=[u];function b(m,F,k,g,f,h){return a(),n("div",null,d)}const D=s(y,[["render",b]]);export{A as __pageData,D as default};
