import{_ as s,o as n,h as a,Q as l}from"./chunks/framework.da611722.js";const p="/assets/20180414_Spring系统概述及IOC实现原理.bc2ea41e.png",e="/assets/20180415-Spring核心IOC容器及依赖注入原理.3456e647.png",F=JSON.parse('{"title":"Spring核心IOC容器及依赖注入原理 | JavaGuide","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://JavaGuide.net/百万架构师/Spring 源码分析/Spring核心IOC容器及依赖注入原理.html"}],["meta",{"name":"keywords","content":"Spring核心IOC容器及依赖注入原理 , JavaGuide , JavaGuide官网, Java面试指南, Java基础, 多线程, JVM, 虚拟机, 数据库, MySQL, Spring, Redis, MyBatis, 系统设计, 分布式, RPC, 高可用, 高并发"}],["meta",{"name":"og:url","content":"https://JavaGuide.net"}],["meta",{"name":"og:type","content":"website"}],["meta",{"name":"og:image","content":"https://JavaGuide.net/og.png"}],["meta",{"name":"og:title","content":"Spring核心IOC容器及依赖注入原理 | JavaGuide | Java面试指南 | JavaGuide官网"}],["meta",{"name":"og:description","content":"Spring核心IOC容器及依赖注入原理 | JavaGuide | Java面试指南 | JavaGuide官网 | 「JavaGuide.net」一份涵盖大部分 Java 程序员所需要掌握的核心知识。准备 Java 面试，首选 JavaGuide.net ！"}],["meta",{"name":"twitter:site","content":"https://JavaGuide.net"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:creator","content":"nogeek.cn"}],["meta",{"name":"twitter:title","content":"Spring核心IOC容器及依赖注入原理 | JavaGuide | Java面试指南 | JavaGuide官网"}],["meta",{"name":"twitter:description","content":"Spring核心IOC容器及依赖注入原理 | JavaGuide | Java面试指南 | JavaGuide官网 | 「JavaGuide.net」一份涵盖大部分 Java 程序员所需要掌握的核心知识。准备 Java 面试，首选 JavaGuide.net ！"}],["meta",{"name":"twitter:image","content":"https://JavaGuide.net/og.png"}],["meta",{"name":"sogou_site_verification","content":"fcAkazTXFd"}],["meta",{"name":"baidu-site-verification","content":"codeva-MXEPYsXKGk"}],["meta",{"name":"msvalidate.01","content":"9F2D57CFC59E8031212A166878638B15"}]]},"headers":[],"relativePath":"百万架构师/Spring 源码分析/Spring核心IOC容器及依赖注入原理.md","filePath":"百万架构师/Spring 源码分析/Spring核心IOC容器及依赖注入原理.md","lastUpdated":1741277271000}'),o={name:"百万架构师/Spring 源码分析/Spring核心IOC容器及依赖注入原理.md"},r=l('<p>Spring核心IOC容器及依赖注入原理</p><p><img src="'+p+`" alt="20180414_Spring系统概述及IOC实现原理"></p><p><code>ClassPathXmlApplicationContext</code></p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">//存储注册信息的BeanDefinition</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#6A737D;">// 传说已久的 IOC 容器</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">BeanDefinition</span><span style="color:#E1E4E8;">&gt; beanDefinitionMap </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ConcurrentHashMap&lt;&gt;(</span><span style="color:#79B8FF;">256</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//存储注册信息的BeanDefinition</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6A737D;">// 传说已久的 IOC 容器</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">BeanDefinition</span><span style="color:#24292E;">&gt; beanDefinitionMap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ConcurrentHashMap&lt;&gt;(</span><span style="color:#005CC5;">256</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ClassPathXmlApplicationContext</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] configLocations, </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> refresh, @</span><span style="color:#F97583;">Nullable</span><span style="color:#E1E4E8;"> ApplicationContext parent)</span></span>
<span class="line"><span style="color:#E1E4E8;">      throws BeansException {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">(parent);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 就是我们资源</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">setConfigLocations</span><span style="color:#E1E4E8;">(configLocations);</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (refresh) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 初始化最核心的方法，就是 refresh()</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 把所有的 Bean 重新构造一遍</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 七分猜测、三分验证</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">refresh</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ClassPathXmlApplicationContext</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] configLocations, </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> refresh, @</span><span style="color:#D73A49;">Nullable</span><span style="color:#24292E;"> ApplicationContext parent)</span></span>
<span class="line"><span style="color:#24292E;">      throws BeansException {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">(parent);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 就是我们资源</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">setConfigLocations</span><span style="color:#24292E;">(configLocations);</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (refresh) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 初始化最核心的方法，就是 refresh()</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 把所有的 Bean 重新构造一遍</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 七分猜测、三分验证</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">refresh</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p><code>refresh()</code> 是为了确保我们的类只会加载一次。只会被调用一次，只会是一个单例。</p><h3 id="导致ioc容器初始化失败" tabindex="-1">导致IOC容器初始化失败： <a class="header-anchor" href="#导致ioc容器初始化失败" aria-label="Permalink to &quot;导致IOC容器初始化失败：&quot;">​</a></h3><ul><li>加载配置文件出错的时候</li><li>解析类出错的时候</li><li>初始化抛出不可预知异常的时候</li></ul><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Destroy already created singletons to avoid dangling resoutces</span></span>
<span class="line"><span style="color:#6A737D;">// 销毁已经创建的Bean</span></span>
<span class="line"><span style="color:#B392F0;">destroyBeans</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">// Reset &#39;active&#39; flag</span></span>
<span class="line"><span style="color:#6A737D;">// 取消 regresh 操作，重置容器的同步标识</span></span>
<span class="line"><span style="color:#B392F0;">concelRefresh</span><span style="color:#E1E4E8;">(ex);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Destroy already created singletons to avoid dangling resoutces</span></span>
<span class="line"><span style="color:#6A737D;">// 销毁已经创建的Bean</span></span>
<span class="line"><span style="color:#6F42C1;">destroyBeans</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// Reset &#39;active&#39; flag</span></span>
<span class="line"><span style="color:#6A737D;">// 取消 regresh 操作，重置容器的同步标识</span></span>
<span class="line"><span style="color:#6F42C1;">concelRefresh</span><span style="color:#24292E;">(ex);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>只要有错，已经加载好的类都会销毁。</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>定位</td><td>资源配置import、classpath、url</td></tr><tr><td>加载</td><td>解析配置文件，把bean包装成BeanDefinition对象</td></tr><tr><td>注册</td><td>把已经初始化的BeanDefinition对象放到IOC容器之中</td></tr></tbody></table><p><strong>Spring</strong> 中的队形，默认是单例的 ，scope single</p><p><strong>Spring</strong> 中的对象 <code>init-lazy</code> 默认是 false，<code>init-lazy = true</code> 的话，就会在调用你这个类的时候采取调用 <code>getBean()</code></p><h3 id="依赖注入" tabindex="-1">依赖注入 <a class="header-anchor" href="#依赖注入" aria-label="Permalink to &quot;依赖注入&quot;">​</a></h3><h5 id="abstractbeanfactory" tabindex="-1"><strong><code>AbstractBeanFactory</code></strong> <a class="header-anchor" href="#abstractbeanfactory" aria-label="Permalink to &quot;**\`AbstractBeanFactory\`**&quot;">​</a></h5><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//获取IOC容器中指定名称的Bean</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">getBean</span><span style="color:#E1E4E8;">(String name) throws BeansException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//doGetBean才是真正向IoC容器获取被管理Bean的过程</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doGetBean</span><span style="color:#E1E4E8;">(name, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//创建一个指定Bean实例对象，如果有父级继承，则合并子类和父类的定义</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createBean</span><span style="color:#E1E4E8;">(beanName, mbd, args);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//获取IOC容器中指定名称的Bean</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">getBean</span><span style="color:#24292E;">(String name) throws BeansException {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//doGetBean才是真正向IoC容器获取被管理Bean的过程</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doGetBean</span><span style="color:#24292E;">(name, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//创建一个指定Bean实例对象，如果有父级继承，则合并子类和父类的定义</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createBean</span><span style="color:#24292E;">(beanName, mbd, args);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><code>createBean</code> 根据 BeanDefinition 中存储的信息，去创建原始的 Bean。</p><p><code>AbstractAutowireCapableBeanFactory.doCreateBean()</code> 真正创建 Bean 的方法。</p><h5 id="abstractautowirecapablebeanfactory" tabindex="-1"><code>AbstractAutowireCapableBeanFactory</code> <a class="header-anchor" href="#abstractautowirecapablebeanfactory" aria-label="Permalink to &quot;\`AbstractAutowireCapableBeanFactory\`&quot;">​</a></h5><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//使用默认的无参构造方法实例化Bean对象</span></span>
<span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> BeanWrapper </span><span style="color:#B392F0;">instantiateBean</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String beanName, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> RootBeanDefinition mbd) {</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//使用默认的无参构造方法实例化Bean对象</span></span>
<span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> BeanWrapper </span><span style="color:#6F42C1;">instantiateBean</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String beanName, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> RootBeanDefinition mbd) {</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="beandefinition-相当于保存在内存中的配置文件-保存了所有的跟类属性有关的信息。依赖注入就是把这个信息读出来-利用反射机制-或者代理机制创建对象-新创建的对象-不会放入到我们印象中的-ioc-容器中-它存入到另外一个-cache-容器中。" tabindex="-1"><code>BeanDefinition</code> 相当于保存在内存中的配置文件，保存了所有的跟类属性有关的信息。依赖注入就是把这个信息读出来，利用反射机制，或者代理机制创建对象，新创建的对象，不会放入到我们印象中的 IOC 容器中，它存入到另外一个 cache 容器中。 <a class="header-anchor" href="#beandefinition-相当于保存在内存中的配置文件-保存了所有的跟类属性有关的信息。依赖注入就是把这个信息读出来-利用反射机制-或者代理机制创建对象-新创建的对象-不会放入到我们印象中的-ioc-容器中-它存入到另外一个-cache-容器中。" aria-label="Permalink to &quot;\`BeanDefinition\` 相当于保存在内存中的配置文件，保存了所有的跟类属性有关的信息。依赖注入就是把这个信息读出来，利用反射机制，或者代理机制创建对象，新创建的对象，不会放入到我们印象中的 IOC 容器中，它存入到另外一个 cache 容器中。&quot;">​</a></h4><p>一个 Bean 就对应一个 BeanDefinition</p><p>Wrapper 是对原生对象的包装，通过构造方法存储原始对象，放入 cache 的知识 wrapper 。</p><p>减少代码侵入，能够在原声的基础之上，再进行扩展，监听器，回调函数，标记信息。</p><p>Spring 中的 Bean 什么时候销毁的，你一开始是什么的，它不会去改变。</p><p><img src="`+e+`" alt="20180415-Spring核心IOC容器及依赖注入原理"></p><h5 id="ioc-加载过程" tabindex="-1">IOC 加载过程 <a class="header-anchor" href="#ioc-加载过程" aria-label="Permalink to &quot;IOC 加载过程&quot;">​</a></h5><h5 id="abstractbeanfactory-dogetbean" tabindex="-1"><code>AbstractBeanFactory.doGetBean()</code> <a class="header-anchor" href="#abstractbeanfactory-dogetbean" aria-label="Permalink to &quot;\`AbstractBeanFactory.doGetBean()\`&quot;">​</a></h5><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//真正实现向IOC容器获取Bean的功能，也是触发依赖注入功能的地方</span></span>
<span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> T </span><span style="color:#B392F0;">doGetBean</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String name, @</span><span style="color:#F97583;">Nullable</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Class</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> requiredType,</span></span>
<span class="line"><span style="color:#E1E4E8;">      @</span><span style="color:#F97583;">Nullable</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">[] args, </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> typeCheckOnly) throws BeansException {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//根据指定的名称获取被管理Bean的名称，剥离指定名称中对容器的相关依赖</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//如果指定的是别名，将别名转换为规范的Bean名称</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String beanName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">transformedBeanName</span><span style="color:#E1E4E8;">(name);</span></span>
<span class="line"><span style="color:#E1E4E8;">   Object bean;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// Eagerly check singleton cache for manually registered singletons.</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//先从缓存中取是否已经有被创建过的单态类型的Bean</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//对于单例模式的Bean整个IOC容器中只创建一次，不需要重复创建</span></span>
<span class="line"><span style="color:#E1E4E8;">   Object sharedInstance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getSingleton</span><span style="color:#E1E4E8;">(beanName);</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//IOC容器创建单例模式Bean实例对象</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (sharedInstance </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> args </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (logger.</span><span style="color:#B392F0;">isDebugEnabled</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">//如果指定名称的Bean在容器中已有单例模式的Bean被创建</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">//直接返回已经创建的Bean</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isSingletonCurrentlyInCreation</span><span style="color:#E1E4E8;">(beanName)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            logger.</span><span style="color:#B392F0;">debug</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Returning eagerly cached instance of singleton bean &#39;&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> beanName </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#9ECBFF;">&quot;&#39; that is not fully initialized yet - a consequence of a circular reference&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">         }</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            logger.</span><span style="color:#B392F0;">debug</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Returning cached instance of singleton bean &#39;&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> beanName </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&#39;&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">         }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//获取给定Bean的实例对象，主要是完成FactoryBean的相关处理</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//注意：BeanFactory是管理容器中Bean的工厂，而FactoryBean是</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//创建创建对象的工厂Bean，两者之间有区别</span></span>
<span class="line"><span style="color:#E1E4E8;">      bean </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getObjectForBeanInstance</span><span style="color:#E1E4E8;">(sharedInstance, name, beanName, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// Fail if we&#39;re already creating this bean instance:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// We&#39;re assumably within a circular reference.</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//缓存没有正在创建的单例模式Bean</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//缓存中已经有已经创建的原型模式Bean</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//但是由于循环引用的问题导致实例化对象失败</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isPrototypeCurrentlyInCreation</span><span style="color:#E1E4E8;">(beanName)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BeanCurrentlyInCreationException</span><span style="color:#E1E4E8;">(beanName);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// Check if bean definition exists in this factory.</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//对IOC容器中是否存在指定名称的BeanDefinition进行检查，首先检查是否</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//能在当前的BeanFactory中获取的所需要的Bean，如果不能则委托当前容器</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//的父级容器去查找，如果还是找不到则沿着容器的继承体系向父级容器查找</span></span>
<span class="line"><span style="color:#E1E4E8;">      BeanFactory parentBeanFactory </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getParentBeanFactory</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//当前容器的父级容器存在，且当前容器中不存在指定名称的Bean</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (parentBeanFactory </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#B392F0;">containsBeanDefinition</span><span style="color:#E1E4E8;">(beanName)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">// Not found -&gt; check parent.</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">//解析指定Bean名称的原始名称</span></span>
<span class="line"><span style="color:#E1E4E8;">         String nameToLookup </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">originalBeanName</span><span style="color:#E1E4E8;">(name);</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (parentBeanFactory </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> AbstractBeanFactory) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ((AbstractBeanFactory) parentBeanFactory).</span><span style="color:#B392F0;">doGetBean</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                  nameToLookup, requiredType, args, typeCheckOnly);</span></span>
<span class="line"><span style="color:#E1E4E8;">         }</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (args </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// Delegation to parent with explicit args.</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//委派父级容器根据指定名称和显式的参数查找</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (T) parentBeanFactory.</span><span style="color:#B392F0;">getBean</span><span style="color:#E1E4E8;">(nameToLookup, args);</span></span>
<span class="line"><span style="color:#E1E4E8;">         }</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// No args -&gt; delegate to standard getBean method.</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//委派父级容器根据指定名称和类型查找</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> parentBeanFactory.</span><span style="color:#B392F0;">getBean</span><span style="color:#E1E4E8;">(nameToLookup, requiredType);</span></span>
<span class="line"><span style="color:#E1E4E8;">         }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//创建的Bean是否需要进行类型验证，一般不需要</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">typeCheckOnly) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">//向容器标记指定的Bean已经被创建</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#B392F0;">markBeanAsCreated</span><span style="color:#E1E4E8;">(beanName);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">//根据指定Bean名称获取其父级的Bean定义</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">//主要解决Bean继承时子类合并父类公共属性问题</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> RootBeanDefinition mbd </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getMergedLocalBeanDefinition</span><span style="color:#E1E4E8;">(beanName);</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#B392F0;">checkMergedBeanDefinition</span><span style="color:#E1E4E8;">(mbd, beanName, args);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">// Guarantee initialization of beans that the current bean depends on.</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">//获取当前Bean所有依赖Bean的名称</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] dependsOn </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> mbd.</span><span style="color:#B392F0;">getDependsOn</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">//如果当前Bean有依赖Bean</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (dependsOn </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (String dep </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> dependsOn) {</span></span>
<span class="line"><span style="color:#E1E4E8;">               </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isDependent</span><span style="color:#E1E4E8;">(beanName, dep)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BeanCreationException</span><span style="color:#E1E4E8;">(mbd.</span><span style="color:#B392F0;">getResourceDescription</span><span style="color:#E1E4E8;">(), beanName,</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#9ECBFF;">&quot;Circular depends-on relationship between &#39;&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> beanName </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&#39; and &#39;&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> dep </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&#39;&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">               }</span></span>
<span class="line"><span style="color:#E1E4E8;">               </span><span style="color:#6A737D;">//递归调用getBean方法，获取当前Bean的依赖Bean</span></span>
<span class="line"><span style="color:#E1E4E8;">               </span><span style="color:#B392F0;">registerDependentBean</span><span style="color:#E1E4E8;">(dep, beanName);</span></span>
<span class="line"><span style="color:#E1E4E8;">               </span><span style="color:#6A737D;">//把被依赖Bean注册给当前依赖的Bean</span></span>
<span class="line"><span style="color:#E1E4E8;">               </span><span style="color:#B392F0;">getBean</span><span style="color:#E1E4E8;">(dep);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">         }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">// Create bean instance.</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">//创建单例模式Bean的实例对象</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (mbd.</span><span style="color:#B392F0;">isSingleton</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//这里使用了一个匿名内部类，创建Bean实例对象，并且注册给所依赖的对象</span></span>
<span class="line"><span style="color:#E1E4E8;">            sharedInstance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getSingleton</span><span style="color:#E1E4E8;">(beanName, () </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">               </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#6A737D;">//创建一个指定Bean实例对象，如果有父级继承，则合并子类和父类的定义</span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createBean</span><span style="color:#E1E4E8;">(beanName, mbd, args);</span></span>
<span class="line"><span style="color:#E1E4E8;">               }</span></span>
<span class="line"><span style="color:#E1E4E8;">               </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (BeansException </span><span style="color:#FFAB70;">ex</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#6A737D;">// Explicitly remove instance from singleton cache: It might have been put there</span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#6A737D;">// eagerly by the creation process, to allow for circular reference resolution.</span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#6A737D;">// Also remove any beans that received a temporary reference to the bean.</span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#6A737D;">//显式地从容器单例模式Bean缓存中清除实例对象</span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#B392F0;">destroySingleton</span><span style="color:#E1E4E8;">(beanName);</span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> ex;</span></span>
<span class="line"><span style="color:#E1E4E8;">               }</span></span>
<span class="line"><span style="color:#E1E4E8;">            });</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//获取给定Bean的实例对象</span></span>
<span class="line"><span style="color:#E1E4E8;">            bean </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getObjectForBeanInstance</span><span style="color:#E1E4E8;">(sharedInstance, name, beanName, mbd);</span></span>
<span class="line"><span style="color:#E1E4E8;">         }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">//IOC容器创建原型模式Bean实例对象</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (mbd.</span><span style="color:#B392F0;">isPrototype</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// It&#39;s a prototype -&gt; create a new instance.</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//原型模式(Prototype)是每次都会创建一个新的对象</span></span>
<span class="line"><span style="color:#E1E4E8;">            Object prototypeInstance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">               </span><span style="color:#6A737D;">//回调beforePrototypeCreation方法，默认的功能是注册当前创建的原型对象</span></span>
<span class="line"><span style="color:#E1E4E8;">               </span><span style="color:#B392F0;">beforePrototypeCreation</span><span style="color:#E1E4E8;">(beanName);</span></span>
<span class="line"><span style="color:#E1E4E8;">               </span><span style="color:#6A737D;">//创建指定Bean对象实例</span></span>
<span class="line"><span style="color:#E1E4E8;">               prototypeInstance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createBean</span><span style="color:#E1E4E8;">(beanName, mbd, args);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">               </span><span style="color:#6A737D;">//回调afterPrototypeCreation方法，默认的功能告诉IOC容器指定Bean的原型对象不再创建</span></span>
<span class="line"><span style="color:#E1E4E8;">               </span><span style="color:#B392F0;">afterPrototypeCreation</span><span style="color:#E1E4E8;">(beanName);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//获取给定Bean的实例对象</span></span>
<span class="line"><span style="color:#E1E4E8;">            bean </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getObjectForBeanInstance</span><span style="color:#E1E4E8;">(prototypeInstance, name, beanName, mbd);</span></span>
<span class="line"><span style="color:#E1E4E8;">         }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">//要创建的Bean既不是单例模式，也不是原型模式，则根据Bean定义资源中</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">//配置的生命周期范围，选择实例化Bean的合适方法，这种在Web应用程序中</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">//比较常用，如：request、session、application等生命周期</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            String scopeName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> mbd.</span><span style="color:#B392F0;">getScope</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Scope scope </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.scopes.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(scopeName);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//Bean定义资源中没有配置生命周期范围，则Bean定义不合法</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (scope </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">               </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IllegalStateException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;No Scope registered for scope name &#39;&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> scopeName </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&#39;&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">               </span><span style="color:#6A737D;">//这里又使用了一个匿名内部类，获取一个指定生命周期范围的实例</span></span>
<span class="line"><span style="color:#E1E4E8;">               Object scopedInstance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> scope.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(beanName, () </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#B392F0;">beforePrototypeCreation</span><span style="color:#E1E4E8;">(beanName);</span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                     </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createBean</span><span style="color:#E1E4E8;">(beanName, mbd, args);</span></span>
<span class="line"><span style="color:#E1E4E8;">                  }</span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                     </span><span style="color:#B392F0;">afterPrototypeCreation</span><span style="color:#E1E4E8;">(beanName);</span></span>
<span class="line"><span style="color:#E1E4E8;">                  }</span></span>
<span class="line"><span style="color:#E1E4E8;">               });</span></span>
<span class="line"><span style="color:#E1E4E8;">               </span><span style="color:#6A737D;">//获取给定Bean的实例对象</span></span>
<span class="line"><span style="color:#E1E4E8;">               bean </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getObjectForBeanInstance</span><span style="color:#E1E4E8;">(scopedInstance, name, beanName, mbd);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (IllegalStateException </span><span style="color:#FFAB70;">ex</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">               </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BeanCreationException</span><span style="color:#E1E4E8;">(beanName,</span></span>
<span class="line"><span style="color:#E1E4E8;">                     </span><span style="color:#9ECBFF;">&quot;Scope &#39;&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> scopeName </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&#39; is not active for the current thread; consider &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">                     </span><span style="color:#9ECBFF;">&quot;defining a scoped proxy for this bean if you intend to refer to it from a singleton&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                     ex);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">         }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (BeansException </span><span style="color:#FFAB70;">ex</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#B392F0;">cleanupAfterBeanCreationFailure</span><span style="color:#E1E4E8;">(beanName);</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> ex;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// Check if required type matches the type of the actual bean instance.</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//对创建的Bean实例对象进行类型检查</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (requiredType </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">requiredType.</span><span style="color:#B392F0;">isInstance</span><span style="color:#E1E4E8;">(bean)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">         T convertedBean </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getTypeConverter</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">convertIfNecessary</span><span style="color:#E1E4E8;">(bean, requiredType);</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (convertedBean </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BeanNotOfRequiredTypeException</span><span style="color:#E1E4E8;">(name, requiredType, bean.</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">         }</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> convertedBean;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (TypeMismatchException </span><span style="color:#FFAB70;">ex</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (logger.</span><span style="color:#B392F0;">isDebugEnabled</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            logger.</span><span style="color:#B392F0;">debug</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Failed to convert bean &#39;&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> name </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&#39; to required type &#39;&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">                  ClassUtils.</span><span style="color:#B392F0;">getQualifiedName</span><span style="color:#E1E4E8;">(requiredType) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&#39;&quot;</span><span style="color:#E1E4E8;">, ex);</span></span>
<span class="line"><span style="color:#E1E4E8;">         }</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BeanNotOfRequiredTypeException</span><span style="color:#E1E4E8;">(name, requiredType, bean.</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (T) bean;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//真正实现向IOC容器获取Bean的功能，也是触发依赖注入功能的地方</span></span>
<span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> T </span><span style="color:#6F42C1;">doGetBean</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String name, @</span><span style="color:#D73A49;">Nullable</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Class</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> requiredType,</span></span>
<span class="line"><span style="color:#24292E;">      @</span><span style="color:#D73A49;">Nullable</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[] args, </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> typeCheckOnly) throws BeansException {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//根据指定的名称获取被管理Bean的名称，剥离指定名称中对容器的相关依赖</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//如果指定的是别名，将别名转换为规范的Bean名称</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String beanName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">transformedBeanName</span><span style="color:#24292E;">(name);</span></span>
<span class="line"><span style="color:#24292E;">   Object bean;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// Eagerly check singleton cache for manually registered singletons.</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//先从缓存中取是否已经有被创建过的单态类型的Bean</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//对于单例模式的Bean整个IOC容器中只创建一次，不需要重复创建</span></span>
<span class="line"><span style="color:#24292E;">   Object sharedInstance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getSingleton</span><span style="color:#24292E;">(beanName);</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//IOC容器创建单例模式Bean实例对象</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (sharedInstance </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> args </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (logger.</span><span style="color:#6F42C1;">isDebugEnabled</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">//如果指定名称的Bean在容器中已有单例模式的Bean被创建</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">//直接返回已经创建的Bean</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isSingletonCurrentlyInCreation</span><span style="color:#24292E;">(beanName)) {</span></span>
<span class="line"><span style="color:#24292E;">            logger.</span><span style="color:#6F42C1;">debug</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Returning eagerly cached instance of singleton bean &#39;&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> beanName </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#032F62;">&quot;&#39; that is not fully initialized yet - a consequence of a circular reference&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">         }</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            logger.</span><span style="color:#6F42C1;">debug</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Returning cached instance of singleton bean &#39;&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> beanName </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&#39;&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">         }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//获取给定Bean的实例对象，主要是完成FactoryBean的相关处理</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//注意：BeanFactory是管理容器中Bean的工厂，而FactoryBean是</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//创建创建对象的工厂Bean，两者之间有区别</span></span>
<span class="line"><span style="color:#24292E;">      bean </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getObjectForBeanInstance</span><span style="color:#24292E;">(sharedInstance, name, beanName, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// Fail if we&#39;re already creating this bean instance:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// We&#39;re assumably within a circular reference.</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//缓存没有正在创建的单例模式Bean</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//缓存中已经有已经创建的原型模式Bean</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//但是由于循环引用的问题导致实例化对象失败</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isPrototypeCurrentlyInCreation</span><span style="color:#24292E;">(beanName)) {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BeanCurrentlyInCreationException</span><span style="color:#24292E;">(beanName);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// Check if bean definition exists in this factory.</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//对IOC容器中是否存在指定名称的BeanDefinition进行检查，首先检查是否</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//能在当前的BeanFactory中获取的所需要的Bean，如果不能则委托当前容器</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//的父级容器去查找，如果还是找不到则沿着容器的继承体系向父级容器查找</span></span>
<span class="line"><span style="color:#24292E;">      BeanFactory parentBeanFactory </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getParentBeanFactory</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//当前容器的父级容器存在，且当前容器中不存在指定名称的Bean</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (parentBeanFactory </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">containsBeanDefinition</span><span style="color:#24292E;">(beanName)) {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">// Not found -&gt; check parent.</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">//解析指定Bean名称的原始名称</span></span>
<span class="line"><span style="color:#24292E;">         String nameToLookup </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">originalBeanName</span><span style="color:#24292E;">(name);</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (parentBeanFactory </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> AbstractBeanFactory) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ((AbstractBeanFactory) parentBeanFactory).</span><span style="color:#6F42C1;">doGetBean</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                  nameToLookup, requiredType, args, typeCheckOnly);</span></span>
<span class="line"><span style="color:#24292E;">         }</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (args </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// Delegation to parent with explicit args.</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//委派父级容器根据指定名称和显式的参数查找</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (T) parentBeanFactory.</span><span style="color:#6F42C1;">getBean</span><span style="color:#24292E;">(nameToLookup, args);</span></span>
<span class="line"><span style="color:#24292E;">         }</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// No args -&gt; delegate to standard getBean method.</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//委派父级容器根据指定名称和类型查找</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> parentBeanFactory.</span><span style="color:#6F42C1;">getBean</span><span style="color:#24292E;">(nameToLookup, requiredType);</span></span>
<span class="line"><span style="color:#24292E;">         }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//创建的Bean是否需要进行类型验证，一般不需要</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">typeCheckOnly) {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">//向容器标记指定的Bean已经被创建</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6F42C1;">markBeanAsCreated</span><span style="color:#24292E;">(beanName);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">//根据指定Bean名称获取其父级的Bean定义</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">//主要解决Bean继承时子类合并父类公共属性问题</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> RootBeanDefinition mbd </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getMergedLocalBeanDefinition</span><span style="color:#24292E;">(beanName);</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6F42C1;">checkMergedBeanDefinition</span><span style="color:#24292E;">(mbd, beanName, args);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">// Guarantee initialization of beans that the current bean depends on.</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">//获取当前Bean所有依赖Bean的名称</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] dependsOn </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mbd.</span><span style="color:#6F42C1;">getDependsOn</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">//如果当前Bean有依赖Bean</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (dependsOn </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (String dep </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> dependsOn) {</span></span>
<span class="line"><span style="color:#24292E;">               </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isDependent</span><span style="color:#24292E;">(beanName, dep)) {</span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BeanCreationException</span><span style="color:#24292E;">(mbd.</span><span style="color:#6F42C1;">getResourceDescription</span><span style="color:#24292E;">(), beanName,</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#032F62;">&quot;Circular depends-on relationship between &#39;&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> beanName </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&#39; and &#39;&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> dep </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&#39;&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">               }</span></span>
<span class="line"><span style="color:#24292E;">               </span><span style="color:#6A737D;">//递归调用getBean方法，获取当前Bean的依赖Bean</span></span>
<span class="line"><span style="color:#24292E;">               </span><span style="color:#6F42C1;">registerDependentBean</span><span style="color:#24292E;">(dep, beanName);</span></span>
<span class="line"><span style="color:#24292E;">               </span><span style="color:#6A737D;">//把被依赖Bean注册给当前依赖的Bean</span></span>
<span class="line"><span style="color:#24292E;">               </span><span style="color:#6F42C1;">getBean</span><span style="color:#24292E;">(dep);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">         }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">// Create bean instance.</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">//创建单例模式Bean的实例对象</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (mbd.</span><span style="color:#6F42C1;">isSingleton</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//这里使用了一个匿名内部类，创建Bean实例对象，并且注册给所依赖的对象</span></span>
<span class="line"><span style="color:#24292E;">            sharedInstance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getSingleton</span><span style="color:#24292E;">(beanName, () </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">               </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#6A737D;">//创建一个指定Bean实例对象，如果有父级继承，则合并子类和父类的定义</span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createBean</span><span style="color:#24292E;">(beanName, mbd, args);</span></span>
<span class="line"><span style="color:#24292E;">               }</span></span>
<span class="line"><span style="color:#24292E;">               </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (BeansException </span><span style="color:#E36209;">ex</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#6A737D;">// Explicitly remove instance from singleton cache: It might have been put there</span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#6A737D;">// eagerly by the creation process, to allow for circular reference resolution.</span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#6A737D;">// Also remove any beans that received a temporary reference to the bean.</span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#6A737D;">//显式地从容器单例模式Bean缓存中清除实例对象</span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#6F42C1;">destroySingleton</span><span style="color:#24292E;">(beanName);</span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> ex;</span></span>
<span class="line"><span style="color:#24292E;">               }</span></span>
<span class="line"><span style="color:#24292E;">            });</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//获取给定Bean的实例对象</span></span>
<span class="line"><span style="color:#24292E;">            bean </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getObjectForBeanInstance</span><span style="color:#24292E;">(sharedInstance, name, beanName, mbd);</span></span>
<span class="line"><span style="color:#24292E;">         }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">//IOC容器创建原型模式Bean实例对象</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (mbd.</span><span style="color:#6F42C1;">isPrototype</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// It&#39;s a prototype -&gt; create a new instance.</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//原型模式(Prototype)是每次都会创建一个新的对象</span></span>
<span class="line"><span style="color:#24292E;">            Object prototypeInstance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">               </span><span style="color:#6A737D;">//回调beforePrototypeCreation方法，默认的功能是注册当前创建的原型对象</span></span>
<span class="line"><span style="color:#24292E;">               </span><span style="color:#6F42C1;">beforePrototypeCreation</span><span style="color:#24292E;">(beanName);</span></span>
<span class="line"><span style="color:#24292E;">               </span><span style="color:#6A737D;">//创建指定Bean对象实例</span></span>
<span class="line"><span style="color:#24292E;">               prototypeInstance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createBean</span><span style="color:#24292E;">(beanName, mbd, args);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">               </span><span style="color:#6A737D;">//回调afterPrototypeCreation方法，默认的功能告诉IOC容器指定Bean的原型对象不再创建</span></span>
<span class="line"><span style="color:#24292E;">               </span><span style="color:#6F42C1;">afterPrototypeCreation</span><span style="color:#24292E;">(beanName);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//获取给定Bean的实例对象</span></span>
<span class="line"><span style="color:#24292E;">            bean </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getObjectForBeanInstance</span><span style="color:#24292E;">(prototypeInstance, name, beanName, mbd);</span></span>
<span class="line"><span style="color:#24292E;">         }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">//要创建的Bean既不是单例模式，也不是原型模式，则根据Bean定义资源中</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">//配置的生命周期范围，选择实例化Bean的合适方法，这种在Web应用程序中</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">//比较常用，如：request、session、application等生命周期</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            String scopeName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mbd.</span><span style="color:#6F42C1;">getScope</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Scope scope </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.scopes.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(scopeName);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//Bean定义资源中没有配置生命周期范围，则Bean定义不合法</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (scope </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">               </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IllegalStateException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;No Scope registered for scope name &#39;&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> scopeName </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&#39;&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">               </span><span style="color:#6A737D;">//这里又使用了一个匿名内部类，获取一个指定生命周期范围的实例</span></span>
<span class="line"><span style="color:#24292E;">               Object scopedInstance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> scope.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(beanName, () </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#6F42C1;">beforePrototypeCreation</span><span style="color:#24292E;">(beanName);</span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                     </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createBean</span><span style="color:#24292E;">(beanName, mbd, args);</span></span>
<span class="line"><span style="color:#24292E;">                  }</span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                     </span><span style="color:#6F42C1;">afterPrototypeCreation</span><span style="color:#24292E;">(beanName);</span></span>
<span class="line"><span style="color:#24292E;">                  }</span></span>
<span class="line"><span style="color:#24292E;">               });</span></span>
<span class="line"><span style="color:#24292E;">               </span><span style="color:#6A737D;">//获取给定Bean的实例对象</span></span>
<span class="line"><span style="color:#24292E;">               bean </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getObjectForBeanInstance</span><span style="color:#24292E;">(scopedInstance, name, beanName, mbd);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (IllegalStateException </span><span style="color:#E36209;">ex</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">               </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BeanCreationException</span><span style="color:#24292E;">(beanName,</span></span>
<span class="line"><span style="color:#24292E;">                     </span><span style="color:#032F62;">&quot;Scope &#39;&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> scopeName </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&#39; is not active for the current thread; consider &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                     </span><span style="color:#032F62;">&quot;defining a scoped proxy for this bean if you intend to refer to it from a singleton&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                     ex);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">         }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (BeansException </span><span style="color:#E36209;">ex</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6F42C1;">cleanupAfterBeanCreationFailure</span><span style="color:#24292E;">(beanName);</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> ex;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// Check if required type matches the type of the actual bean instance.</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//对创建的Bean实例对象进行类型检查</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (requiredType </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">requiredType.</span><span style="color:#6F42C1;">isInstance</span><span style="color:#24292E;">(bean)) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">         T convertedBean </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getTypeConverter</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">convertIfNecessary</span><span style="color:#24292E;">(bean, requiredType);</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (convertedBean </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BeanNotOfRequiredTypeException</span><span style="color:#24292E;">(name, requiredType, bean.</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">         }</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> convertedBean;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (TypeMismatchException </span><span style="color:#E36209;">ex</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (logger.</span><span style="color:#6F42C1;">isDebugEnabled</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            logger.</span><span style="color:#6F42C1;">debug</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Failed to convert bean &#39;&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> name </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&#39; to required type &#39;&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                  ClassUtils.</span><span style="color:#6F42C1;">getQualifiedName</span><span style="color:#24292E;">(requiredType) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&#39;&quot;</span><span style="color:#24292E;">, ex);</span></span>
<span class="line"><span style="color:#24292E;">         }</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BeanNotOfRequiredTypeException</span><span style="color:#24292E;">(name, requiredType, bean.</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (T) bean;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br><span class="line-number">139</span><br><span class="line-number">140</span><br><span class="line-number">141</span><br><span class="line-number">142</span><br><span class="line-number">143</span><br><span class="line-number">144</span><br><span class="line-number">145</span><br><span class="line-number">146</span><br><span class="line-number">147</span><br><span class="line-number">148</span><br><span class="line-number">149</span><br><span class="line-number">150</span><br><span class="line-number">151</span><br><span class="line-number">152</span><br><span class="line-number">153</span><br><span class="line-number">154</span><br><span class="line-number">155</span><br><span class="line-number">156</span><br><span class="line-number">157</span><br><span class="line-number">158</span><br><span class="line-number">159</span><br><span class="line-number">160</span><br><span class="line-number">161</span><br><span class="line-number">162</span><br><span class="line-number">163</span><br><span class="line-number">164</span><br><span class="line-number">165</span><br><span class="line-number">166</span><br><span class="line-number">167</span><br><span class="line-number">168</span><br><span class="line-number">169</span><br><span class="line-number">170</span><br><span class="line-number">171</span><br><span class="line-number">172</span><br><span class="line-number">173</span><br><span class="line-number">174</span><br><span class="line-number">175</span><br><span class="line-number">176</span><br><span class="line-number">177</span><br><span class="line-number">178</span><br><span class="line-number">179</span><br><span class="line-number">180</span><br><span class="line-number">181</span><br><span class="line-number">182</span><br><span class="line-number">183</span><br><span class="line-number">184</span><br><span class="line-number">185</span><br><span class="line-number">186</span><br><span class="line-number">187</span><br><span class="line-number">188</span><br><span class="line-number">189</span><br><span class="line-number">190</span><br><span class="line-number">191</span><br><span class="line-number">192</span><br><span class="line-number">193</span><br><span class="line-number">194</span><br><span class="line-number">195</span><br><span class="line-number">196</span><br></div></div>`,29),c=[r];function t(E,y,i,b,u,m){return n(),a("div",null,c)}const B=s(o,[["render",t]]);export{F as __pageData,B as default};
