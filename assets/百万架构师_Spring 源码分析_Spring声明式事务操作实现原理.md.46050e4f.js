import{_ as s,o as a,h as n,Q as e}from"./chunks/framework.da611722.js";const o="/assets/事务操作流程.89374082.png",l="/assets/Connection.853c3853.png",p="/assets/Connection不同的实现.5d4a41fe.png",t="/assets/connection-DataSource.833fab7d.png",C=JSON.parse('{"title":"Spring声明式事务操作实现原理 | JavaGuide","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://JavaGuide.net/百万架构师/Spring 源码分析/Spring声明式事务操作实现原理.html"}],["meta",{"name":"keywords","content":"Spring声明式事务操作实现原理 , JavaGuide , JavaGuide官网, Java面试指南, Java基础, 多线程, JVM, 虚拟机, 数据库, MySQL, Spring, Redis, MyBatis, 系统设计, 分布式, RPC, 高可用, 高并发"}],["meta",{"name":"og:url","content":"https://JavaGuide.net"}],["meta",{"name":"og:type","content":"website"}],["meta",{"name":"og:image","content":"https://JavaGuide.net/og.png"}],["meta",{"name":"og:title","content":"Spring声明式事务操作实现原理 | JavaGuide | Java面试指南 | JavaGuide官网"}],["meta",{"name":"og:description","content":"Spring声明式事务操作实现原理 | JavaGuide | Java面试指南 | JavaGuide官网 | 「JavaGuide.net」一份涵盖大部分 Java 程序员所需要掌握的核心知识。准备 Java 面试，首选 JavaGuide.net ！"}],["meta",{"name":"twitter:site","content":"https://JavaGuide.net"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:creator","content":"nogeek.cn"}],["meta",{"name":"twitter:title","content":"Spring声明式事务操作实现原理 | JavaGuide | Java面试指南 | JavaGuide官网"}],["meta",{"name":"twitter:description","content":"Spring声明式事务操作实现原理 | JavaGuide | Java面试指南 | JavaGuide官网 | 「JavaGuide.net」一份涵盖大部分 Java 程序员所需要掌握的核心知识。准备 Java 面试，首选 JavaGuide.net ！"}],["meta",{"name":"twitter:image","content":"https://JavaGuide.net/og.png"}],["meta",{"name":"sogou_site_verification","content":"fcAkazTXFd"}],["meta",{"name":"baidu-site-verification","content":"codeva-MXEPYsXKGk"}],["meta",{"name":"msvalidate.01","content":"9F2D57CFC59E8031212A166878638B15"}]]},"headers":[],"relativePath":"百万架构师/Spring 源码分析/Spring声明式事务操作实现原理.md","filePath":"百万架构师/Spring 源码分析/Spring声明式事务操作实现原理.md","lastUpdated":1741277271000}'),c={name:"百万架构师/Spring 源码分析/Spring声明式事务操作实现原理.md"},r=e(`<h2 id="上" tabindex="-1">上 <a class="header-anchor" href="#上" aria-label="Permalink to &quot;上&quot;">​</a></h2><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">bean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;transactionManager&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">		&lt;</span><span style="color:#85E89D;">property</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;dataSource&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ref</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;dataSource&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	&lt;/</span><span style="color:#85E89D;">bean</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">bean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;transactionManager&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">		&lt;</span><span style="color:#22863A;">property</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;dataSource&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ref</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;dataSource&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">	&lt;/</span><span style="color:#22863A;">bean</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><code>transactionManager</code> 就是我们的一个切面</li><li><code>dataSource</code> 其实就是我们 <code>Connection</code> 的一个包装，就是所有的 <code>Connection</code> 相关的东西。</li><li><code>javax.sql.DataSource</code> 其实定义了，提供给我们的 <strong>JDBC</strong> 框架去扩展的包装类。</li></ul><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DataSource</span><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CommonDataSource</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">Wrapper</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  Connection </span><span style="color:#B392F0;">getConnection</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> SQLException;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  Connection </span><span style="color:#B392F0;">getConnection</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">username</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">password</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> SQLException;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DataSource</span><span style="color:#24292E;">  </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CommonDataSource</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Wrapper</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  Connection </span><span style="color:#6F42C1;">getConnection</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> SQLException;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  Connection </span><span style="color:#6F42C1;">getConnection</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">username</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">password</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> SQLException;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h5 id="datasource-的一些配置" tabindex="-1">DataSource 的一些配置 <a class="header-anchor" href="#datasource-的一些配置" aria-label="Permalink to &quot;DataSource 的一些配置&quot;">​</a></h5><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Resource</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;dataSource&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setDataSource</span><span style="color:#E1E4E8;">(DataSource dataSource) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    template </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JdbcTemplate</span><span style="color:#E1E4E8;">(dataSource);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//		Statement statement;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//		statement.e</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 相当于开启事务,创建Socket连接</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 当我们execute的时候，就和服务端建立连接</span></span>
<span class="line"><span style="color:#E1E4E8;">    dataSource.</span><span style="color:#B392F0;">getConnection</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">createStatement</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    dataSource.</span><span style="color:#B392F0;">getConnection</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">createStatement</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//事务的回滚</span></span>
<span class="line"><span style="color:#E1E4E8;">    dataSource.</span><span style="color:#B392F0;">getConnection</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">rollback</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//默认的话是自动提交，所有的事务操作框架，都会把autoCommit改成fasle，否则的话无法手动干预</span></span>
<span class="line"><span style="color:#E1E4E8;">    dataSource.</span><span style="color:#B392F0;">getConnection</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">setAutoCommit</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//只读事务</span></span>
<span class="line"><span style="color:#E1E4E8;">    dataSource.</span><span style="color:#B392F0;">getConnection</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">setReadOnly</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//事务的提交</span></span>
<span class="line"><span style="color:#E1E4E8;">    dataSource.</span><span style="color:#B392F0;">getConnection</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">commit</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Resource</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;dataSource&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setDataSource</span><span style="color:#24292E;">(DataSource dataSource) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    template </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JdbcTemplate</span><span style="color:#24292E;">(dataSource);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//		Statement statement;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//		statement.e</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 相当于开启事务,创建Socket连接</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 当我们execute的时候，就和服务端建立连接</span></span>
<span class="line"><span style="color:#24292E;">    dataSource.</span><span style="color:#6F42C1;">getConnection</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">createStatement</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    dataSource.</span><span style="color:#6F42C1;">getConnection</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">createStatement</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//事务的回滚</span></span>
<span class="line"><span style="color:#24292E;">    dataSource.</span><span style="color:#6F42C1;">getConnection</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">rollback</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//默认的话是自动提交，所有的事务操作框架，都会把autoCommit改成fasle，否则的话无法手动干预</span></span>
<span class="line"><span style="color:#24292E;">    dataSource.</span><span style="color:#6F42C1;">getConnection</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">setAutoCommit</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//只读事务</span></span>
<span class="line"><span style="color:#24292E;">    dataSource.</span><span style="color:#6F42C1;">getConnection</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">setReadOnly</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//事务的提交</span></span>
<span class="line"><span style="color:#24292E;">    dataSource.</span><span style="color:#6F42C1;">getConnection</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">commit</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p><code>DruidDataSource</code></p><ul><li>implements <code>ManagedDataSource</code><ul><li>extends <code>DataSource</code></li></ul></li></ul><h4 id="_5-1-数据库的操作都会通过事务来管理" tabindex="-1">5.1 数据库的操作都会通过事务来管理 <a class="header-anchor" href="#_5-1-数据库的操作都会通过事务来管理" aria-label="Permalink to &quot;5.1 数据库的操作都会通过事务来管理&quot;">​</a></h4><p>ACID，最大的问题，解决的是数据的一致性的问题。（能量守恒）</p><ul><li>原子性：不可分割</li><li>一致性</li><li>隔离性</li><li>持久性</li></ul><p>分布式：分布式事务处理瞬时一致性，最终的一致性（异步核对，主流的方式就通过日志来分析）</p><h5 id="事务的操作流程" tabindex="-1">事务的操作流程 <a class="header-anchor" href="#事务的操作流程" aria-label="Permalink to &quot;事务的操作流程&quot;">​</a></h5><p><img src="`+o+'" alt="事务操作流程"></p><p>只要出现了异常，就不会提交。</p><h6 id="断电了来不及回滚" tabindex="-1"><s>断电了来不及回滚？</s> <a class="header-anchor" href="#断电了来不及回滚" aria-label="Permalink to &quot;~~断电了来不及回滚？~~&quot;">​</a></h6><p>事务是存在内存中的，断电了，这个事务就不存在了，事务就是回去了。</p><h5 id="事务只是一种思想" tabindex="-1">事务只是一种思想， <a class="header-anchor" href="#事务只是一种思想" aria-label="Permalink to &quot;事务只是一种思想，&quot;">​</a></h5><p>技术实现方案。</p><h6 id="connection" tabindex="-1">Connection <a class="header-anchor" href="#connection" aria-label="Permalink to &quot;Connection&quot;">​</a></h6><blockquote><p><strong>这个类是 Java 客户端和数据库服务通信的桥梁，也就是一个包装类</strong></p><p><strong>就是一个 TCP 连接，底层就是一个 Socket 连接</strong></p></blockquote><p><img src="'+l+'" alt="Connection"></p><p><strong>适配器模式</strong></p><p>java 中没有对这个 connect 进行实现。</p><p><code>com.mysql.jdbc.MysqlIO</code></p><p>中 <code>this.mysqlConnection = this.socketFactory.connect(this.host, this.port, props);</code></p><p><code>connectWithTimeoutMethod = Socket.class.getMethod(&quot;connect&quot;, socketAddressClass, Integer.TYPE);</code></p><p>客户端通过反射调用了一个 <strong><code>connect</code></strong> 方法，传了一个 IP，一个端口，进行一个封装</p><h5 id="他为什么不去实现" tabindex="-1">他为什么不去实现？ <a class="header-anchor" href="#他为什么不去实现" aria-label="Permalink to &quot;他为什么不去实现？&quot;">​</a></h5><p>​ 作为一个编程语言，定义一个接口，如果你想用我的语言去连接你的数据库，你必须实现我的接口。我给你一个 <strong>jar</strong> 包给你，然后不同的数据库引入不同的数据库驱动包，数据库启动包是由数据库厂商提供的。</p><p><img src="'+p+'" alt="Connection不同的实现"></p><h5 id="datasource-是-connection-的一个包装类。" tabindex="-1">DataSource 是 Connection 的一个包装类。 <a class="header-anchor" href="#datasource-是-connection-的一个包装类。" aria-label="Permalink to &quot;DataSource 是 Connection 的一个包装类。&quot;">​</a></h5><p><img src="'+t+'" alt="connection-DataSource"></p><h5 id="datasourcetransactionmanager" tabindex="-1">DataSourceTransactionManager <a class="header-anchor" href="#datasourcetransactionmanager" aria-label="Permalink to &quot;DataSourceTransactionManager&quot;">​</a></h5><p><code>DataSourceTransactionManager.doBegin()</code> 开启事务的方法。</p><p>它不管是 <strong><code>commit()</code></strong> 还是 <strong><code>rollback()</code></strong> 都是调用的 Connection 的方法。</p><h2 id="下" tabindex="-1">下 <a class="header-anchor" href="#下" aria-label="Permalink to &quot;下&quot;">​</a></h2><p><strong><code>org.springframework.transaction.interceptor.TransactionAspectSupport</code></strong></p><h4 id="事务的基本配置" tabindex="-1">事务的基本配置 <a class="header-anchor" href="#事务的基本配置" aria-label="Permalink to &quot;事务的基本配置&quot;">​</a></h4>',39),i=[r];function E(y,d,u,m,b,g){return a(),n("div",null,i)}const S=s(c,[["render",E]]);export{C as __pageData,S as default};
