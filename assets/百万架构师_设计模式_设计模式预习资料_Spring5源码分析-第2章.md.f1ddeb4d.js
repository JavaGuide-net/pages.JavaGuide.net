import{_ as e,o as a,h as i,Q as o}from"./chunks/framework.da611722.js";const m=JSON.parse('{"title":"Spring5源码分析-第2章 | JavaGuide","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://JavaGuide.net/百万架构师/设计模式/设计模式预习资料/Spring5源码分析-第2章.html"}],["meta",{"name":"keywords","content":"Spring5源码分析-第2章 , JavaGuide , JavaGuide官网, Java面试指南, Java基础, 多线程, JVM, 虚拟机, 数据库, MySQL, Spring, Redis, MyBatis, 系统设计, 分布式, RPC, 高可用, 高并发"}],["meta",{"name":"og:url","content":"https://JavaGuide.net"}],["meta",{"name":"og:type","content":"website"}],["meta",{"name":"og:image","content":"https://JavaGuide.net/og.png"}],["meta",{"name":"og:title","content":"Spring5源码分析-第2章 | JavaGuide | Java面试指南 | JavaGuide官网"}],["meta",{"name":"og:description","content":"Spring5源码分析-第2章 | JavaGuide | Java面试指南 | JavaGuide官网 | 「JavaGuide.net」一份涵盖大部分 Java 程序员所需要掌握的核心知识。准备 Java 面试，首选 JavaGuide.net ！"}],["meta",{"name":"twitter:site","content":"https://JavaGuide.net"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:creator","content":"nogeek.cn"}],["meta",{"name":"twitter:title","content":"Spring5源码分析-第2章 | JavaGuide | Java面试指南 | JavaGuide官网"}],["meta",{"name":"twitter:description","content":"Spring5源码分析-第2章 | JavaGuide | Java面试指南 | JavaGuide官网 | 「JavaGuide.net」一份涵盖大部分 Java 程序员所需要掌握的核心知识。准备 Java 面试，首选 JavaGuide.net ！"}],["meta",{"name":"twitter:image","content":"https://JavaGuide.net/og.png"}],["meta",{"name":"sogou_site_verification","content":"fcAkazTXFd"}],["meta",{"name":"baidu-site-verification","content":"codeva-MXEPYsXKGk"}],["meta",{"name":"msvalidate.01","content":"9F2D57CFC59E8031212A166878638B15"}]]},"headers":[],"relativePath":"百万架构师/设计模式/设计模式预习资料/Spring5源码分析-第2章.md","filePath":"百万架构师/设计模式/设计模式预习资料/Spring5源码分析-第2章.md","lastUpdated":1741277271000}'),d={name:"百万架构师/设计模式/设计模式预习资料/Spring5源码分析-第2章.md"},t=o('<h1 id="第二章-springweb应用开发篇" tabindex="-1">第二章--SpringWeb应用开发篇 <a class="header-anchor" href="#第二章-springweb应用开发篇" aria-label="Permalink to &quot;第二章--SpringWeb应用开发篇&quot;">​</a></h1><h2 id="二、spring-源码版本命名规则及下载安装" tabindex="-1">二、Spring 源码版本命名规则及下载安装 <a class="header-anchor" href="#二、spring-源码版本命名规则及下载安装" aria-label="Permalink to &quot;二、Spring 源码版本命名规则及下载安装&quot;">​</a></h2><h2 id="_2-1、spring源码版本命名规则" tabindex="-1">2.1、Spring源码版本命名规则 <a class="header-anchor" href="#_2-1、spring源码版本命名规则" aria-label="Permalink to &quot;2.1、Spring源码版本命名规则&quot;">​</a></h2><h3 id="_1-首先看看某些常见软件的版本号" tabindex="-1">(1) 首先看看某些常见软件的版本号： <a class="header-anchor" href="#_1-首先看看某些常见软件的版本号" aria-label="Permalink to &quot;(1) 首先看看某些常见软件的版本号：&quot;">​</a></h3><ul><li>Linux Kernel: <code>0.0.1</code> , <code>1.0.0</code> , <code>2.6.32</code> , <code>3.0.18</code> ...,若用 <code>X.Y.Z</code> 表示，则偶数 <code>Y</code>表示稳定版本，奇数 <code>Y</code> 表示开发版本</li><li>Windows: <code>Windows 98</code> , <code>Windows 2000</code> , <code>Windows XP</code> , <code>Windows 7</code> , <code>Windows 10</code> ...,最大的特点是杂乱无章，毫无规律。</li><li>SSH Client: <code>0.9.8</code>。</li><li>OpenStack: <code>2014.1.3</code> , <code>2015.1.1.dev8</code> 。</li></ul><blockquote><p>从上可以看出，不同的软件版本号风格各异，随着系统的规模越大，依赖的软件越多，如果这些软件没有遵循一套规范的命名风格，容易造成 Dependency Hell。所以当我们发布版本时，版本号的命名需要遵循某种规则，其中 <code>Semantic Versioning 2.0.0</code> 定义了一套简单的规则及条件来约束版本号的配置和增长。本文根据 <code>Semantic Versionning 2.0.0</code> 和 <code>Semantic Versioning 3.0.0</code> 选择性的整理出版本号命名规则指南。</p></blockquote><h3 id="_2-版本号命名规则指南" tabindex="-1">(2)版本号命名规则指南 <a class="header-anchor" href="#_2-版本号命名规则指南" aria-label="Permalink to &quot;(2)版本号命名规则指南&quot;">​</a></h3><ul><li>版本号的格式为<code> X.Y.Z</code>(又称 <code>Major.Minor.Patch</code>)，递增的规则为： <ul><li>X 表示主版本号，当 API 的兼容性变化时，X 需递增。</li><li>Y 表示次版本号，当增加功能时(不影响 API 的兼容性)，Y 需递增。</li><li>Z 表示修订号，当做 Bug 修复时(不影响 API 的兼容性)，Z 需递增。</li></ul></li><li>详细的规则如下： <ul><li>X, Y, Z 必须为非负整数，且不得包含前导零，必须按数值递增，如 <code>1.9.0</code> -&gt; <code>1.10.0 </code>-&gt; <code>1.11.0</code></li><li><code>0.Y.Z</code> 的版本号表明软件处于初始开发阶段，意味着 API 可能不稳定；<code>1.0.0</code> 表明版本已有稳定的 API。</li><li>当 API 的兼容性变化时，X 必须递增，Y 和 Z 同时设置为 0；当新增功能(不影响 API 的兼容性)或者 API 被标记为 <code>Deprecated</code> 时，Y 必须递增，同时 Z 设置为 0；当进行 bug fix 时，Z 必须递增。</li><li>先行版本号(Pre-Release)意味该版本不稳定，可能存在兼容性问题，其格式为：<code>X.Y.Z.[a-c][正整数]</code>，如 <code>1.0.0.a1</code>，<code>1.0.0.b99</code>，<code>1.0.0.c1000</code>。</li><li>开发版本号常用于 <code>CI-CD</code>，格式为 <code>X.Y.Z.dev[正整数]</code>，如 <code>1.0.1.dev4</code>。</li><li>版本号的排序规则为依次比较主版本号、次版本号和修订号的数值，如 <code>1.0.0</code> &lt; <code>1.0.1</code> &lt; <code>1.1.1</code> &lt; <code>2.0.0</code>；对于先行版本号和开发版本号，有：<code>1.0.0.a100</code> &lt; <code>1.0.0</code>，<code>2.1.0.dev3</code> &lt; <code>2.1.0</code>；当存在字母时，以 ASCII 的排序来比较，如 <code>1.0.0.a1</code> &lt; <code>1.0.0.b1</code>。</li></ul></li></ul><h3 id="注意-版本一经发布-不得修改其内容-任何修改必须在新版本发布-以下是一些常用的修饰的词" tabindex="-1">注意：版本一经发布，不得修改其内容，任何修改必须在新版本发布！以下是一些常用的修饰的词： <a class="header-anchor" href="#注意-版本一经发布-不得修改其内容-任何修改必须在新版本发布-以下是一些常用的修饰的词" aria-label="Permalink to &quot;注意：版本一经发布，不得修改其内容，任何修改必须在新版本发布！以下是一些常用的修饰的词：&quot;">​</a></h3><ul><li><code>Snapshot</code> 版本代表不稳定、尚处于开发中的版本</li><li><code>Alpha</code>: 内部版本</li><li><code>DEV</code>: 开发版本（Development）</li><li><code>Beta</code>: 测试版</li><li><code>Demo</code>: 演示版</li><li><code>Enhance</code>: 增强版</li><li><code>Free</code>: 自由版</li><li><code>Full Version</code>: 完整版，即正式版</li><li><code>Final</code>:最终版，正式版</li><li><code>LTS</code>: 长期维护版本(Long Term Support),一般为18个月。</li><li><code>Pro(professional)</code>:专业版</li><li><code>Plus</code>:加强版</li><li><code>Retail</code>:零售版</li><li><code>Shareware</code> 共享版，虽然不会要求注册但是一般也有功能限制</li><li><code>SR</code> :修正版（Senior，中文解释为资深）</li><li><code>Trial</code> :试用版（一般有时间或者功能限制）</li><li><code>Release</code> : 发行版</li><li><code>RC</code> : 即将作为正式版发布(Release Candidat)</li><li><code>Standard</code> : 标准版</li><li><code>Ultimate</code>: 旗舰版</li><li><code>Upgrade</code>: 升级版</li></ul><h3 id="_3-spring版本命名规则" tabindex="-1">(3)Spring版本命名规则 <a class="header-anchor" href="#_3-spring版本命名规则" aria-label="Permalink to &quot;(3)Spring版本命名规则&quot;">​</a></h3><ol><li><code>Release</code> 版本则代表稳定的版本</li><li><code>GA</code> 版本则代表广泛可用的稳定版 ( General Availability )</li><li><code>M</code> 版本则代表里程碑版( M 是 Milestone 的意思）具有一些全新的功能或是具有里程碑意义的版本。</li></ol><h3 id="_2-2、spring5源码下载" tabindex="-1">2.2、Spring5源码下载 <a class="header-anchor" href="#_2-2、spring5源码下载" aria-label="Permalink to &quot;2.2、Spring5源码下载&quot;">​</a></h3><ul><li>第一步：<a href="https://github.com/spring-projects/spring-framework/archive/v5.0.2.RELEASE.zip" target="_blank" rel="noreferrer">https://github.com/spring-projects/spring-framework/archive/v5.0.2.RELEASE.zip</a></li><li>第二步：下载gradle <a href="http://downloads.gradle.org/distributions/gradle-1.6-bin.zip" target="_blank" rel="noreferrer">http://downloads.gradle.org/distributions/gradle-1.6-bin.zip</a></li><li>第三步：解压,配置GRADLE_HOME 和Path</li><li>第四步：验证 gradle -v，环境变量是否正确</li><li>第五步：点击 gradle.bat 构建项目</li></ul>',14),c=[t];function l(n,r,s,p,g,h){return a(),i("div",null,c)}const _=e(d,[["render",l]]);export{m as __pageData,_ as default};
